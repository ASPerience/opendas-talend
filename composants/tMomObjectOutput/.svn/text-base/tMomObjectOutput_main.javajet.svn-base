<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnectionCategory
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
    java.util.List
    java.util.Map
" 
class="MomObjectOutput"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String serverType=ElementParameterParser.getValue(node, "__SERVER__");
	String useMsgId=ElementParameterParser.getValue(node, "__IS_USE_MESSAGE_ID__");
	boolean useMQFormat = ("true").equals(ElementParameterParser.getValue(node, "__USE_FORMAT__"));
	String wsMQFormat = ElementParameterParser.getValue(node, "__WS_MQ_FORMAT__");
	
	String msgBobyType =  ElementParameterParser.getValue(node, "__MESSAGE_BODY_TYPE__");
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
		List<IMetadataColumn> columns = metadata.getListColumns();
		List< ? extends IConnection> conns = node.getIncomingConnections();
		if((conns!=null)&&(conns.size()>0)) {
			IConnection conn = conns.get(0);
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
			
				if (("JBoss").equals(serverType) || ("ActiveMQ").equals(serverType)) {
				
					/*-------------------1.is use message id.this functions just use map message type-------------------------------------*/
					if(("true").equals(useMsgId)){
%>
						String msgID_<%=cid%> = <%=conn.getName() %>.<%=((IMetadataColumn)columns.get(1)).getLabel() %>;
						javax.jms.MapMessage message_<%=cid%> = session_<%=cid%>.createMapMessage();
<%
					}
					
					/*--------------------------2.judge message body type----------------------------------------------------------------*/
%>
			
					//on reconstitue le message d'origine
					org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
					previousRequest.setTitle(<%=conn.getName()%>.title);
					previousRequest.setSendUrl(<%=conn.getName()%>.sendUrl);
					previousRequest.setFromUrl(<%=conn.getName()%>.fromUrl);
					previousRequest.setSendedDate(<%=conn.getName()%>.sendedDate);
					previousRequest.setAttachement((java.io.Serializable) <%=conn.getName()%>.attachement);
					
					//on crée le message de réponse
					org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(previousRequest);
					response.setTitle(<%=conn.getName()%>.title_out);
					response.setSendedDate(<%=conn.getName()%>.sendedDate_out);
					response.setAttachement((java.io.Serializable) <%=conn.getName()%>.attachement_out);
					
					
					javax.jms.ObjectMessage message_<%=cid%> = session_<%=cid%>.createObjectMessage();//On crée l'ObjectMessage
					message_<%=cid%>.setObject(response);
					message_<%=cid%>.setStringProperty("Sujet", <%=conn.getName()%>.station);
					
					
					
					
					System.out.println("----------------------------");
					System.out.println(response);
					System.out.println("----------------------------");

<%


					if ("Text".equals(msgBobyType)) {
%>
						String msgBody_<%=cid%> = String.valueOf(<%=conn.getName() %>.<%=((IMetadataColumn)columns.get(0)).getLabel()%>);
<%
						if(!("true").equals(useMsgId)){
%>
							javax.jms.TextMessage message_<%=cid%> = session_<%=cid%>.createTextMessage( msgBody_<%=cid%>);
<%
						} else {
%>
							 message_<%=cid%>.setString(msgID_<%=cid%>,msgBody_<%=cid%>);
<%
						}
					} else if ("Bytes".equals(msgBobyType)) {
						IMetadataColumn column = (IMetadataColumn)columns.get(0);
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
%>
						String msgBody_<%=cid%> = String.valueOf(<%=conn.getName() %>.<%=((IMetadataColumn)columns.get(0)).getLabel()%>);
<%
						if(!("true").equals(useMsgId)){
%>
							javax.jms.BytesMessage message_<%=cid%> = session_<%=cid%>.createBytesMessage();
							message_<%=cid%>.writeBytes(msgBody_<%=cid%>.getBytes());
<%
						} else {
%>
							message_<%=cid%>.setBytes(msgID_<%=cid%>,msgBody_<%=cid%>.getBytes());
<%
						}
					} else if ("Map".equals(msgBobyType)) {
%>
						javax.jms.MapMessage message_<%=cid%> = session_<%=cid%>.createMapMessage();
<%
						for(IMetadataColumn column : columns) {
							 String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
							  if(("byte[]").equals(typeToGenerate)) {
					                typeToGenerate = "Bytes";
					            }else if(("Character").equals(typeToGenerate)) {
					            	 typeToGenerate = "Char";
					            }else if(("Integer").equals(typeToGenerate)) {
					            	 typeToGenerate = "Int";
					            } else if(("Java.util.Date").equals(typeToGenerate)||"BigDecimal".equals(typeToGenerate)
					            			||"List".equals(typeToGenerate)) {
					            	 typeToGenerate = "Object";
					            }else {
					                typeToGenerate = typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
					            }
%>
							message_<%=cid%>.set<%=typeToGenerate%>("<%=column.getLabel()%>",<%=conn.getName() %>.<%=column.getLabel() %>);
<%
						}







					} 
					
					/*---------------------------------------------3.send message to server------------------------------------------------------*/
%>
						des_<%=cid %> = session_<%=cid %>.createQueue(response.getSendUrl());
						producer_<%=cid %> = session_<%=cid %>.createProducer(des_<%=cid %>);
						producer_<%=cid %>.send(message_<%=cid %>);
<%
				} else {//server judgement   /***WebSphere MQ*****/
%>
					com.ibm.mq.MQMessage message_<%=cid%> = new com.ibm.mq.MQMessage();
<% 
					if(useMQFormat) {
%>
						message_<%=cid%>.format = <%=wsMQFormat%>;
<%
					}
%>	
<%
					if(("true").equals(useMsgId) && !"Map".equals(msgBobyType)){
%>
						String msgID_<%=cid%> = <%=conn.getName() %>.<%=((IMetadataColumn)columns.get(1)).getLabel() %>;
						if (msgID_<%=cid%> != null & !("").equals(msgID_<%=cid%>)) {
							String padding = new String();
					       	int padlen = 24;
					 
					       	int len = Math.abs(padlen) - msgID_<%=cid%>.toString().length();
					       	if (len > 0) {
					        	for (int i = 0 ; i < len ; i++) {
					           		padding = padding + " ";
					         	}
					        	msgID_<%=cid%> = msgID_<%=cid%> + padding;
					        }
						}
						message_<%=cid%>.messageId = msgID_<%=cid%>.getBytes("ISO-8859-15");
<%
					}
					if ("Text".equals(msgBobyType)) {
%>
						String msgBody_<%=cid%> = String.valueOf(<%=conn.getName() %>.<%=((IMetadataColumn)columns.get(0)).getLabel()%>);
						message_<%=cid%>.writeString(msgBody_<%=cid%>);
<%
					} else if ("Bytes".equals(msgBobyType)) {
%>
						String msgBody_<%=cid%> = String.valueOf(<%=conn.getName() %>.<%=((IMetadataColumn)columns.get(0)).getLabel()%>);
						message_<%=cid%>.write(msgBody_<%=cid%>.getBytes());
<%
					} else if ("Map".equals(msgBobyType)) {
%>
						java.util.Map msgBody_<%=cid%> = new java.util.HashMap();
<%
						for(IMetadataColumn column : columns) {
%>
							msgBody_<%=cid%>.put("<%=column.getLabel()%>",<%=conn.getName() %>.<%=column.getLabel() %>);
<%
						}
%>
				    	message_<%=cid%>.writeObject(msgBody_<%=cid%>);
				  
<%
					}
%>
					remoteQ_<%=cid%>.put(message_<%=cid%>, opM_<%=cid%>);
<%
				}
			}
		}
	}  
%>
	


		
