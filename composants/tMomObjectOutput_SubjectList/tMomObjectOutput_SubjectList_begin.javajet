<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.core.model.process.IConnection
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnectionCategory
    java.util.List
" 
class="MomObjectOutput_SubjectList"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String serverType=ElementParameterParser.getValue(node, "__SERVER__");
	String station=ElementParameterParser.getValue(node, "__STATION__");
	String host=ElementParameterParser.getValue(node, "__SERVERADDRESS__");
	String port=ElementParameterParser.getValue(node, "__SERVERPORT__");
	String msgType = ElementParameterParser.getValue(node, "__MSGTYPE__");
	String from = ElementParameterParser.getValue(node, "__FROM__");
	String to = ElementParameterParser.getValue(node, "__TO__");
	String deliverMode = ElementParameterParser.getValue(node, "__DELIVERY_MODE__");
	
	boolean transacted = "true".equals(ElementParameterParser.getValue(node, "__IS_TRANSACTED__"));
	String acknowledgmentMode = ElementParameterParser.getValue(node, "__ACKNOWLEDGMENT_MODE__");
	
	IMetadataTable metadata=null;
	List<IMetadataTable> metadatas = node.getMetadataList();
		if ((metadatas!=null)&&(metadatas.size()>0)) {
			metadata = metadatas.get(0);
		}
%>
	java.util.Hashtable props_<%=cid%>=new java.util.Hashtable();
<%
	if (("JBoss").equals(serverType) || ("ActiveMQ").equals(serverType)) {// server judgement
	
	/*---------------------------------------1.initial jms connection factry---------------------------------*/ 
		if(("JBoss").equals(serverType)){ 
%>
			props_<%=cid%>.put(javax.naming.Context.INITIAL_CONTEXT_FACTORY,"org.jnp.interfaces.NamingContextFactory");
			props_<%=cid%>.put(javax.naming.Context.PROVIDER_URL, <%=host%>+":"+<%=port%>);
			props_<%=cid%>.put("java.naming.rmi.security.manager", "yes");
			
			javax.naming.Context context_<%=cid%>=new javax.naming.InitialContext(props_<%=cid%>);
			javax.jms.ConnectionFactory factory_<%=cid%>
				= (javax.jms.ConnectionFactory)context_<%=cid%>.lookup("ConnectionFactory");	
				
<%
		}else if(("ActiveMQ").equals(serverType)){
%>
			String url_<%=cid %> = "tcp://"+<%=host%>+":"+<%=port%>;
			System.out.println("Connecting to URL: " + url_<%=cid %>);
			System.out.println("Producing " + (<%=!("Queue").equals(msgType)%> ? "topic" : "queue") + ": " + <%=to %>);
			
			
			org.apache.activemq.ActiveMQConnectionFactory factory_<%=cid %> = 
				new org.apache.activemq.ActiveMQConnectionFactory
					(org.apache.activemq.ActiveMQConnection.DEFAULT_USER, org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD, url_<%=cid %>);
<%
		}
		
		/*---------------------------------------2.create Queue Or Topic from connection ---------------------------------*/ 
%>	
				
		javax.jms.Connection connection_<%=cid %> = factory_<%=cid %>.createConnection();
		connection_<%=cid %>.start();
	
		javax.jms.Session session_<%=cid %> = connection_<%=cid %>.createSession(<%=transacted%>, javax.jms.Session.<%=acknowledgmentMode%>);
		
		javax.jms.Destination des_<%=cid %>;
<%
		if (("Queue").equals(msgType)) {
%>
			des_<%=cid %> = session_<%=cid %>.createQueue(<%=to %>);
<%
		} else {
%>
	    	des_<%=cid %> = session_<%=cid %>.createTopic(<%=to %>);
<%
		}
%>
		javax.jms.MessageProducer producer_<%=cid %> = session_<%=cid %>.createProducer(des_<%=cid %>);
		
<%
		if ("N_PERSISTENT".equals(deliverMode)) {
%>
			producer_<%=cid %>.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);
<%
		} else if ("PERSISTENT".equals(deliverMode)) {
%>
			producer_<%=cid %>.setDeliveryMode(javax.jms.DeliveryMode.PERSISTENT);
<%
		}
%>
		

<%
	}else{ //server judgement   /***WebSphere MQ*****/
		String channel=ElementParameterParser.getValue(node, "__CHANNEL__");
		String qm=ElementParameterParser.getValue(node, "__QM__");
		String queue = ElementParameterParser.getValue(node, "__QUEUE__");
%>
	    props_<%=cid%>.put("hostname", <%=host%>);
	    props_<%=cid%>.put("port", Integer.valueOf(<%=port%>));
	    props_<%=cid%>.put("channel", <%=channel%>);
	    props_<%=cid%>.put("CCSID", new Integer(1208));
	    props_<%=cid%>.put("transport", "MQSeries");
	
		com.ibm.mq.MQQueueManager qMgr_<%=cid%> = new com.ibm.mq.MQQueueManager(<%=qm%>, props_<%=cid%>);
	    com.ibm.mq.MQQueue remoteQ_<%=cid%> = qMgr_<%=cid%>.accessQueue(<%=queue%>, 16);
	    com.ibm.mq.MQPutMessageOptions opM_<%=cid%> = new com.ibm.mq.MQPutMessageOptions();
<%
	}
%>
	


		
