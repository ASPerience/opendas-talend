// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package opendas.get_demo_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tLibraryLoad_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: GET_DEMO Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.5.1.r118616
 * @status 
 */
public class GET_DEMO implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (addressActiveMQ != null) {

				this.setProperty("addressActiveMQ", addressActiveMQ.toString());

			}

			if (host != null) {

				this.setProperty("host", host.toString());

			}

			if (port != null) {

				this.setProperty("port", port.toString());

			}

			if (pwd != null) {

				this.setProperty("pwd", pwd.toString());

			}

			if (receiverClientActiveMQ != null) {

				this.setProperty("receiverClientActiveMQ",
						receiverClientActiveMQ.toString());

			}

			if (receiverServerActiveMQ != null) {

				this.setProperty("receiverServerActiveMQ",
						receiverServerActiveMQ.toString());

			}

			if (senderActiveMQ != null) {

				this.setProperty("senderActiveMQ", senderActiveMQ.toString());

			}

			if (username != null) {

				this.setProperty("username", username.toString());

			}

			if (dbnameOdoo != null) {

				this.setProperty("dbnameOdoo", dbnameOdoo.toString());

			}

			if (hostOdoo != null) {

				this.setProperty("hostOdoo", hostOdoo.toString());

			}

			if (portOdoo != null) {

				this.setProperty("portOdoo", portOdoo.toString());

			}

			if (pwdOdoo != null) {

				this.setProperty("pwdOdoo", pwdOdoo.toString());

			}

			if (usernameOdoo != null) {

				this.setProperty("usernameOdoo", usernameOdoo.toString());

			}

			if (station != null) {

				this.setProperty("station", station.toString());

			}

			if (portActiveMQ != null) {

				this.setProperty("portActiveMQ", portActiveMQ.toString());

			}

		}

		public String addressActiveMQ;

		public String getAddressActiveMQ() {
			return this.addressActiveMQ;
		}

		public String host;

		public String getHost() {
			return this.host;
		}

		public String port;

		public String getPort() {
			return this.port;
		}

		public String pwd;

		public String getPwd() {
			return this.pwd;
		}

		public String receiverClientActiveMQ;

		public String getReceiverClientActiveMQ() {
			return this.receiverClientActiveMQ;
		}

		public String receiverServerActiveMQ;

		public String getReceiverServerActiveMQ() {
			return this.receiverServerActiveMQ;
		}

		public String senderActiveMQ;

		public String getSenderActiveMQ() {
			return this.senderActiveMQ;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String dbnameOdoo;

		public String getDbnameOdoo() {
			return this.dbnameOdoo;
		}

		public String hostOdoo;

		public String getHostOdoo() {
			return this.hostOdoo;
		}

		public String portOdoo;

		public String getPortOdoo() {
			return this.portOdoo;
		}

		public String pwdOdoo;

		public String getPwdOdoo() {
			return this.pwdOdoo;
		}

		public String usernameOdoo;

		public String getUsernameOdoo() {
			return this.usernameOdoo;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String portActiveMQ;

		public String getPortActiveMQ() {
			return this.portActiveMQ;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "GET_DEMO";
	private final String projectName = "OPENDAS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					GET_DEMO.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(GET_DEMO.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tContextLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMomObjectOutput_SubjectList_1_error(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectOutput_SubjectList_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMomObjectInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_179_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLRPCOpenDAS_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMomObjectOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLRPCOpenDAS_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMomObjectOutput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLRPCOpenDAS_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMomObjectOutput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLRPCOpenDAS_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMomObjectOutput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLRPCOpenDAS_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMomObjectOutput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLRPCOpenDAS_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMomObjectOutput_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLRPCOpenDAS_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMomObjectOutput_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMomObjectOutput_SubjectList_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMomObjectInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEMO = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEMO = new byte[0];

		public String Column0;

		public String getColumn0() {
			return this.Column0;
		}

		public String Column1;

		public String getColumn1() {
			return this.Column1;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEMO.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEMO.length == 0) {
						commonByteArray_OPENDAS_GET_DEMO = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEMO = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEMO, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEMO, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEMO) {

				try {

					int length = 0;

					this.Column0 = readString(dis);

					this.Column1 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Column0, dos);

				// String

				writeString(this.Column1, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Column0=" + Column0);
			sb.append(",Column1=" + Column1);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tContextLoad_1 begin ] start
				 */

				ok_Hash.put("tContextLoad_1", false);
				start_Hash.put("tContextLoad_1", System.currentTimeMillis());

				currentComponent = "tContextLoad_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tContextLoad_1 = 0;

				java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_1 = 0;

				/**
				 * [tContextLoad_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = "/home/opendas/workspace/opendas/talend/Jobs/config/GET_demo.conf";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {

							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"/home/opendas/workspace/opendas/talend/Jobs/config/GET_demo.conf",
								"ISO-8859-15", ";", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.Column0 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.Column1 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tContextLoad_1 main ] start
							 */

							currentComponent = "tContextLoad_1";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1"
										+ iterateId, 1, 1);
							}

							// ////////////////////////
							String tmp_key_tContextLoad_1 = null;

							String key_tContextLoad_1 = null;
							if (row1.Column0 != null) {
								tmp_key_tContextLoad_1 = row1.Column0.trim();
								if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1
										.startsWith("!"))) {
									tmp_key_tContextLoad_1 = null;
								} else {
									row1.Column0 = tmp_key_tContextLoad_1;
								}
							}
							if (row1.Column0 != null) {

								key_tContextLoad_1 =

								row1.Column0;

							}

							String value_tContextLoad_1 = null;
							if (row1.Column1 != null) {

								value_tContextLoad_1 =

								row1.Column1;

							}

							if (tmp_key_tContextLoad_1 != null) {
								try {
									if (key_tContextLoad_1 != null
											&& "addressActiveMQ"
													.equals(key_tContextLoad_1)) {
										context.addressActiveMQ = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "host"
													.equals(key_tContextLoad_1)) {
										context.host = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "port"
													.equals(key_tContextLoad_1)) {
										context.port = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "pwd".equals(key_tContextLoad_1)) {
										context.pwd = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "receiverClientActiveMQ"
													.equals(key_tContextLoad_1)) {
										context.receiverClientActiveMQ = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "receiverServerActiveMQ"
													.equals(key_tContextLoad_1)) {
										context.receiverServerActiveMQ = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "senderActiveMQ"
													.equals(key_tContextLoad_1)) {
										context.senderActiveMQ = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "username"
													.equals(key_tContextLoad_1)) {
										context.username = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "dbnameOdoo"
													.equals(key_tContextLoad_1)) {
										context.dbnameOdoo = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "hostOdoo"
													.equals(key_tContextLoad_1)) {
										context.hostOdoo = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "portOdoo"
													.equals(key_tContextLoad_1)) {
										context.portOdoo = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "pwdOdoo"
													.equals(key_tContextLoad_1)) {
										context.pwdOdoo = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "usernameOdoo"
													.equals(key_tContextLoad_1)) {
										context.usernameOdoo = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "station"
													.equals(key_tContextLoad_1)) {
										context.station = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "portActiveMQ"
													.equals(key_tContextLoad_1)) {
										context.portActiveMQ = value_tContextLoad_1;
									}

									if (context.getProperty(key_tContextLoad_1) != null) {
										assignList_tContextLoad_1
												.add(key_tContextLoad_1);
									} else {
										newPropertyList_tContextLoad_1
												.add(key_tContextLoad_1);
									}
									context.setProperty(key_tContextLoad_1,
											value_tContextLoad_1);
								} catch (java.lang.Exception e) {

									System.err
											.println("Setting a value for the key \""
													+ key_tContextLoad_1
													+ "\" has failed. Error message: "
													+ e.getMessage());
								}
								nb_line_tContextLoad_1++;

							}
							// ////////////////////////

							tos_count_tContextLoad_1++;

							/**
							 * [tContextLoad_1 main ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("/home/opendas/workspace/opendas/talend/Jobs/config/GET_demo.conf") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tContextLoad_1 end ] start
				 */

				currentComponent = "tContextLoad_1";

				java.util.Enumeration<?> enu_tContextLoad_1 = context
						.propertyNames();
				while (enu_tContextLoad_1.hasMoreElements()) {
					String key_tContextLoad_1 = (String) enu_tContextLoad_1
							.nextElement();
					if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
							&& !newPropertyList_tContextLoad_1
									.contains(key_tContextLoad_1)) {
						noAssignList_tContextLoad_1.add(key_tContextLoad_1);
					}
				}

				String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1
						.toString();
				String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1
						.substring(1,
								newPropertyStr_tContextLoad_1.length() - 1);

				String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1
						.toString();
				String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1
						.substring(1, noAssignStr_tContextLoad_1.length() - 1);

				globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT",
						newProperty_tContextLoad_1);
				globalMap.put("tContextLoad_1_KEY_NOT_LOADED",
						noAssign_tContextLoad_1);

				globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

				resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread
						.currentThread().getId() + "", "", "", "", "",
						resumeUtil.convertToJsonText(context));

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tContextLoad_1", true);
				end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tMomObjectOutput_SubjectList_1Process(globalMap);

				/**
				 * [tContextLoad_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tContextLoad_1 finally ] start
				 */

				currentComponent = "tContextLoad_1";

				/**
				 * [tContextLoad_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tMomObjectOutput_SubjectList_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMomObjectOutput_SubjectList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMomObjectOutput_SubjectList_1 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_SubjectList_1", false);
				start_Hash.put("tMomObjectOutput_SubjectList_1",
						System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_SubjectList_1";

				int tos_count_tMomObjectOutput_SubjectList_1 = 0;

				java.util.Hashtable props_tMomObjectOutput_SubjectList_1 = new java.util.Hashtable();
				String url_tMomObjectOutput_SubjectList_1 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_SubjectList_1);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.receiverServerActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_SubjectList_1 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_SubjectList_1);

				javax.jms.Connection connection_tMomObjectOutput_SubjectList_1 = factory_tMomObjectOutput_SubjectList_1
						.createConnection();
				connection_tMomObjectOutput_SubjectList_1.start();

				javax.jms.Session session_tMomObjectOutput_SubjectList_1 = connection_tMomObjectOutput_SubjectList_1
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_SubjectList_1;
				des_tMomObjectOutput_SubjectList_1 = session_tMomObjectOutput_SubjectList_1
						.createQueue(context.receiverServerActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_SubjectList_1 = session_tMomObjectOutput_SubjectList_1
						.createProducer(des_tMomObjectOutput_SubjectList_1);

				producer_tMomObjectOutput_SubjectList_1
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_SubjectList_1 begin ] stop
				 */
				/**
				 * [tMomObjectOutput_SubjectList_1 main ] start
				 */

				currentComponent = "tMomObjectOutput_SubjectList_1";

				// On envoie le message qui demandera la liste des sujets à
				// suivre dans la file
				org.opendas.modele.ServerRequest serverRequest = new org.opendas.modele.ServerRequest();

				serverRequest.setTitle("getSubjectList");
				serverRequest.setSendUrl(context.receiverServerActiveMQ);
				serverRequest.setFromUrl(context.senderActiveMQ);

				javax.jms.ObjectMessage message_tMomObjectOutput_SubjectList_1 = session_tMomObjectOutput_SubjectList_1
						.createObjectMessage();// On crée l'ObjectMessage

				message_tMomObjectOutput_SubjectList_1.setObject(serverRequest);

				// propriétés
				message_tMomObjectOutput_SubjectList_1.setStringProperty(
						"Sujet", "getSubjectList");
				message_tMomObjectOutput_SubjectList_1.setStringProperty(
						"Station", context.station);

				System.out
						.println("tMomObjectOutput_SubjectList_1 Envoi de la demande de liste de sujets");// DEBUG
				producer_tMomObjectOutput_SubjectList_1
						.send(message_tMomObjectOutput_SubjectList_1);

				tos_count_tMomObjectOutput_SubjectList_1++;

				/**
				 * [tMomObjectOutput_SubjectList_1 main ] stop
				 */
				/**
				 * [tMomObjectOutput_SubjectList_1 end ] start
				 */

				currentComponent = "tMomObjectOutput_SubjectList_1";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_SubjectList_1.close();
				session_tMomObjectOutput_SubjectList_1.close();
				connection_tMomObjectOutput_SubjectList_1.close();

				ok_Hash.put("tMomObjectOutput_SubjectList_1", true);
				end_Hash.put("tMomObjectOutput_SubjectList_1",
						System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tMomObjectInput_2Process(globalMap);

				/**
				 * [tMomObjectOutput_SubjectList_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMomObjectOutput_SubjectList_1 finally ] start
				 */

				currentComponent = "tMomObjectOutput_SubjectList_1";

				/**
				 * [tMomObjectOutput_SubjectList_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMomObjectOutput_SubjectList_1_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEMO = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEMO = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEMO.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEMO.length == 0) {
						commonByteArray_OPENDAS_GET_DEMO = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEMO = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEMO, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEMO, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEMO) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEMO = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEMO = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEMO.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEMO.length == 0) {
						commonByteArray_OPENDAS_GET_DEMO = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEMO = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEMO, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEMO, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEMO) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEMO = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEMO = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEMO.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEMO.length == 0) {
						commonByteArray_OPENDAS_GET_DEMO = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEMO = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEMO, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEMO, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEMO) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEMO = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEMO = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEMO.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEMO.length == 0) {
						commonByteArray_OPENDAS_GET_DEMO = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEMO = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEMO, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEMO, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEMO) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEMO = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEMO = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEMO.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEMO.length == 0) {
						commonByteArray_OPENDAS_GET_DEMO = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEMO = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEMO, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEMO, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEMO) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEMO = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEMO = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEMO.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEMO.length == 0) {
						commonByteArray_OPENDAS_GET_DEMO = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEMO = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEMO, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEMO, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEMO) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEMO = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEMO = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEMO.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEMO.length == 0) {
						commonByteArray_OPENDAS_GET_DEMO = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEMO = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEMO, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEMO, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEMO) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.attachement_out = (Object) dis.readObject();

					this.sendedDate = readDate(dis);

					this.sendedDate_out = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class groupsStruct implements
			routines.system.IPersistableRow<groupsStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEMO = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEMO = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEMO.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEMO.length == 0) {
						commonByteArray_OPENDAS_GET_DEMO = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEMO = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEMO, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEMO, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEMO) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.attachement_out = (Object) dis.readObject();

					this.sendedDate = readDate(dis);

					this.sendedDate_out = readDate(dis);

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(groupsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class picking_inStruct implements
			routines.system.IPersistableRow<picking_inStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEMO = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEMO = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEMO.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEMO.length == 0) {
						commonByteArray_OPENDAS_GET_DEMO = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEMO = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEMO, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEMO, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEMO) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(picking_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class picking_outStruct implements
			routines.system.IPersistableRow<picking_outStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEMO = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEMO = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEMO.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEMO.length == 0) {
						commonByteArray_OPENDAS_GET_DEMO = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEMO = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEMO, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEMO, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEMO) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(picking_outStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class employeeStruct implements
			routines.system.IPersistableRow<employeeStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEMO = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEMO = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEMO.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEMO.length == 0) {
						commonByteArray_OPENDAS_GET_DEMO = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEMO = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEMO, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEMO, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEMO) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(employeeStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class productStruct implements
			routines.system.IPersistableRow<productStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEMO = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEMO = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEMO.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEMO.length == 0) {
						commonByteArray_OPENDAS_GET_DEMO = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEMO = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEMO, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEMO, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEMO) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(productStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class production_pdfStruct implements
			routines.system.IPersistableRow<production_pdfStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEMO = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEMO = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEMO.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEMO.length == 0) {
						commonByteArray_OPENDAS_GET_DEMO = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEMO = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEMO, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEMO, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEMO) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(production_pdfStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class productionStruct implements
			routines.system.IPersistableRow<productionStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEMO = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEMO = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEMO.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEMO.length == 0) {
						commonByteArray_OPENDAS_GET_DEMO = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEMO = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEMO, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEMO, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEMO) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(productionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class getWsGenericsExtStruct implements
			routines.system.IPersistableRow<getWsGenericsExtStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEMO = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEMO = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEMO.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEMO.length == 0) {
						commonByteArray_OPENDAS_GET_DEMO = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEMO = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEMO, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEMO, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEMO) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(getWsGenericsExtStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEMO = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEMO = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEMO.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEMO.length == 0) {
						commonByteArray_OPENDAS_GET_DEMO = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEMO = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEMO, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEMO, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEMO) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.attachement = (Object) dis.readObject();

					this.sendedDate = readDate(dis);

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.attachement_out = (Object) dis.readObject();

					this.sendedDate_out = readDate(dis);

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// Object

				dos.writeObject(this.attachement);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMomObjectInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMomObjectInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();
				getWsGenericsExtStruct getWsGenericsExt = new getWsGenericsExtStruct();
				groupsStruct groups = new groupsStruct();
				row2Struct row2 = new row2Struct();
				picking_inStruct picking_in = new picking_inStruct();
				row5Struct row5 = new row5Struct();
				picking_outStruct picking_out = new picking_outStruct();
				row7Struct row7 = new row7Struct();
				employeeStruct employee = new employeeStruct();
				row3Struct row3 = new row3Struct();
				productStruct product = new productStruct();
				row4Struct row4 = new row4Struct();
				production_pdfStruct production_pdf = new production_pdfStruct();
				row9Struct row9 = new row9Struct();
				productionStruct production = new productionStruct();
				row8Struct row8 = new row8Struct();

				/**
				 * [tMomObjectOutput_1 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_1", false);
				start_Hash
						.put("tMomObjectOutput_1", System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tMomObjectOutput_1 = 0;

				java.util.Hashtable props_tMomObjectOutput_1 = new java.util.Hashtable();
				String url_tMomObjectOutput_1 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_1);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_1 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_1);

				javax.jms.Connection connection_tMomObjectOutput_1 = factory_tMomObjectOutput_1
						.createConnection();
				connection_tMomObjectOutput_1.start();

				javax.jms.Session session_tMomObjectOutput_1 = connection_tMomObjectOutput_1
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_1;
				des_tMomObjectOutput_1 = session_tMomObjectOutput_1
						.createQueue(context.senderActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_1 = session_tMomObjectOutput_1
						.createProducer(des_tMomObjectOutput_1);

				producer_tMomObjectOutput_1
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_1 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_1 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_1", false);
				start_Hash.put("tXMLRPCOpenDAS_1", System.currentTimeMillis());

				currentComponent = "tXMLRPCOpenDAS_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("groups" + iterateId, 0,
								0);

					}
				}

				int tos_count_tXMLRPCOpenDAS_1 = 0;

				/**
				 * [tXMLRPCOpenDAS_1 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_4 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_4", false);
				start_Hash
						.put("tMomObjectOutput_4", System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tMomObjectOutput_4 = 0;

				java.util.Hashtable props_tMomObjectOutput_4 = new java.util.Hashtable();
				String url_tMomObjectOutput_4 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_4);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_4 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_4);

				javax.jms.Connection connection_tMomObjectOutput_4 = factory_tMomObjectOutput_4
						.createConnection();
				connection_tMomObjectOutput_4.start();

				javax.jms.Session session_tMomObjectOutput_4 = connection_tMomObjectOutput_4
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_4;
				des_tMomObjectOutput_4 = session_tMomObjectOutput_4
						.createQueue(context.senderActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_4 = session_tMomObjectOutput_4
						.createProducer(des_tMomObjectOutput_4);

				producer_tMomObjectOutput_4
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_4 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_5 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_5", false);
				start_Hash.put("tXMLRPCOpenDAS_5", System.currentTimeMillis());

				currentComponent = "tXMLRPCOpenDAS_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection(
								"picking_in" + iterateId, 0, 0);

					}
				}

				int tos_count_tXMLRPCOpenDAS_5 = 0;

				/**
				 * [tXMLRPCOpenDAS_5 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_5 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_5", false);
				start_Hash
						.put("tMomObjectOutput_5", System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tMomObjectOutput_5 = 0;

				java.util.Hashtable props_tMomObjectOutput_5 = new java.util.Hashtable();
				String url_tMomObjectOutput_5 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_5);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_5 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_5);

				javax.jms.Connection connection_tMomObjectOutput_5 = factory_tMomObjectOutput_5
						.createConnection();
				connection_tMomObjectOutput_5.start();

				javax.jms.Session session_tMomObjectOutput_5 = connection_tMomObjectOutput_5
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_5;
				des_tMomObjectOutput_5 = session_tMomObjectOutput_5
						.createQueue(context.senderActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_5 = session_tMomObjectOutput_5
						.createProducer(des_tMomObjectOutput_5);

				producer_tMomObjectOutput_5
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_5 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_6 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_6", false);
				start_Hash.put("tXMLRPCOpenDAS_6", System.currentTimeMillis());

				currentComponent = "tXMLRPCOpenDAS_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("picking_out"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tXMLRPCOpenDAS_6 = 0;

				/**
				 * [tXMLRPCOpenDAS_6 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_2 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_2", false);
				start_Hash
						.put("tMomObjectOutput_2", System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tMomObjectOutput_2 = 0;

				java.util.Hashtable props_tMomObjectOutput_2 = new java.util.Hashtable();
				String url_tMomObjectOutput_2 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_2);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_2 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_2);

				javax.jms.Connection connection_tMomObjectOutput_2 = factory_tMomObjectOutput_2
						.createConnection();
				connection_tMomObjectOutput_2.start();

				javax.jms.Session session_tMomObjectOutput_2 = connection_tMomObjectOutput_2
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_2;
				des_tMomObjectOutput_2 = session_tMomObjectOutput_2
						.createQueue(context.senderActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_2 = session_tMomObjectOutput_2
						.createProducer(des_tMomObjectOutput_2);

				producer_tMomObjectOutput_2
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_2 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_3 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_3", false);
				start_Hash.put("tXMLRPCOpenDAS_3", System.currentTimeMillis());

				currentComponent = "tXMLRPCOpenDAS_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("employee" + iterateId,
								0, 0);

					}
				}

				int tos_count_tXMLRPCOpenDAS_3 = 0;

				/**
				 * [tXMLRPCOpenDAS_3 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_3 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_3", false);
				start_Hash
						.put("tMomObjectOutput_3", System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tMomObjectOutput_3 = 0;

				java.util.Hashtable props_tMomObjectOutput_3 = new java.util.Hashtable();
				String url_tMomObjectOutput_3 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_3);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_3 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_3);

				javax.jms.Connection connection_tMomObjectOutput_3 = factory_tMomObjectOutput_3
						.createConnection();
				connection_tMomObjectOutput_3.start();

				javax.jms.Session session_tMomObjectOutput_3 = connection_tMomObjectOutput_3
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_3;
				des_tMomObjectOutput_3 = session_tMomObjectOutput_3
						.createQueue(context.senderActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_3 = session_tMomObjectOutput_3
						.createProducer(des_tMomObjectOutput_3);

				producer_tMomObjectOutput_3
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_3 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_4 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_4", false);
				start_Hash.put("tXMLRPCOpenDAS_4", System.currentTimeMillis());

				currentComponent = "tXMLRPCOpenDAS_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("product" + iterateId,
								0, 0);

					}
				}

				int tos_count_tXMLRPCOpenDAS_4 = 0;

				/**
				 * [tXMLRPCOpenDAS_4 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_7 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_7", false);
				start_Hash
						.put("tMomObjectOutput_7", System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tMomObjectOutput_7 = 0;

				java.util.Hashtable props_tMomObjectOutput_7 = new java.util.Hashtable();
				String url_tMomObjectOutput_7 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_7);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_7 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_7);

				javax.jms.Connection connection_tMomObjectOutput_7 = factory_tMomObjectOutput_7
						.createConnection();
				connection_tMomObjectOutput_7.start();

				javax.jms.Session session_tMomObjectOutput_7 = connection_tMomObjectOutput_7
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_7;
				des_tMomObjectOutput_7 = session_tMomObjectOutput_7
						.createQueue(context.senderActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_7 = session_tMomObjectOutput_7
						.createProducer(des_tMomObjectOutput_7);

				producer_tMomObjectOutput_7
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_7 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_8 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_8", false);
				start_Hash.put("tXMLRPCOpenDAS_8", System.currentTimeMillis());

				currentComponent = "tXMLRPCOpenDAS_8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("production_pdf"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tXMLRPCOpenDAS_8 = 0;

				/**
				 * [tXMLRPCOpenDAS_8 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_6 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_6", false);
				start_Hash
						.put("tMomObjectOutput_6", System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);

					}
				}

				int tos_count_tMomObjectOutput_6 = 0;

				java.util.Hashtable props_tMomObjectOutput_6 = new java.util.Hashtable();
				String url_tMomObjectOutput_6 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_6);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_6 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_6);

				javax.jms.Connection connection_tMomObjectOutput_6 = factory_tMomObjectOutput_6
						.createConnection();
				connection_tMomObjectOutput_6.start();

				javax.jms.Session session_tMomObjectOutput_6 = connection_tMomObjectOutput_6
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_6;
				des_tMomObjectOutput_6 = session_tMomObjectOutput_6
						.createQueue(context.senderActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_6 = session_tMomObjectOutput_6
						.createProducer(des_tMomObjectOutput_6);

				producer_tMomObjectOutput_6
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_6 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_7 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_7", false);
				start_Hash.put("tXMLRPCOpenDAS_7", System.currentTimeMillis());

				currentComponent = "tXMLRPCOpenDAS_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection(
								"production" + iterateId, 0, 0);

					}
				}

				int tos_count_tXMLRPCOpenDAS_7 = 0;

				/**
				 * [tXMLRPCOpenDAS_7 begin ] stop
				 */

				/**
				 * [tMap_179 begin ] start
				 */

				ok_Hash.put("tMap_179", false);
				start_Hash.put("tMap_179", System.currentTimeMillis());

				currentComponent = "tMap_179";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("getWsGenericsExt"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tMap_179 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_179__Struct {
				}
				Var__tMap_179__Struct Var__tMap_179 = new Var__tMap_179__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				groupsStruct groups_tmp = new groupsStruct();
				picking_inStruct picking_in_tmp = new picking_inStruct();
				picking_outStruct picking_out_tmp = new picking_outStruct();
				employeeStruct employee_tmp = new employeeStruct();
				productStruct product_tmp = new productStruct();
				production_pdfStruct production_pdf_tmp = new production_pdfStruct();
				productionStruct production_tmp = new productionStruct();
				// ###############################

				/**
				 * [tMap_179 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				getWsGenericsExtStruct getWsGenericsExt_tmp = new getWsGenericsExtStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tMomObjectInput_2 begin ] start
				 */

				ok_Hash.put("tMomObjectInput_2", false);
				start_Hash.put("tMomObjectInput_2", System.currentTimeMillis());

				currentComponent = "tMomObjectInput_2";

				int tos_count_tMomObjectInput_2 = 0;

				String url_tMomObjectInput_2 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				long timeout_tMomObjectInput_2 = 1;

				System.out.println("Connecting to URL: "
						+ url_tMomObjectInput_2);
				System.out.println("Consuming " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectInput_2 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectInput_2);

				javax.jms.Connection connection_tMomObjectInput_2 = factory_tMomObjectInput_2
						.createConnection();
				connection_tMomObjectInput_2.start();
				javax.jms.Session session_tMomObjectInput_2 = connection_tMomObjectInput_2
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);
				javax.jms.Destination des_tMomObjectInput_2 = null;

				des_tMomObjectInput_2 = session_tMomObjectInput_2
						.createQueue(context.senderActiveMQ);

				javax.jms.MessageProducer replyProducer_tMomObjectInput_2 = session_tMomObjectInput_2
						.createProducer(null);
				replyProducer_tMomObjectInput_2
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				javax.jms.MessageConsumer consumer_tMomObjectInput_2 = session_tMomObjectInput_2
						.createConsumer(des_tMomObjectInput_2, "Sujet = '"
								+ context.station + "'");
				System.out
						.println("tMomObjectInput_2 Attente de la liste de sujet Sujet = 'context.station'");

				javax.jms.Message message_tMomObjectInput_2;
				System.out
						.println("tMomObjectInput_2 Attente de la liste de sujets");

				// Réception de la liste de sujets à écouter

				java.util.List subjectList = null;
				// Boucle qui écoute jusqu'à ce qu'on ait retiré la liste du
				// message.
				while ((message_tMomObjectInput_2 = consumer_tMomObjectInput_2
						.receive()) != null) {

					javax.jms.ObjectMessage objMsg_tMomObjectInput_2 = (javax.jms.ObjectMessage) message_tMomObjectInput_2;
					Object object = objMsg_tMomObjectInput_2.getObject();
					if (object instanceof org.opendas.modele.ServerRequest) {
						org.opendas.modele.ServerRequest serverRequest = (org.opendas.modele.ServerRequest) object;
						subjectList = (java.util.List) serverRequest
								.getAttachement();
						System.out.println("tMomObjectInput_2 Liste reçue");
						break;
					}
				}

				// Création de la requête de sélection de sujets en fonction de
				// la liste reçue.
				StringBuilder strBuild = new StringBuilder();

				java.util.Iterator it = subjectList.iterator();
				while (it.hasNext()) {
					strBuild.append("Sujet = '");
					strBuild.append(it.next() + "'");
					if (it.hasNext())
						strBuild.append(" OR ");
				}

				// Création d'un autre MessageConsumer avec le bon
				// MessageSelector
				System.out
						.println("tMomObjectInput_2 Liste de sujets non utilisée");// DEBUG
				consumer_tMomObjectInput_2 = session_tMomObjectInput_2
						.createConsumer(des_tMomObjectInput_2,
								strBuild.toString());
				System.out.println("\ntMomObjectInput_2 message selector : "
						+ consumer_tMomObjectInput_2.getMessageSelector());

				System.out
						.println("We will consume messages while they continue to be delivered ");
				while ((message_tMomObjectInput_2 = consumer_tMomObjectInput_2
						.receive()) != null) {

					javax.jms.ObjectMessage objMsg_tMomObjectInput_2 = (javax.jms.ObjectMessage) message_tMomObjectInput_2;
					String msg_tMomObjectInput_2 = "";
					Object object = objMsg_tMomObjectInput_2.getObject();
					System.out.println("\ntMomObjectInput_2 Station : "
							+ objMsg_tMomObjectInput_2
									.getStringProperty("Station"));// DEBUG
					String station = objMsg_tMomObjectInput_2
							.getStringProperty("Station");
					// initialisation des champs récupérés dans le message
					String title = null;
					String sendUrl = null;
					String fromUrl = null;
					Date sendedDate = null;
					Object attachement = null;

					if (object instanceof org.opendas.modele.ServerRequest) {
						org.opendas.modele.ServerRequest serverRequest = (org.opendas.modele.ServerRequest) object;

						// champs qui serviront à créer l'object previousRequest
						// que l'on enverra avec la réponse
						title = serverRequest.getTitle();// on récupère le champ
															// "title"
						sendUrl = serverRequest.getSendUrl();// on récupère le
																// champ
																// "sendUrl"
						fromUrl = serverRequest.getFromUrl();// on récupère le
																// champ
																// "fromUrl"
						sendedDate = serverRequest.getSendedDate();// on
																	// récupère
																	// le champ
																	// "sendedDate"

						// champ contenant les paramètres de la requête XMLRPC à
						// effectuer
						attachement = serverRequest.getAttachement();

						System.out
								.println("tMomObjectInput_2 title : " + title);// DEBUG

					}

					// renseigner les champs des connexions de sortie (champs
					// pour previousRequest)
					row6.title = title;
					row6.sendUrl = sendUrl;
					row6.fromUrl = fromUrl;
					row6.sendedDate = sendedDate;
					// champ attachement fournissant les paramètres pour la
					// requête XMLRPC
					row6.attachement = attachement;
					// nom de l'expéditeur du message (la propriété "Sujet" de
					// la réponse prendra cette valeur)
					row6.station = station;

					/**
					 * [tMomObjectInput_2 begin ] stop
					 */
					/**
					 * [tMomObjectInput_2 main ] start
					 */

					currentComponent = "tMomObjectInput_2";

					tos_count_tMomObjectInput_2++;

					/**
					 * [tMomObjectInput_2 main ] stop
					 */

					/**
					 * [tMap_3 main ] start
					 */

					currentComponent = "tMap_3";

					// row6
					// row6

					if (execStat) {
						runStat.updateStatOnConnection("row6" + iterateId, 1, 1);
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_3 = false;
					boolean mainRowRejected_tMap_3 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
						// ###############################
						// # Output tables

						getWsGenericsExt = null;

						// # Output table : 'getWsGenericsExt'
						// # Filter conditions
						if (

						"getWsGenericsExt".equals(row6.title)

						) {
							getWsGenericsExt_tmp.title = row6.title;
							getWsGenericsExt_tmp.sendUrl = row6.sendUrl;
							getWsGenericsExt_tmp.fromUrl = row6.fromUrl;
							getWsGenericsExt_tmp.sendedDate = row6.sendedDate;
							getWsGenericsExt_tmp.attachement = row6.attachement;
							getWsGenericsExt_tmp.station = row6.station;
							getWsGenericsExt_tmp.title_out = row6.title_out;
							getWsGenericsExt_tmp.send_out = row6.send_out;
							getWsGenericsExt_tmp.from_out = row6.from_out;
							getWsGenericsExt_tmp.sendedDate_out = row6.sendedDate_out;
							getWsGenericsExt_tmp.attachement_out = row6.attachement_out;
							getWsGenericsExt_tmp.station_out = row6.station_out;
							getWsGenericsExt = getWsGenericsExt_tmp;
						} // closing filter/reject
							// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_3 = false;

					tos_count_tMap_3++;

					/**
					 * [tMap_3 main ] stop
					 */
					// Start of branch "getWsGenericsExt"
					if (getWsGenericsExt != null) {

						/**
						 * [tMap_179 main ] start
						 */

						currentComponent = "tMap_179";

						// getWsGenericsExt
						// getWsGenericsExt

						if (execStat) {
							runStat.updateStatOnConnection("getWsGenericsExt"
									+ iterateId, 1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_179 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_179 = false;
						boolean mainRowRejected_tMap_179 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_179__Struct Var = Var__tMap_179;// ###############################
							// ###############################
							// # Output tables

							groups = null;
							picking_in = null;
							picking_out = null;
							employee = null;
							product = null;
							production_pdf = null;
							production = null;

							// # Output table : 'groups'
							// # Filter conditions
							if (

							"groups".equals(((java.util.Map) getWsGenericsExt.attachement)
									.get("model"))

							) {
								groups_tmp.title = getWsGenericsExt.title;
								groups_tmp.sendUrl = getWsGenericsExt.sendUrl;
								groups_tmp.fromUrl = getWsGenericsExt.fromUrl;
								groups_tmp.attachement = getWsGenericsExt.attachement;
								groups_tmp.station = getWsGenericsExt.station;
								groups_tmp.title_out = getWsGenericsExt.title_out;
								groups_tmp.send_out = getWsGenericsExt.send_out;
								groups_tmp.from_out = getWsGenericsExt.from_out;
								groups_tmp.attachement_out = getWsGenericsExt.attachement_out;
								groups_tmp.sendedDate = getWsGenericsExt.sendedDate;
								groups_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								groups_tmp.station_out = getWsGenericsExt.station_out;
								groups = groups_tmp;
							} // closing filter/reject

							// # Output table : 'picking_in'
							// # Filter conditions
							if (

							"picking_in"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								picking_in_tmp.title = getWsGenericsExt.title;
								picking_in_tmp.sendUrl = getWsGenericsExt.sendUrl;
								picking_in_tmp.fromUrl = getWsGenericsExt.fromUrl;
								picking_in_tmp.sendedDate = getWsGenericsExt.sendedDate;
								picking_in_tmp.attachement = getWsGenericsExt.attachement;
								picking_in_tmp.station = getWsGenericsExt.station;
								picking_in_tmp.title_out = getWsGenericsExt.title_out;
								picking_in_tmp.send_out = getWsGenericsExt.send_out;
								picking_in_tmp.from_out = getWsGenericsExt.from_out;
								picking_in_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								picking_in_tmp.attachement_out = getWsGenericsExt.attachement_out;
								picking_in_tmp.station_out = getWsGenericsExt.station_out;
								picking_in = picking_in_tmp;
							} // closing filter/reject

							// # Output table : 'picking_out'
							// # Filter conditions
							if (

							"picking_out"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								picking_out_tmp.title = getWsGenericsExt.title;
								picking_out_tmp.sendUrl = getWsGenericsExt.sendUrl;
								picking_out_tmp.fromUrl = getWsGenericsExt.fromUrl;
								picking_out_tmp.sendedDate = getWsGenericsExt.sendedDate;
								picking_out_tmp.attachement = getWsGenericsExt.attachement;
								picking_out_tmp.station = getWsGenericsExt.station;
								picking_out_tmp.title_out = getWsGenericsExt.title_out;
								picking_out_tmp.send_out = getWsGenericsExt.send_out;
								picking_out_tmp.from_out = getWsGenericsExt.from_out;
								picking_out_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								picking_out_tmp.attachement_out = getWsGenericsExt.attachement_out;
								picking_out_tmp.station_out = getWsGenericsExt.station_out;
								picking_out = picking_out_tmp;
							} // closing filter/reject

							// # Output table : 'employee'
							// # Filter conditions
							if (

							"employee"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								employee_tmp.title = getWsGenericsExt.title;
								employee_tmp.sendUrl = getWsGenericsExt.sendUrl;
								employee_tmp.fromUrl = getWsGenericsExt.fromUrl;
								employee_tmp.sendedDate = getWsGenericsExt.sendedDate;
								employee_tmp.attachement = getWsGenericsExt.attachement;
								employee_tmp.station = getWsGenericsExt.station;
								employee_tmp.title_out = getWsGenericsExt.title_out;
								employee_tmp.send_out = getWsGenericsExt.send_out;
								employee_tmp.from_out = getWsGenericsExt.from_out;
								employee_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								employee_tmp.attachement_out = getWsGenericsExt.attachement_out;
								employee_tmp.station_out = getWsGenericsExt.station_out;
								employee = employee_tmp;
							} // closing filter/reject

							// # Output table : 'product'
							// # Filter conditions
							if (

							"product"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								product_tmp.title = getWsGenericsExt.title;
								product_tmp.sendUrl = getWsGenericsExt.sendUrl;
								product_tmp.fromUrl = getWsGenericsExt.fromUrl;
								product_tmp.sendedDate = getWsGenericsExt.sendedDate;
								product_tmp.attachement = getWsGenericsExt.attachement;
								product_tmp.station = getWsGenericsExt.station;
								product_tmp.title_out = getWsGenericsExt.title_out;
								product_tmp.send_out = getWsGenericsExt.send_out;
								product_tmp.from_out = getWsGenericsExt.from_out;
								product_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								product_tmp.attachement_out = getWsGenericsExt.attachement_out;
								product_tmp.station_out = getWsGenericsExt.station_out;
								product = product_tmp;
							} // closing filter/reject

							// # Output table : 'production_pdf'
							// # Filter conditions
							if (

							"production_pdf"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								production_pdf_tmp.title = getWsGenericsExt.title;
								production_pdf_tmp.sendUrl = getWsGenericsExt.sendUrl;
								production_pdf_tmp.fromUrl = getWsGenericsExt.fromUrl;
								production_pdf_tmp.sendedDate = getWsGenericsExt.sendedDate;
								production_pdf_tmp.attachement = getWsGenericsExt.attachement;
								production_pdf_tmp.station = getWsGenericsExt.station;
								production_pdf_tmp.title_out = getWsGenericsExt.title_out;
								production_pdf_tmp.send_out = getWsGenericsExt.send_out;
								production_pdf_tmp.from_out = getWsGenericsExt.from_out;
								production_pdf_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								production_pdf_tmp.attachement_out = getWsGenericsExt.attachement_out;
								production_pdf_tmp.station_out = getWsGenericsExt.station_out;
								production_pdf = production_pdf_tmp;
							} // closing filter/reject

							// # Output table : 'production'
							// # Filter conditions
							if (

							"production"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								production_tmp.title = getWsGenericsExt.title;
								production_tmp.sendUrl = getWsGenericsExt.sendUrl;
								production_tmp.fromUrl = getWsGenericsExt.fromUrl;
								production_tmp.sendedDate = getWsGenericsExt.sendedDate;
								production_tmp.attachement = getWsGenericsExt.attachement;
								production_tmp.station = getWsGenericsExt.station;
								production_tmp.title_out = getWsGenericsExt.title_out;
								production_tmp.send_out = getWsGenericsExt.send_out;
								production_tmp.from_out = getWsGenericsExt.from_out;
								production_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								production_tmp.attachement_out = getWsGenericsExt.attachement_out;
								production_tmp.station_out = getWsGenericsExt.station_out;
								production = production_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_179 = false;

						tos_count_tMap_179++;

						/**
						 * [tMap_179 main ] stop
						 */
						// Start of branch "groups"
						if (groups != null) {

							/**
							 * [tXMLRPCOpenDAS_1 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_1";

							// groups
							// groups

							if (execStat) {
								runStat.updateStatOnConnection("groups"
										+ iterateId, 1, 1);
							}

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_1 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_1 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_1 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_1);
							}

							consoleOut_tXMLRPCOpenDAS_1
									.println("tXMLRPCOpenDAS_1"
											+ " received parameters : "
											+ groups.toString());
							consoleOut_tXMLRPCOpenDAS_1.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_1 = groups.title;
							String sendUrl_tXMLRPCOpenDAS_1 = groups.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_1 = groups.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_1 = groups.sendedDate;
							String station_tXMLRPCOpenDAS_1 = groups.station;
							java.util.Map checkingMap = (java.util.Map) groups.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
								if ("perso".equals(tab[i])) {
									vals.put("employee",
											checkingMap.get(tab[i]));
								}
								if ("persoin".equals(tab[i])) {
									vals.put("employee",
											checkingMap.get(tab[i]));
								}
								if ("persoout".equals(tab[i])) {
									vals.put("employee",
											checkingMap.get(tab[i]));
								}
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_1 = null;
							String sendUrl_out_tXMLRPCOpenDAS_1 = null;
							String fromUrl_out_tXMLRPCOpenDAS_1 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_1 = null;
							String station_out_tXMLRPCOpenDAS_1 = null;
							Object attachement_out_tXMLRPCOpenDAS_1 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_1
										.println("tXMLRPCOpenDAS_1"
												+ " Connexion OpenERP_V5 ");
								consoleOut_tXMLRPCOpenDAS_1.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_1 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameOdoo,
										context.usernameOdoo, context.pwdOdoo,
										context.hostOdoo, context.portOdoo);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_1
										.println("tXMLRPCOpenDAS_1"
												+ " XMLRpc : "
												+ "hr.employee"
												+ " "
												+ "talend_get_groups_by_employee");
								consoleOut_tXMLRPCOpenDAS_1.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_1 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_1
										.exec("hr.employee",
												"talend_get_groups_by_employee",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_1 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_1 : "
													+ responsetXMLRPCOpenDAS_1);
									result.setCode(responsetXMLRPCOpenDAS_1
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_1
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_1
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_1
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_1 = {
									title_tXMLRPCOpenDAS_1,
									sendUrl_tXMLRPCOpenDAS_1,
									fromUrl_tXMLRPCOpenDAS_1,
									sendedDate_tXMLRPCOpenDAS_1,
									groups.attachement,
									station_tXMLRPCOpenDAS_1,
									title_out_tXMLRPCOpenDAS_1,
									sendUrl_out_tXMLRPCOpenDAS_1,
									fromUrl_out_tXMLRPCOpenDAS_1,
									sendedDate_out_tXMLRPCOpenDAS_1, result,
									station_out_tXMLRPCOpenDAS_1 };

							for (int i_tXMLRPCOpenDAS_1 = 0; i_tXMLRPCOpenDAS_1 < results_tXMLRPCOpenDAS_1.length; i_tXMLRPCOpenDAS_1++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[0] != null) {
									row2.title = (String) results_tXMLRPCOpenDAS_1[0];

								} else {
									row2.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[1] != null) {
									row2.sendUrl = (String) results_tXMLRPCOpenDAS_1[1];

								} else {
									row2.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[2] != null) {
									row2.fromUrl = (String) results_tXMLRPCOpenDAS_1[2];

								} else {
									row2.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[3] != null) {
									row2.attachement = (Object) results_tXMLRPCOpenDAS_1[3];

								} else {
									row2.attachement = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[4] != null) {
									row2.station = (String) results_tXMLRPCOpenDAS_1[4];

								} else {
									row2.station = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[5] != null) {
									row2.title_out = (String) results_tXMLRPCOpenDAS_1[5];

								} else {
									row2.title_out = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[6] != null) {
									row2.send_out = (String) results_tXMLRPCOpenDAS_1[6];

								} else {
									row2.send_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[7] != null) {
									row2.from_out = (String) results_tXMLRPCOpenDAS_1[7];

								} else {
									row2.from_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[8] != null) {
									row2.attachement_out = (Object) results_tXMLRPCOpenDAS_1[8];

								} else {
									row2.attachement_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[9] != null) {
									row2.sendedDate = (Date) results_tXMLRPCOpenDAS_1[9];

								} else {
									row2.sendedDate = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[10] != null) {
									row2.sendedDate_out = (Date) results_tXMLRPCOpenDAS_1[10];

								} else {
									row2.sendedDate_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_1++;

							/**
							 * [tXMLRPCOpenDAS_1 main ] stop
							 */
							// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tMomObjectOutput_1 main ] start
								 */

								currentComponent = "tMomObjectOutput_1";

								// row2
								// row2

								if (execStat) {
									runStat.updateStatOnConnection("row2"
											+ iterateId, 1, 1);
								}

								System.out.println("attachement :"
										+ row2.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row2.title);
								previousRequest.setSendUrl(row2.sendUrl);
								previousRequest.setFromUrl(row2.fromUrl);
								previousRequest.setSendedDate(row2.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row2.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row2.title_out);
								response.setSendedDate(row2.sendedDate_out);
								response.setAttachement((java.io.Serializable) row2.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_1 = session_tMomObjectOutput_1
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_1.setObject(response);
								message_tMomObjectOutput_1.setStringProperty(
										"Sujet", row2.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_1 = session_tMomObjectOutput_1
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_1 = session_tMomObjectOutput_1
										.createProducer(des_tMomObjectOutput_1);
								producer_tMomObjectOutput_1
										.send(message_tMomObjectOutput_1);

								tos_count_tMomObjectOutput_1++;

								/**
								 * [tMomObjectOutput_1 main ] stop
								 */

							} // End of branch "row2"

						} // End of branch "groups"

						// Start of branch "picking_in"
						if (picking_in != null) {

							/**
							 * [tXMLRPCOpenDAS_5 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_5";

							// picking_in
							// picking_in

							if (execStat) {
								runStat.updateStatOnConnection("picking_in"
										+ iterateId, 1, 1);
							}

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_5 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_5 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_5 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_5);
							}

							consoleOut_tXMLRPCOpenDAS_5
									.println("tXMLRPCOpenDAS_5"
											+ " received parameters : "
											+ picking_in.toString());
							consoleOut_tXMLRPCOpenDAS_5.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_5 = picking_in.title;
							String sendUrl_tXMLRPCOpenDAS_5 = picking_in.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_5 = picking_in.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_5 = picking_in.sendedDate;
							String station_tXMLRPCOpenDAS_5 = picking_in.station;
							java.util.Map checkingMap = (java.util.Map) picking_in.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_5 = null;
							String sendUrl_out_tXMLRPCOpenDAS_5 = null;
							String fromUrl_out_tXMLRPCOpenDAS_5 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_5 = null;
							String station_out_tXMLRPCOpenDAS_5 = null;
							Object attachement_out_tXMLRPCOpenDAS_5 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_5
										.println("tXMLRPCOpenDAS_5"
												+ " Connexion OpenERP_V5 ");
								consoleOut_tXMLRPCOpenDAS_5.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_5 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameOdoo,
										context.usernameOdoo, context.pwdOdoo,
										context.hostOdoo, context.portOdoo);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								context_search_tmp.add(new Object[] { "state",
										"=", "assigned" });
								context_search_tmp.add(new Object[] { "type",
										"=", "in" });

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_5
										.println("tXMLRPCOpenDAS_5"
												+ " XMLRpc : " + "hr.employee"
												+ " " + "talend_get_picking");
								consoleOut_tXMLRPCOpenDAS_5.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_5 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_5
										.exec("hr.employee",
												"talend_get_picking", vals,
												context_search);
								if (responsetXMLRPCOpenDAS_5 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_5 : "
													+ responsetXMLRPCOpenDAS_5);
									result.setCode(responsetXMLRPCOpenDAS_5
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_5
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_5
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_5
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_5 = {
									title_tXMLRPCOpenDAS_5,
									sendUrl_tXMLRPCOpenDAS_5,
									fromUrl_tXMLRPCOpenDAS_5,
									sendedDate_tXMLRPCOpenDAS_5,
									picking_in.attachement,
									station_tXMLRPCOpenDAS_5,
									title_out_tXMLRPCOpenDAS_5,
									sendUrl_out_tXMLRPCOpenDAS_5,
									fromUrl_out_tXMLRPCOpenDAS_5,
									sendedDate_out_tXMLRPCOpenDAS_5, result,
									station_out_tXMLRPCOpenDAS_5 };

							for (int i_tXMLRPCOpenDAS_5 = 0; i_tXMLRPCOpenDAS_5 < results_tXMLRPCOpenDAS_5.length; i_tXMLRPCOpenDAS_5++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[0] != null) {
									row5.title = (String) results_tXMLRPCOpenDAS_5[0];

								} else {
									row5.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[1] != null) {
									row5.sendUrl = (String) results_tXMLRPCOpenDAS_5[1];

								} else {
									row5.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[2] != null) {
									row5.fromUrl = (String) results_tXMLRPCOpenDAS_5[2];

								} else {
									row5.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[3] != null) {
									row5.sendedDate = (Date) results_tXMLRPCOpenDAS_5[3];

								} else {
									row5.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[4] != null) {
									row5.attachement = (Object) results_tXMLRPCOpenDAS_5[4];

								} else {
									row5.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[5] != null) {
									row5.station = (String) results_tXMLRPCOpenDAS_5[5];

								} else {
									row5.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[6] != null) {
									row5.title_out = (String) results_tXMLRPCOpenDAS_5[6];

								} else {
									row5.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[7] != null) {
									row5.send_out = (String) results_tXMLRPCOpenDAS_5[7];

								} else {
									row5.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[8] != null) {
									row5.from_out = (String) results_tXMLRPCOpenDAS_5[8];

								} else {
									row5.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[9] != null) {
									row5.sendedDate_out = (Date) results_tXMLRPCOpenDAS_5[9];

								} else {
									row5.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[10] != null) {
									row5.attachement_out = (Object) results_tXMLRPCOpenDAS_5[10];

								} else {
									row5.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[11] != null) {
									row5.station_out = (String) results_tXMLRPCOpenDAS_5[11];

								} else {
									row5.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_5++;

							/**
							 * [tXMLRPCOpenDAS_5 main ] stop
							 */
							// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tMomObjectOutput_4 main ] start
								 */

								currentComponent = "tMomObjectOutput_4";

								// row5
								// row5

								if (execStat) {
									runStat.updateStatOnConnection("row5"
											+ iterateId, 1, 1);
								}

								System.out.println("attachement :"
										+ row5.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row5.title);
								previousRequest.setSendUrl(row5.sendUrl);
								previousRequest.setFromUrl(row5.fromUrl);
								previousRequest.setSendedDate(row5.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row5.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row5.title_out);
								response.setSendedDate(row5.sendedDate_out);
								response.setAttachement((java.io.Serializable) row5.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_4 = session_tMomObjectOutput_4
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_4.setObject(response);
								message_tMomObjectOutput_4.setStringProperty(
										"Sujet", row5.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_4 = session_tMomObjectOutput_4
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_4 = session_tMomObjectOutput_4
										.createProducer(des_tMomObjectOutput_4);
								producer_tMomObjectOutput_4
										.send(message_tMomObjectOutput_4);

								tos_count_tMomObjectOutput_4++;

								/**
								 * [tMomObjectOutput_4 main ] stop
								 */

							} // End of branch "row5"

						} // End of branch "picking_in"

						// Start of branch "picking_out"
						if (picking_out != null) {

							/**
							 * [tXMLRPCOpenDAS_6 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_6";

							// picking_out
							// picking_out

							if (execStat) {
								runStat.updateStatOnConnection("picking_out"
										+ iterateId, 1, 1);
							}

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_6 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_6 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_6 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_6);
							}

							consoleOut_tXMLRPCOpenDAS_6
									.println("tXMLRPCOpenDAS_6"
											+ " received parameters : "
											+ picking_out.toString());
							consoleOut_tXMLRPCOpenDAS_6.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_6 = picking_out.title;
							String sendUrl_tXMLRPCOpenDAS_6 = picking_out.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_6 = picking_out.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_6 = picking_out.sendedDate;
							String station_tXMLRPCOpenDAS_6 = picking_out.station;
							java.util.Map checkingMap = (java.util.Map) picking_out.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_6 = null;
							String sendUrl_out_tXMLRPCOpenDAS_6 = null;
							String fromUrl_out_tXMLRPCOpenDAS_6 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_6 = null;
							String station_out_tXMLRPCOpenDAS_6 = null;
							Object attachement_out_tXMLRPCOpenDAS_6 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_6
										.println("tXMLRPCOpenDAS_6"
												+ " Connexion OpenERP_V5 ");
								consoleOut_tXMLRPCOpenDAS_6.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_6 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameOdoo,
										context.usernameOdoo, context.pwdOdoo,
										context.hostOdoo, context.portOdoo);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								context_search_tmp.add(new Object[] { "state",
										"=", "assigned" });
								context_search_tmp.add(new Object[] { "type",
										"=", "out" });

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_6
										.println("tXMLRPCOpenDAS_6"
												+ " XMLRpc : " + "hr.employee"
												+ " " + "talend_get_picking");
								consoleOut_tXMLRPCOpenDAS_6.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_6 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_6
										.exec("hr.employee",
												"talend_get_picking", vals,
												context_search);
								if (responsetXMLRPCOpenDAS_6 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_6 : "
													+ responsetXMLRPCOpenDAS_6);
									result.setCode(responsetXMLRPCOpenDAS_6
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_6
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_6
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_6
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_6 = {
									title_tXMLRPCOpenDAS_6,
									sendUrl_tXMLRPCOpenDAS_6,
									fromUrl_tXMLRPCOpenDAS_6,
									sendedDate_tXMLRPCOpenDAS_6,
									picking_out.attachement,
									station_tXMLRPCOpenDAS_6,
									title_out_tXMLRPCOpenDAS_6,
									sendUrl_out_tXMLRPCOpenDAS_6,
									fromUrl_out_tXMLRPCOpenDAS_6,
									sendedDate_out_tXMLRPCOpenDAS_6, result,
									station_out_tXMLRPCOpenDAS_6 };

							for (int i_tXMLRPCOpenDAS_6 = 0; i_tXMLRPCOpenDAS_6 < results_tXMLRPCOpenDAS_6.length; i_tXMLRPCOpenDAS_6++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[0] != null) {
									row7.title = (String) results_tXMLRPCOpenDAS_6[0];

								} else {
									row7.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[1] != null) {
									row7.sendUrl = (String) results_tXMLRPCOpenDAS_6[1];

								} else {
									row7.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[2] != null) {
									row7.fromUrl = (String) results_tXMLRPCOpenDAS_6[2];

								} else {
									row7.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[3] != null) {
									row7.sendedDate = (Date) results_tXMLRPCOpenDAS_6[3];

								} else {
									row7.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[4] != null) {
									row7.attachement = (Object) results_tXMLRPCOpenDAS_6[4];

								} else {
									row7.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[5] != null) {
									row7.station = (String) results_tXMLRPCOpenDAS_6[5];

								} else {
									row7.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[6] != null) {
									row7.title_out = (String) results_tXMLRPCOpenDAS_6[6];

								} else {
									row7.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[7] != null) {
									row7.send_out = (String) results_tXMLRPCOpenDAS_6[7];

								} else {
									row7.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[8] != null) {
									row7.from_out = (String) results_tXMLRPCOpenDAS_6[8];

								} else {
									row7.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[9] != null) {
									row7.sendedDate_out = (Date) results_tXMLRPCOpenDAS_6[9];

								} else {
									row7.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[10] != null) {
									row7.attachement_out = (Object) results_tXMLRPCOpenDAS_6[10];

								} else {
									row7.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[11] != null) {
									row7.station_out = (String) results_tXMLRPCOpenDAS_6[11];

								} else {
									row7.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_6++;

							/**
							 * [tXMLRPCOpenDAS_6 main ] stop
							 */
							// Start of branch "row7"
							if (row7 != null) {

								/**
								 * [tMomObjectOutput_5 main ] start
								 */

								currentComponent = "tMomObjectOutput_5";

								// row7
								// row7

								if (execStat) {
									runStat.updateStatOnConnection("row7"
											+ iterateId, 1, 1);
								}

								System.out.println("attachement :"
										+ row7.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row7.title);
								previousRequest.setSendUrl(row7.sendUrl);
								previousRequest.setFromUrl(row7.fromUrl);
								previousRequest.setSendedDate(row7.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row7.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row7.title_out);
								response.setSendedDate(row7.sendedDate_out);
								response.setAttachement((java.io.Serializable) row7.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_5 = session_tMomObjectOutput_5
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_5.setObject(response);
								message_tMomObjectOutput_5.setStringProperty(
										"Sujet", row7.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_5 = session_tMomObjectOutput_5
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_5 = session_tMomObjectOutput_5
										.createProducer(des_tMomObjectOutput_5);
								producer_tMomObjectOutput_5
										.send(message_tMomObjectOutput_5);

								tos_count_tMomObjectOutput_5++;

								/**
								 * [tMomObjectOutput_5 main ] stop
								 */

							} // End of branch "row7"

						} // End of branch "picking_out"

						// Start of branch "employee"
						if (employee != null) {

							/**
							 * [tXMLRPCOpenDAS_3 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_3";

							// employee
							// employee

							if (execStat) {
								runStat.updateStatOnConnection("employee"
										+ iterateId, 1, 1);
							}

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_3 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_3 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_3 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_3);
							}

							consoleOut_tXMLRPCOpenDAS_3
									.println("tXMLRPCOpenDAS_3"
											+ " received parameters : "
											+ employee.toString());
							consoleOut_tXMLRPCOpenDAS_3.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_3 = employee.title;
							String sendUrl_tXMLRPCOpenDAS_3 = employee.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_3 = employee.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_3 = employee.sendedDate;
							String station_tXMLRPCOpenDAS_3 = employee.station;
							java.util.Map checkingMap = (java.util.Map) employee.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_3 = null;
							String sendUrl_out_tXMLRPCOpenDAS_3 = null;
							String fromUrl_out_tXMLRPCOpenDAS_3 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_3 = null;
							String station_out_tXMLRPCOpenDAS_3 = null;
							Object attachement_out_tXMLRPCOpenDAS_3 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_3
										.println("tXMLRPCOpenDAS_3"
												+ " Connexion OpenERP_V5 ");
								consoleOut_tXMLRPCOpenDAS_3.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_3 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameOdoo,
										context.usernameOdoo, context.pwdOdoo,
										context.hostOdoo, context.portOdoo);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								context_search_tmp.add(new Object[] { "state",
										"=", "follow" });

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_3
										.println("tXMLRPCOpenDAS_3"
												+ " XMLRpc : " + "hr.employee"
												+ " "
												+ "talend_get_employee_bar");
								consoleOut_tXMLRPCOpenDAS_3.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_3 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_3
										.exec("hr.employee",
												"talend_get_employee_bar",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_3 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_3 : "
													+ responsetXMLRPCOpenDAS_3);
									result.setCode(responsetXMLRPCOpenDAS_3
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_3
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_3
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_3
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_3 = {
									title_tXMLRPCOpenDAS_3,
									sendUrl_tXMLRPCOpenDAS_3,
									fromUrl_tXMLRPCOpenDAS_3,
									sendedDate_tXMLRPCOpenDAS_3,
									employee.attachement,
									station_tXMLRPCOpenDAS_3,
									title_out_tXMLRPCOpenDAS_3,
									sendUrl_out_tXMLRPCOpenDAS_3,
									fromUrl_out_tXMLRPCOpenDAS_3,
									sendedDate_out_tXMLRPCOpenDAS_3, result,
									station_out_tXMLRPCOpenDAS_3 };

							for (int i_tXMLRPCOpenDAS_3 = 0; i_tXMLRPCOpenDAS_3 < results_tXMLRPCOpenDAS_3.length; i_tXMLRPCOpenDAS_3++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[0] != null) {
									row3.title = (String) results_tXMLRPCOpenDAS_3[0];

								} else {
									row3.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[1] != null) {
									row3.sendUrl = (String) results_tXMLRPCOpenDAS_3[1];

								} else {
									row3.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[2] != null) {
									row3.fromUrl = (String) results_tXMLRPCOpenDAS_3[2];

								} else {
									row3.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[3] != null) {
									row3.sendedDate = (Date) results_tXMLRPCOpenDAS_3[3];

								} else {
									row3.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[4] != null) {
									row3.attachement = (Object) results_tXMLRPCOpenDAS_3[4];

								} else {
									row3.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[5] != null) {
									row3.station = (String) results_tXMLRPCOpenDAS_3[5];

								} else {
									row3.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[6] != null) {
									row3.title_out = (String) results_tXMLRPCOpenDAS_3[6];

								} else {
									row3.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[7] != null) {
									row3.send_out = (String) results_tXMLRPCOpenDAS_3[7];

								} else {
									row3.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[8] != null) {
									row3.from_out = (String) results_tXMLRPCOpenDAS_3[8];

								} else {
									row3.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[9] != null) {
									row3.sendedDate_out = (Date) results_tXMLRPCOpenDAS_3[9];

								} else {
									row3.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[10] != null) {
									row3.attachement_out = (Object) results_tXMLRPCOpenDAS_3[10];

								} else {
									row3.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[11] != null) {
									row3.station_out = (String) results_tXMLRPCOpenDAS_3[11];

								} else {
									row3.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_3++;

							/**
							 * [tXMLRPCOpenDAS_3 main ] stop
							 */
							// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tMomObjectOutput_2 main ] start
								 */

								currentComponent = "tMomObjectOutput_2";

								// row3
								// row3

								if (execStat) {
									runStat.updateStatOnConnection("row3"
											+ iterateId, 1, 1);
								}

								System.out.println("attachement :"
										+ row3.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row3.title);
								previousRequest.setSendUrl(row3.sendUrl);
								previousRequest.setFromUrl(row3.fromUrl);
								previousRequest.setSendedDate(row3.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row3.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row3.title_out);
								response.setSendedDate(row3.sendedDate_out);
								response.setAttachement((java.io.Serializable) row3.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_2 = session_tMomObjectOutput_2
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_2.setObject(response);
								message_tMomObjectOutput_2.setStringProperty(
										"Sujet", row3.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_2 = session_tMomObjectOutput_2
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_2 = session_tMomObjectOutput_2
										.createProducer(des_tMomObjectOutput_2);
								producer_tMomObjectOutput_2
										.send(message_tMomObjectOutput_2);

								tos_count_tMomObjectOutput_2++;

								/**
								 * [tMomObjectOutput_2 main ] stop
								 */

							} // End of branch "row3"

						} // End of branch "employee"

						// Start of branch "product"
						if (product != null) {

							/**
							 * [tXMLRPCOpenDAS_4 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_4";

							// product
							// product

							if (execStat) {
								runStat.updateStatOnConnection("product"
										+ iterateId, 1, 1);
							}

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_4 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_4 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_4 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_4);
							}

							consoleOut_tXMLRPCOpenDAS_4
									.println("tXMLRPCOpenDAS_4"
											+ " received parameters : "
											+ product.toString());
							consoleOut_tXMLRPCOpenDAS_4.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_4 = product.title;
							String sendUrl_tXMLRPCOpenDAS_4 = product.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_4 = product.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_4 = product.sendedDate;
							String station_tXMLRPCOpenDAS_4 = product.station;
							java.util.Map checkingMap = (java.util.Map) product.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
								if ("picking_in".equals(tab[i])) {
									vals.put("picking", checkingMap.get(tab[i]));
								}
								if ("picking_out".equals(tab[i])) {
									vals.put("picking", checkingMap.get(tab[i]));
								}
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_4 = null;
							String sendUrl_out_tXMLRPCOpenDAS_4 = null;
							String fromUrl_out_tXMLRPCOpenDAS_4 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_4 = null;
							String station_out_tXMLRPCOpenDAS_4 = null;
							Object attachement_out_tXMLRPCOpenDAS_4 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_4
										.println("tXMLRPCOpenDAS_4"
												+ " Connexion OpenERP_V5 ");
								consoleOut_tXMLRPCOpenDAS_4.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_4 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameOdoo,
										context.usernameOdoo, context.pwdOdoo,
										context.hostOdoo, context.portOdoo);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_4
										.println("tXMLRPCOpenDAS_4"
												+ " XMLRpc : "
												+ "stock.picking"
												+ " "
												+ "talend_get_product_by_picking");
								consoleOut_tXMLRPCOpenDAS_4.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_4 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_4
										.exec("stock.picking",
												"talend_get_product_by_picking",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_4 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_4 : "
													+ responsetXMLRPCOpenDAS_4);
									result.setCode(responsetXMLRPCOpenDAS_4
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_4
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_4
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_4
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("Integer".equals("Integer")) {
											if ("Integer".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("qty"));
											} else if ("Integer"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("qty"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("Integer".equals("String")) {
											if ("Integer".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("Integer"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("qty"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setQtyMax((Integer) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("Integer".equals("Integer")) {
											if ("Integer".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("qty"));
											} else if ("Integer"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("qty"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("Integer".equals("String")) {
											if ("Integer".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("Integer"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("qty"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setQtyMin((Integer) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_4 = {
									title_tXMLRPCOpenDAS_4,
									sendUrl_tXMLRPCOpenDAS_4,
									fromUrl_tXMLRPCOpenDAS_4,
									sendedDate_tXMLRPCOpenDAS_4,
									product.attachement,
									station_tXMLRPCOpenDAS_4,
									title_out_tXMLRPCOpenDAS_4,
									sendUrl_out_tXMLRPCOpenDAS_4,
									fromUrl_out_tXMLRPCOpenDAS_4,
									sendedDate_out_tXMLRPCOpenDAS_4, result,
									station_out_tXMLRPCOpenDAS_4 };

							for (int i_tXMLRPCOpenDAS_4 = 0; i_tXMLRPCOpenDAS_4 < results_tXMLRPCOpenDAS_4.length; i_tXMLRPCOpenDAS_4++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[0] != null) {
									row4.title = (String) results_tXMLRPCOpenDAS_4[0];

								} else {
									row4.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[1] != null) {
									row4.sendUrl = (String) results_tXMLRPCOpenDAS_4[1];

								} else {
									row4.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[2] != null) {
									row4.fromUrl = (String) results_tXMLRPCOpenDAS_4[2];

								} else {
									row4.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[3] != null) {
									row4.sendedDate = (Date) results_tXMLRPCOpenDAS_4[3];

								} else {
									row4.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[4] != null) {
									row4.attachement = (Object) results_tXMLRPCOpenDAS_4[4];

								} else {
									row4.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[5] != null) {
									row4.station = (String) results_tXMLRPCOpenDAS_4[5];

								} else {
									row4.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[6] != null) {
									row4.title_out = (String) results_tXMLRPCOpenDAS_4[6];

								} else {
									row4.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[7] != null) {
									row4.send_out = (String) results_tXMLRPCOpenDAS_4[7];

								} else {
									row4.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[8] != null) {
									row4.from_out = (String) results_tXMLRPCOpenDAS_4[8];

								} else {
									row4.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[9] != null) {
									row4.sendedDate_out = (Date) results_tXMLRPCOpenDAS_4[9];

								} else {
									row4.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[10] != null) {
									row4.attachement_out = (Object) results_tXMLRPCOpenDAS_4[10];

								} else {
									row4.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[11] != null) {
									row4.station_out = (String) results_tXMLRPCOpenDAS_4[11];

								} else {
									row4.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_4++;

							/**
							 * [tXMLRPCOpenDAS_4 main ] stop
							 */
							// Start of branch "row4"
							if (row4 != null) {

								/**
								 * [tMomObjectOutput_3 main ] start
								 */

								currentComponent = "tMomObjectOutput_3";

								// row4
								// row4

								if (execStat) {
									runStat.updateStatOnConnection("row4"
											+ iterateId, 1, 1);
								}

								System.out.println("attachement :"
										+ row4.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row4.title);
								previousRequest.setSendUrl(row4.sendUrl);
								previousRequest.setFromUrl(row4.fromUrl);
								previousRequest.setSendedDate(row4.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row4.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row4.title_out);
								response.setSendedDate(row4.sendedDate_out);
								response.setAttachement((java.io.Serializable) row4.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_3 = session_tMomObjectOutput_3
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_3.setObject(response);
								message_tMomObjectOutput_3.setStringProperty(
										"Sujet", row4.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_3 = session_tMomObjectOutput_3
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_3 = session_tMomObjectOutput_3
										.createProducer(des_tMomObjectOutput_3);
								producer_tMomObjectOutput_3
										.send(message_tMomObjectOutput_3);

								tos_count_tMomObjectOutput_3++;

								/**
								 * [tMomObjectOutput_3 main ] stop
								 */

							} // End of branch "row4"

						} // End of branch "product"

						// Start of branch "production_pdf"
						if (production_pdf != null) {

							/**
							 * [tXMLRPCOpenDAS_8 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_8";

							// production_pdf
							// production_pdf

							if (execStat) {
								runStat.updateStatOnConnection("production_pdf"
										+ iterateId, 1, 1);
							}

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_8 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_8 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_8 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_8);
							}

							consoleOut_tXMLRPCOpenDAS_8
									.println("tXMLRPCOpenDAS_8"
											+ " received parameters : "
											+ production_pdf.toString());
							consoleOut_tXMLRPCOpenDAS_8.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_8 = production_pdf.title;
							String sendUrl_tXMLRPCOpenDAS_8 = production_pdf.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_8 = production_pdf.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_8 = production_pdf.sendedDate;
							String station_tXMLRPCOpenDAS_8 = production_pdf.station;
							java.util.Map checkingMap = (java.util.Map) production_pdf.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
								if ("production".equals(tab[i])) {
									vals.put("production_id",
											checkingMap.get(tab[i]));
								}
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_8 = null;
							String sendUrl_out_tXMLRPCOpenDAS_8 = null;
							String fromUrl_out_tXMLRPCOpenDAS_8 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_8 = null;
							String station_out_tXMLRPCOpenDAS_8 = null;
							Object attachement_out_tXMLRPCOpenDAS_8 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_8
										.println("tXMLRPCOpenDAS_8"
												+ " Connexion OpenERP_V5 ");
								consoleOut_tXMLRPCOpenDAS_8.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_8 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameOdoo,
										context.usernameOdoo, context.pwdOdoo,
										context.hostOdoo, context.portOdoo);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_8
										.println("tXMLRPCOpenDAS_8"
												+ " XMLRpc : "
												+ "mrp.production"
												+ " "
												+ "talend_get_report_production");
								consoleOut_tXMLRPCOpenDAS_8.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_8 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_8
										.exec("mrp.production",
												"talend_get_report_production",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_8 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_8 : "
													+ responsetXMLRPCOpenDAS_8);
									result.setCode(responsetXMLRPCOpenDAS_8
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_8
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_8
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_8
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_8 = {
									title_tXMLRPCOpenDAS_8,
									sendUrl_tXMLRPCOpenDAS_8,
									fromUrl_tXMLRPCOpenDAS_8,
									sendedDate_tXMLRPCOpenDAS_8,
									production_pdf.attachement,
									station_tXMLRPCOpenDAS_8,
									title_out_tXMLRPCOpenDAS_8,
									sendUrl_out_tXMLRPCOpenDAS_8,
									fromUrl_out_tXMLRPCOpenDAS_8,
									sendedDate_out_tXMLRPCOpenDAS_8, result,
									station_out_tXMLRPCOpenDAS_8 };

							for (int i_tXMLRPCOpenDAS_8 = 0; i_tXMLRPCOpenDAS_8 < results_tXMLRPCOpenDAS_8.length; i_tXMLRPCOpenDAS_8++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[0] != null) {
									row9.title = (String) results_tXMLRPCOpenDAS_8[0];

								} else {
									row9.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[1] != null) {
									row9.sendUrl = (String) results_tXMLRPCOpenDAS_8[1];

								} else {
									row9.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[2] != null) {
									row9.fromUrl = (String) results_tXMLRPCOpenDAS_8[2];

								} else {
									row9.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[3] != null) {
									row9.sendedDate = (Date) results_tXMLRPCOpenDAS_8[3];

								} else {
									row9.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[4] != null) {
									row9.attachement = (Object) results_tXMLRPCOpenDAS_8[4];

								} else {
									row9.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[5] != null) {
									row9.station = (String) results_tXMLRPCOpenDAS_8[5];

								} else {
									row9.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[6] != null) {
									row9.title_out = (String) results_tXMLRPCOpenDAS_8[6];

								} else {
									row9.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[7] != null) {
									row9.send_out = (String) results_tXMLRPCOpenDAS_8[7];

								} else {
									row9.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[8] != null) {
									row9.from_out = (String) results_tXMLRPCOpenDAS_8[8];

								} else {
									row9.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[9] != null) {
									row9.sendedDate_out = (Date) results_tXMLRPCOpenDAS_8[9];

								} else {
									row9.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[10] != null) {
									row9.attachement_out = (Object) results_tXMLRPCOpenDAS_8[10];

								} else {
									row9.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[11] != null) {
									row9.station_out = (String) results_tXMLRPCOpenDAS_8[11];

								} else {
									row9.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_8++;

							/**
							 * [tXMLRPCOpenDAS_8 main ] stop
							 */
							// Start of branch "row9"
							if (row9 != null) {

								/**
								 * [tMomObjectOutput_7 main ] start
								 */

								currentComponent = "tMomObjectOutput_7";

								// row9
								// row9

								if (execStat) {
									runStat.updateStatOnConnection("row9"
											+ iterateId, 1, 1);
								}

								System.out.println("attachement :"
										+ row9.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row9.title);
								previousRequest.setSendUrl(row9.sendUrl);
								previousRequest.setFromUrl(row9.fromUrl);
								previousRequest.setSendedDate(row9.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row9.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row9.title_out);
								response.setSendedDate(row9.sendedDate_out);
								response.setAttachement((java.io.Serializable) row9.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_7 = session_tMomObjectOutput_7
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_7.setObject(response);
								message_tMomObjectOutput_7.setStringProperty(
										"Sujet", row9.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_7 = session_tMomObjectOutput_7
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_7 = session_tMomObjectOutput_7
										.createProducer(des_tMomObjectOutput_7);
								producer_tMomObjectOutput_7
										.send(message_tMomObjectOutput_7);

								tos_count_tMomObjectOutput_7++;

								/**
								 * [tMomObjectOutput_7 main ] stop
								 */

							} // End of branch "row9"

						} // End of branch "production_pdf"

						// Start of branch "production"
						if (production != null) {

							/**
							 * [tXMLRPCOpenDAS_7 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_7";

							// production
							// production

							if (execStat) {
								runStat.updateStatOnConnection("production"
										+ iterateId, 1, 1);
							}

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_7 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_7 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_7 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_7);
							}

							consoleOut_tXMLRPCOpenDAS_7
									.println("tXMLRPCOpenDAS_7"
											+ " received parameters : "
											+ production.toString());
							consoleOut_tXMLRPCOpenDAS_7.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_7 = production.title;
							String sendUrl_tXMLRPCOpenDAS_7 = production.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_7 = production.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_7 = production.sendedDate;
							String station_tXMLRPCOpenDAS_7 = production.station;
							java.util.Map checkingMap = (java.util.Map) production.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_7 = null;
							String sendUrl_out_tXMLRPCOpenDAS_7 = null;
							String fromUrl_out_tXMLRPCOpenDAS_7 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_7 = null;
							String station_out_tXMLRPCOpenDAS_7 = null;
							Object attachement_out_tXMLRPCOpenDAS_7 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_7
										.println("tXMLRPCOpenDAS_7"
												+ " Connexion OpenERP_V5 ");
								consoleOut_tXMLRPCOpenDAS_7.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_7 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameOdoo,
										context.usernameOdoo, context.pwdOdoo,
										context.hostOdoo, context.portOdoo);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_7
										.println("tXMLRPCOpenDAS_7"
												+ " XMLRpc : "
												+ "mrp.production" + " "
												+ "talend_get_production");
								consoleOut_tXMLRPCOpenDAS_7.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_7 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_7
										.exec("mrp.production",
												"talend_get_production", vals,
												context_search);
								if (responsetXMLRPCOpenDAS_7 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_7 : "
													+ responsetXMLRPCOpenDAS_7);
									result.setCode(responsetXMLRPCOpenDAS_7
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_7
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_7
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_7
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_7 = {
									title_tXMLRPCOpenDAS_7,
									sendUrl_tXMLRPCOpenDAS_7,
									fromUrl_tXMLRPCOpenDAS_7,
									sendedDate_tXMLRPCOpenDAS_7,
									production.attachement,
									station_tXMLRPCOpenDAS_7,
									title_out_tXMLRPCOpenDAS_7,
									sendUrl_out_tXMLRPCOpenDAS_7,
									fromUrl_out_tXMLRPCOpenDAS_7,
									sendedDate_out_tXMLRPCOpenDAS_7, result,
									station_out_tXMLRPCOpenDAS_7 };

							for (int i_tXMLRPCOpenDAS_7 = 0; i_tXMLRPCOpenDAS_7 < results_tXMLRPCOpenDAS_7.length; i_tXMLRPCOpenDAS_7++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[0] != null) {
									row8.title = (String) results_tXMLRPCOpenDAS_7[0];

								} else {
									row8.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[1] != null) {
									row8.sendUrl = (String) results_tXMLRPCOpenDAS_7[1];

								} else {
									row8.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[2] != null) {
									row8.fromUrl = (String) results_tXMLRPCOpenDAS_7[2];

								} else {
									row8.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[3] != null) {
									row8.sendedDate = (Date) results_tXMLRPCOpenDAS_7[3];

								} else {
									row8.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[4] != null) {
									row8.attachement = (Object) results_tXMLRPCOpenDAS_7[4];

								} else {
									row8.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[5] != null) {
									row8.station = (String) results_tXMLRPCOpenDAS_7[5];

								} else {
									row8.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[6] != null) {
									row8.title_out = (String) results_tXMLRPCOpenDAS_7[6];

								} else {
									row8.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[7] != null) {
									row8.send_out = (String) results_tXMLRPCOpenDAS_7[7];

								} else {
									row8.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[8] != null) {
									row8.from_out = (String) results_tXMLRPCOpenDAS_7[8];

								} else {
									row8.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[9] != null) {
									row8.sendedDate_out = (Date) results_tXMLRPCOpenDAS_7[9];

								} else {
									row8.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[10] != null) {
									row8.attachement_out = (Object) results_tXMLRPCOpenDAS_7[10];

								} else {
									row8.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[11] != null) {
									row8.station_out = (String) results_tXMLRPCOpenDAS_7[11];

								} else {
									row8.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_7++;

							/**
							 * [tXMLRPCOpenDAS_7 main ] stop
							 */
							// Start of branch "row8"
							if (row8 != null) {

								/**
								 * [tMomObjectOutput_6 main ] start
								 */

								currentComponent = "tMomObjectOutput_6";

								// row8
								// row8

								if (execStat) {
									runStat.updateStatOnConnection("row8"
											+ iterateId, 1, 1);
								}

								System.out.println("attachement :"
										+ row8.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row8.title);
								previousRequest.setSendUrl(row8.sendUrl);
								previousRequest.setFromUrl(row8.fromUrl);
								previousRequest.setSendedDate(row8.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row8.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row8.title_out);
								response.setSendedDate(row8.sendedDate_out);
								response.setAttachement((java.io.Serializable) row8.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_6 = session_tMomObjectOutput_6
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_6.setObject(response);
								message_tMomObjectOutput_6.setStringProperty(
										"Sujet", row8.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_6 = session_tMomObjectOutput_6
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_6 = session_tMomObjectOutput_6
										.createProducer(des_tMomObjectOutput_6);
								producer_tMomObjectOutput_6
										.send(message_tMomObjectOutput_6);

								tos_count_tMomObjectOutput_6++;

								/**
								 * [tMomObjectOutput_6 main ] stop
								 */

							} // End of branch "row8"

						} // End of branch "production"

					} // End of branch "getWsGenericsExt"

					/**
					 * [tMomObjectInput_2 end ] start
					 */

					currentComponent = "tMomObjectInput_2";

				}
				System.out.println("Closing connection");
				consumer_tMomObjectInput_2.close();
				session_tMomObjectInput_2.close();
				connection_tMomObjectInput_2.close();

				ok_Hash.put("tMomObjectInput_2", true);
				end_Hash.put("tMomObjectInput_2", System.currentTimeMillis());

				/**
				 * [tMomObjectInput_2 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tMap_179 end ] start
				 */

				currentComponent = "tMap_179";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("getWsGenericsExt"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_179", true);
				end_Hash.put("tMap_179", System.currentTimeMillis());

				/**
				 * [tMap_179 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_1 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("groups" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tXMLRPCOpenDAS_1", true);
				end_Hash.put("tXMLRPCOpenDAS_1", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_1 end ] stop
				 */

				/**
				 * [tMomObjectOutput_1 end ] start
				 */

				currentComponent = "tMomObjectOutput_1";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_1.close();
				session_tMomObjectOutput_1.close();
				connection_tMomObjectOutput_1.close();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMomObjectOutput_1", true);
				end_Hash.put("tMomObjectOutput_1", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_1 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_5 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection(
								"picking_in" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tXMLRPCOpenDAS_5", true);
				end_Hash.put("tXMLRPCOpenDAS_5", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_5 end ] stop
				 */

				/**
				 * [tMomObjectOutput_4 end ] start
				 */

				currentComponent = "tMomObjectOutput_4";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_4.close();
				session_tMomObjectOutput_4.close();
				connection_tMomObjectOutput_4.close();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMomObjectOutput_4", true);
				end_Hash.put("tMomObjectOutput_4", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_4 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_6 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("picking_out"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tXMLRPCOpenDAS_6", true);
				end_Hash.put("tXMLRPCOpenDAS_6", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_6 end ] stop
				 */

				/**
				 * [tMomObjectOutput_5 end ] start
				 */

				currentComponent = "tMomObjectOutput_5";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_5.close();
				session_tMomObjectOutput_5.close();
				connection_tMomObjectOutput_5.close();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMomObjectOutput_5", true);
				end_Hash.put("tMomObjectOutput_5", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_5 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_3 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("employee" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tXMLRPCOpenDAS_3", true);
				end_Hash.put("tXMLRPCOpenDAS_3", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_3 end ] stop
				 */

				/**
				 * [tMomObjectOutput_2 end ] start
				 */

				currentComponent = "tMomObjectOutput_2";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_2.close();
				session_tMomObjectOutput_2.close();
				connection_tMomObjectOutput_2.close();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMomObjectOutput_2", true);
				end_Hash.put("tMomObjectOutput_2", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_2 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_4 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("product" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tXMLRPCOpenDAS_4", true);
				end_Hash.put("tXMLRPCOpenDAS_4", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_4 end ] stop
				 */

				/**
				 * [tMomObjectOutput_3 end ] start
				 */

				currentComponent = "tMomObjectOutput_3";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_3.close();
				session_tMomObjectOutput_3.close();
				connection_tMomObjectOutput_3.close();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMomObjectOutput_3", true);
				end_Hash.put("tMomObjectOutput_3", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_3 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_8 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("production_pdf"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tXMLRPCOpenDAS_8", true);
				end_Hash.put("tXMLRPCOpenDAS_8", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_8 end ] stop
				 */

				/**
				 * [tMomObjectOutput_7 end ] start
				 */

				currentComponent = "tMomObjectOutput_7";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_7.close();
				session_tMomObjectOutput_7.close();
				connection_tMomObjectOutput_7.close();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMomObjectOutput_7", true);
				end_Hash.put("tMomObjectOutput_7", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_7 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_7 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection(
								"production" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tXMLRPCOpenDAS_7", true);
				end_Hash.put("tXMLRPCOpenDAS_7", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_7 end ] stop
				 */

				/**
				 * [tMomObjectOutput_6 end ] start
				 */

				currentComponent = "tMomObjectOutput_6";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_6.close();
				session_tMomObjectOutput_6.close();
				connection_tMomObjectOutput_6.close();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMomObjectOutput_6", true);
				end_Hash.put("tMomObjectOutput_6", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMomObjectInput_2 finally ] start
				 */

				currentComponent = "tMomObjectInput_2";

				/**
				 * [tMomObjectInput_2 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tMap_179 finally ] start
				 */

				currentComponent = "tMap_179";

				/**
				 * [tMap_179 finally ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_1 finally ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_1";

				/**
				 * [tXMLRPCOpenDAS_1 finally ] stop
				 */

				/**
				 * [tMomObjectOutput_1 finally ] start
				 */

				currentComponent = "tMomObjectOutput_1";

				/**
				 * [tMomObjectOutput_1 finally ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_5 finally ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_5";

				/**
				 * [tXMLRPCOpenDAS_5 finally ] stop
				 */

				/**
				 * [tMomObjectOutput_4 finally ] start
				 */

				currentComponent = "tMomObjectOutput_4";

				/**
				 * [tMomObjectOutput_4 finally ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_6 finally ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_6";

				/**
				 * [tXMLRPCOpenDAS_6 finally ] stop
				 */

				/**
				 * [tMomObjectOutput_5 finally ] start
				 */

				currentComponent = "tMomObjectOutput_5";

				/**
				 * [tMomObjectOutput_5 finally ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_3 finally ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_3";

				/**
				 * [tXMLRPCOpenDAS_3 finally ] stop
				 */

				/**
				 * [tMomObjectOutput_2 finally ] start
				 */

				currentComponent = "tMomObjectOutput_2";

				/**
				 * [tMomObjectOutput_2 finally ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_4 finally ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_4";

				/**
				 * [tXMLRPCOpenDAS_4 finally ] stop
				 */

				/**
				 * [tMomObjectOutput_3 finally ] start
				 */

				currentComponent = "tMomObjectOutput_3";

				/**
				 * [tMomObjectOutput_3 finally ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_8 finally ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_8";

				/**
				 * [tXMLRPCOpenDAS_8 finally ] stop
				 */

				/**
				 * [tMomObjectOutput_7 finally ] start
				 */

				currentComponent = "tMomObjectOutput_7";

				/**
				 * [tMomObjectOutput_7 finally ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_7 finally ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_7";

				/**
				 * [tXMLRPCOpenDAS_7 finally ] stop
				 */

				/**
				 * [tMomObjectOutput_6 finally ] start
				 */

				currentComponent = "tMomObjectOutput_6";

				/**
				 * [tMomObjectOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMomObjectInput_2_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				java.net.URLClassLoader sysloader_tLibraryLoad_1 = (java.net.URLClassLoader) ClassLoader
						.getSystemClassLoader();
				java.lang.reflect.Method method_tLibraryLoad_1 = java.net.URLClassLoader.class
						.getDeclaredMethod("addURL",
								new Class[] { java.net.URL.class });
				method_tLibraryLoad_1.setAccessible(true);

				String[] libPaths_tLibraryLoad_1 = new String[] {
						"opendas-server.jar", "activemq-all-5.5.0.jar",
						"slf4j-simple-1.5.4.jar", };
				for (String lib_tLibraryLoad_1 : libPaths_tLibraryLoad_1) {
					String separator_tLibraryLoad_1 = System
							.getProperty("path.separator");
					String[] jarFiles_tLibraryLoad_1 = lib_tLibraryLoad_1
							.split(separator_tLibraryLoad_1);
					for (String jarFile_tLibraryLoad_1 : jarFiles_tLibraryLoad_1) {
						method_tLibraryLoad_1.invoke(sysloader_tLibraryLoad_1,
								new Object[] { new java.io.File(
										jarFile_tLibraryLoad_1).toURL() });
					}
				}

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */
				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */
				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLibraryLoad_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tMomObjectOutput_SubjectList_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLibraryLoad_1 finally ] start
				 */

				currentComponent = "tLibraryLoad_1";

				/**
				 * [tLibraryLoad_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "OpenDAS";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final GET_DEMO GET_DEMOClass = new GET_DEMO();

		int exitCode = GET_DEMOClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = GET_DEMO.class.getClassLoader()
					.getResourceAsStream(
							"opendas/get_demo_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.addressActiveMQ = (String) context
					.getProperty("addressActiveMQ");
			context.host = (String) context.getProperty("host");
			context.port = (String) context.getProperty("port");
			context.pwd = (String) context.getProperty("pwd");
			context.receiverClientActiveMQ = (String) context
					.getProperty("receiverClientActiveMQ");
			context.receiverServerActiveMQ = (String) context
					.getProperty("receiverServerActiveMQ");
			context.senderActiveMQ = (String) context
					.getProperty("senderActiveMQ");
			context.username = (String) context.getProperty("username");
			context.dbnameOdoo = (String) context.getProperty("dbnameOdoo");
			context.hostOdoo = (String) context.getProperty("hostOdoo");
			context.portOdoo = (String) context.getProperty("portOdoo");
			context.pwdOdoo = (String) context.getProperty("pwdOdoo");
			context.usernameOdoo = (String) context.getProperty("usernameOdoo");
			context.station = (String) context.getProperty("station");
			context.portActiveMQ = (String) context.getProperty("portActiveMQ");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("addressActiveMQ")) {
				context.addressActiveMQ = (String) parentContextMap
						.get("addressActiveMQ");
			}
			if (parentContextMap.containsKey("host")) {
				context.host = (String) parentContextMap.get("host");
			}
			if (parentContextMap.containsKey("port")) {
				context.port = (String) parentContextMap.get("port");
			}
			if (parentContextMap.containsKey("pwd")) {
				context.pwd = (String) parentContextMap.get("pwd");
			}
			if (parentContextMap.containsKey("receiverClientActiveMQ")) {
				context.receiverClientActiveMQ = (String) parentContextMap
						.get("receiverClientActiveMQ");
			}
			if (parentContextMap.containsKey("receiverServerActiveMQ")) {
				context.receiverServerActiveMQ = (String) parentContextMap
						.get("receiverServerActiveMQ");
			}
			if (parentContextMap.containsKey("senderActiveMQ")) {
				context.senderActiveMQ = (String) parentContextMap
						.get("senderActiveMQ");
			}
			if (parentContextMap.containsKey("username")) {
				context.username = (String) parentContextMap.get("username");
			}
			if (parentContextMap.containsKey("dbnameOdoo")) {
				context.dbnameOdoo = (String) parentContextMap
						.get("dbnameOdoo");
			}
			if (parentContextMap.containsKey("hostOdoo")) {
				context.hostOdoo = (String) parentContextMap.get("hostOdoo");
			}
			if (parentContextMap.containsKey("portOdoo")) {
				context.portOdoo = (String) parentContextMap.get("portOdoo");
			}
			if (parentContextMap.containsKey("pwdOdoo")) {
				context.pwdOdoo = (String) parentContextMap.get("pwdOdoo");
			}
			if (parentContextMap.containsKey("usernameOdoo")) {
				context.usernameOdoo = (String) parentContextMap
						.get("usernameOdoo");
			}
			if (parentContextMap.containsKey("station")) {
				context.station = (String) parentContextMap.get("station");
			}
			if (parentContextMap.containsKey("portActiveMQ")) {
				context.portActiveMQ = (String) parentContextMap
						.get("portActiveMQ");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}
		try {
			errorCode = null;
			tLibraryLoad_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tLibraryLoad_1) {
			globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", -1);

			e_tLibraryLoad_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : GET_DEMO");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 292283 characters generated by Talend Open Studio for Data Integration on the
 * 2 mars 2015 15:44:57 CET
 ************************************************************************************************/
