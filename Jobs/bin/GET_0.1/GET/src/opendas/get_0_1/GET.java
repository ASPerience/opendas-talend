// ============================================================================
//
// Copyright (c) 2005-2010, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio
// / JobDesigner (CodeGenerator version 4.2.1.r60995)
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package opendas.get_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

/**
 * Job: GET Purpose: <br>
 * Description: <br>
 * 
 * @author halgandd@asperience.fr
 * @version 4.2.1.r60995
 * @status
 */
public class GET implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (adresseOpenERP != null) {

				this.setProperty("adresseOpenERP", adresseOpenERP.toString());

			}

			if (MAGdbname != null) {

				this.setProperty("MAGdbname", MAGdbname.toString());

			}

			if (MAGhost != null) {

				this.setProperty("MAGhost", MAGhost.toString());

			}

			if (MAGport != null) {

				this.setProperty("MAGport", MAGport.toString());

			}

			if (MAGpwd != null) {

				this.setProperty("MAGpwd", MAGpwd.toString());

			}

			if (MAGuid != null) {

				this.setProperty("MAGuid", MAGuid.toString());

			}

			if (MAGusername != null) {

				this.setProperty("MAGusername", MAGusername.toString());

			}

			if (adresseActiveMQ != null) {

				this.setProperty("adresseActiveMQ", adresseActiveMQ.toString());

			}

			if (dbname != null) {

				this.setProperty("dbname", dbname.toString());

			}

			if (dbnameASPerpgi != null) {

				this.setProperty("dbnameASPerpgi", dbnameASPerpgi.toString());

			}

			if (destinataireClientActiveMQ != null) {

				this.setProperty("destinataireClientActiveMQ",
						destinataireClientActiveMQ.toString());

			}

			if (destinataireServeurActiveMQ != null) {

				this.setProperty("destinataireServeurActiveMQ",
						destinataireServeurActiveMQ.toString());

			}

			if (expediteurActiveMQ != null) {

				this.setProperty("expediteurActiveMQ", expediteurActiveMQ
						.toString());

			}

			if (host != null) {

				this.setProperty("host", host.toString());

			}

			if (hostASPerpgi != null) {

				this.setProperty("hostASPerpgi", hostASPerpgi.toString());

			}

			if (port != null) {

				this.setProperty("port", port.toString());

			}

			if (portActiveMQ != null) {

				this.setProperty("portActiveMQ", portActiveMQ.toString());

			}

			if (portASPerpgi != null) {

				this.setProperty("portASPerpgi", portASPerpgi.toString());

			}

			if (pwd != null) {

				this.setProperty("pwd", pwd.toString());

			}

			if (pwdASPerpgi != null) {

				this.setProperty("pwdASPerpgi", pwdASPerpgi.toString());

			}

			if (station != null) {

				this.setProperty("station", station.toString());

			}

			if (uid != null) {

				this.setProperty("uid", uid.toString());

			}

			if (username != null) {

				this.setProperty("username", username.toString());

			}

			if (usernameASPerpgi != null) {

				this.setProperty("usernameASPerpgi", usernameASPerpgi
						.toString());

			}

		}

		public String adresseOpenERP;

		public String getAdresseOpenERP() {
			return this.adresseOpenERP;
		}

		public String MAGdbname;

		public String getMAGdbname() {
			return this.MAGdbname;
		}

		public String MAGhost;

		public String getMAGhost() {
			return this.MAGhost;
		}

		public String MAGport;

		public String getMAGport() {
			return this.MAGport;
		}

		public String MAGpwd;

		public String getMAGpwd() {
			return this.MAGpwd;
		}

		public String MAGuid;

		public String getMAGuid() {
			return this.MAGuid;
		}

		public String MAGusername;

		public String getMAGusername() {
			return this.MAGusername;
		}

		public String adresseActiveMQ;

		public String getAdresseActiveMQ() {
			return this.adresseActiveMQ;
		}

		public String dbname;

		public String getDbname() {
			return this.dbname;
		}

		public String dbnameASPerpgi;

		public String getDbnameASPerpgi() {
			return this.dbnameASPerpgi;
		}

		public String destinataireClientActiveMQ;

		public String getDestinataireClientActiveMQ() {
			return this.destinataireClientActiveMQ;
		}

		public String destinataireServeurActiveMQ;

		public String getDestinataireServeurActiveMQ() {
			return this.destinataireServeurActiveMQ;
		}

		public String expediteurActiveMQ;

		public String getExpediteurActiveMQ() {
			return this.expediteurActiveMQ;
		}

		public String host;

		public String getHost() {
			return this.host;
		}

		public String hostASPerpgi;

		public String getHostASPerpgi() {
			return this.hostASPerpgi;
		}

		public String port;

		public String getPort() {
			return this.port;
		}

		public String portActiveMQ;

		public String getPortActiveMQ() {
			return this.portActiveMQ;
		}

		public String portASPerpgi;

		public String getPortASPerpgi() {
			return this.portASPerpgi;
		}

		public String pwd;

		public String getPwd() {
			return this.pwd;
		}

		public String pwdASPerpgi;

		public String getPwdASPerpgi() {
			return this.pwdASPerpgi;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String uid;

		public String getUid() {
			return this.uid;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String usernameASPerpgi;

		public String getUsernameASPerpgi() {
			return this.usernameASPerpgi;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "GET";
	private final String projectName = "OPENDAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception = null;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {
		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					GET.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(GET.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tContextLoad_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tContextLoad_1", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tMomObjectOutput_SubjectList_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_SubjectList_1", System
				.currentTimeMillis());

		tMomObjectOutput_SubjectList_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tMomObjectInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectInput_1", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMap_179_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_179", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_16_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_16", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_82_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_82", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_4", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_64_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_64", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_3", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_9_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_9", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_6", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_19_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_19", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_8", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_20_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_20", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_9_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_9", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_30_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_30", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_10_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_10", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_7", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_1", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_6", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_11_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_11", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_15_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_15", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_12_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_12", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_16_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_16", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_13_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_13", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_11_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_11", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_14_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_14", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_12_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_12", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_15_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_15", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_13_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_13", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_17_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_17", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_14_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_14", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_7", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_18_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_18", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tMomObjectOutput_SubjectList_1_onSubJobError(
			Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tMomObjectInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String Column0;

		public String getColumn0() {
			return this.Column0;
		}

		public String Column1;

		public String getColumn1() {
			return this.Column1;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.Column0 = readString(dis);

					this.Column1 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Column0, dos);

				// String

				writeString(this.Column1, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Column0=" + Column0);
			sb.append(",Column1=" + Column1);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tContextLoad_1 begin ] start
				 */

				ok_Hash.put("tContextLoad_1", false);
				start_Hash.put("tContextLoad_1", System.currentTimeMillis());
				currentComponent = "tContextLoad_1";

				int tos_count_tContextLoad_1 = 0;
				java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_1 = 0;

				/**
				 * [tContextLoad_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System
						.currentTimeMillis());
				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {
					fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
							"/home/opendas/workspace/opendas/talend/config/GET.conf",
							"ISO-8859-15", ";", "\n", true, 0, 0, -1, -1, false);
					while (fid_tFileInputDelimited_1.nextRecord()) {
						row1 = null;
						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							row1.Column0 = fid_tFileInputDelimited_1.get(0);
							row1.Column1 = fid_tFileInputDelimited_1.get(1);

						} catch (Exception e) {
							whetherReject_tFileInputDelimited_1 = true;
							System.err.println(e.getMessage());
							row1 = null;
						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tContextLoad_1 main ] start
							 */

							currentComponent = "tContextLoad_1";

							// ////////////////////////
							String tmp_key_tContextLoad_1 = null;

							String key_tContextLoad_1 = null;
							if (row1.Column0 != null) {
								tmp_key_tContextLoad_1 = row1.Column0.trim();
								if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1
										.startsWith("!"))) {
									tmp_key_tContextLoad_1 = null;
								} else {
									row1.Column0 = tmp_key_tContextLoad_1;
								}
							}
							if (row1.Column0 != null) {

								key_tContextLoad_1 =

								row1.Column0;

							}

							String value_tContextLoad_1 = null;
							if (row1.Column1 != null) {

								value_tContextLoad_1 =

								row1.Column1;

							}

							if (tmp_key_tContextLoad_1 != null) {
								try {
									if (key_tContextLoad_1 != null
											&& "adresseOpenERP"
													.equals(key_tContextLoad_1)) {
										context.adresseOpenERP = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "MAGdbname"
													.equals(key_tContextLoad_1)) {
										context.MAGdbname = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "MAGhost"
													.equals(key_tContextLoad_1)) {
										context.MAGhost = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "MAGport"
													.equals(key_tContextLoad_1)) {
										context.MAGport = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "MAGpwd"
													.equals(key_tContextLoad_1)) {
										context.MAGpwd = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "MAGuid"
													.equals(key_tContextLoad_1)) {
										context.MAGuid = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "MAGusername"
													.equals(key_tContextLoad_1)) {
										context.MAGusername = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "adresseActiveMQ"
													.equals(key_tContextLoad_1)) {
										context.adresseActiveMQ = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "dbname"
													.equals(key_tContextLoad_1)) {
										context.dbname = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "dbnameASPerpgi"
													.equals(key_tContextLoad_1)) {
										context.dbnameASPerpgi = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "destinataireClientActiveMQ"
													.equals(key_tContextLoad_1)) {
										context.destinataireClientActiveMQ = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "destinataireServeurActiveMQ"
													.equals(key_tContextLoad_1)) {
										context.destinataireServeurActiveMQ = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "expediteurActiveMQ"
													.equals(key_tContextLoad_1)) {
										context.expediteurActiveMQ = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "host"
													.equals(key_tContextLoad_1)) {
										context.host = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "hostASPerpgi"
													.equals(key_tContextLoad_1)) {
										context.hostASPerpgi = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "port"
													.equals(key_tContextLoad_1)) {
										context.port = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "portActiveMQ"
													.equals(key_tContextLoad_1)) {
										context.portActiveMQ = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "portASPerpgi"
													.equals(key_tContextLoad_1)) {
										context.portASPerpgi = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "pwd".equals(key_tContextLoad_1)) {
										context.pwd = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "pwdASPerpgi"
													.equals(key_tContextLoad_1)) {
										context.pwdASPerpgi = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "station"
													.equals(key_tContextLoad_1)) {
										context.station = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "uid".equals(key_tContextLoad_1)) {
										context.uid = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "username"
													.equals(key_tContextLoad_1)) {
										context.username = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "usernameASPerpgi"
													.equals(key_tContextLoad_1)) {
										context.usernameASPerpgi = value_tContextLoad_1;
									}

									if (context.getProperty(key_tContextLoad_1) != null) {
										assignList_tContextLoad_1
												.add(key_tContextLoad_1);
									} else {
										newPropertyList_tContextLoad_1
												.add(key_tContextLoad_1);
									}
									context.setProperty(key_tContextLoad_1,
											value_tContextLoad_1);
								} catch (Exception e) {
									System.err.println("Set value for key: "
											+ key_tContextLoad_1
											+ " failed, error message: "
											+ e.getMessage());
								}
								nb_line_tContextLoad_1++;
							}
							// ////////////////////////

							tos_count_tContextLoad_1++;

							/**
							 * [tContextLoad_1 main ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("/home/opendas/workspace/opendas/talend/config/GET.conf") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System
						.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tContextLoad_1 end ] start
				 */

				currentComponent = "tContextLoad_1";

				java.util.Enumeration<?> enu_tContextLoad_1 = context
						.propertyNames();
				while (enu_tContextLoad_1.hasMoreElements()) {
					String key_tContextLoad_1 = (String) enu_tContextLoad_1
							.nextElement();
					if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
							&& !newPropertyList_tContextLoad_1
									.contains(key_tContextLoad_1)) {
						noAssignList_tContextLoad_1.add(key_tContextLoad_1);
					}
				}

				String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1
						.toString();
				String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1
						.substring(1,
								newPropertyStr_tContextLoad_1.length() - 1);

				String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1
						.toString();
				String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1
						.substring(1, noAssignStr_tContextLoad_1.length() - 1);

				globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT",
						newProperty_tContextLoad_1);
				globalMap.put("tContextLoad_1_KEY_NOT_LOADED",
						noAssign_tContextLoad_1);

				globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

				resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread
						.currentThread().getId()
						+ "", "", "", "", "", resumeUtil
						.convertToJsonText(context));

				ok_Hash.put("tContextLoad_1", true);
				end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				tMomObjectOutput_SubjectList_1Process(globalMap);

				/**
				 * [tContextLoad_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (Error error) {

			throw new Error(error);

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tMomObjectOutput_SubjectList_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMomObjectOutput_SubjectList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMomObjectOutput_SubjectList_1 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_SubjectList_1", false);
				start_Hash.put("tMomObjectOutput_SubjectList_1", System
						.currentTimeMillis());
				currentComponent = "tMomObjectOutput_SubjectList_1";

				int tos_count_tMomObjectOutput_SubjectList_1 = 0;

				java.util.Hashtable props_tMomObjectOutput_SubjectList_1 = new java.util.Hashtable();
				String url_tMomObjectOutput_SubjectList_1 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_SubjectList_1);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.destinataireServeurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_SubjectList_1 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_SubjectList_1);

				javax.jms.Connection connection_tMomObjectOutput_SubjectList_1 = factory_tMomObjectOutput_SubjectList_1
						.createConnection();
				connection_tMomObjectOutput_SubjectList_1.start();

				javax.jms.Session session_tMomObjectOutput_SubjectList_1 = connection_tMomObjectOutput_SubjectList_1
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_SubjectList_1;
				des_tMomObjectOutput_SubjectList_1 = session_tMomObjectOutput_SubjectList_1
						.createQueue(context.destinataireServeurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_SubjectList_1 = session_tMomObjectOutput_SubjectList_1
						.createProducer(des_tMomObjectOutput_SubjectList_1);

				producer_tMomObjectOutput_SubjectList_1
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_SubjectList_1 begin ] stop
				 */
				/**
				 * [tMomObjectOutput_SubjectList_1 main ] start
				 */

				currentComponent = "tMomObjectOutput_SubjectList_1";

				// On envoie le message qui demandera la liste des sujets à
				// suivre dans la file
				org.opendas.modele.ServerRequest serverRequest = new org.opendas.modele.ServerRequest();

				serverRequest.setTitle("getSubjectList");
				serverRequest.setSendUrl(context.destinataireServeurActiveMQ);
				serverRequest.setFromUrl(context.expediteurActiveMQ);

				javax.jms.ObjectMessage message_tMomObjectOutput_SubjectList_1 = session_tMomObjectOutput_SubjectList_1
						.createObjectMessage();// On crée l'ObjectMessage

				message_tMomObjectOutput_SubjectList_1.setObject(serverRequest);

				// propriétés
				message_tMomObjectOutput_SubjectList_1.setStringProperty(
						"Sujet", "getSubjectList");
				message_tMomObjectOutput_SubjectList_1.setStringProperty(
						"Station", context.station);

				System.out
						.println("tMomObjectOutput_SubjectList_1 Envoi de la demande de liste de sujets");// DEBUG
				producer_tMomObjectOutput_SubjectList_1
						.send(message_tMomObjectOutput_SubjectList_1);

				tos_count_tMomObjectOutput_SubjectList_1++;

				/**
				 * [tMomObjectOutput_SubjectList_1 main ] stop
				 */
				/**
				 * [tMomObjectOutput_SubjectList_1 end ] start
				 */

				currentComponent = "tMomObjectOutput_SubjectList_1";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_SubjectList_1.close();
				session_tMomObjectOutput_SubjectList_1.close();
				connection_tMomObjectOutput_SubjectList_1.close();

				ok_Hash.put("tMomObjectOutput_SubjectList_1", true);
				end_Hash.put("tMomObjectOutput_SubjectList_1", System
						.currentTimeMillis());

				tMomObjectInput_1Process(globalMap);

				/**
				 * [tMomObjectOutput_SubjectList_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (Error error) {

			throw new Error(error);

		}

		globalMap.put("tMomObjectOutput_SubjectList_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String sendUrl_out;

		public String getSendUrl_out() {
			return this.sendUrl_out;
		}

		public String fromUrl_out;

		public String getFromUrl_out() {
			return this.fromUrl_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.sendUrl_out = readString(dis);

					this.fromUrl_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.sendUrl_out, dos);

				// String

				writeString(this.fromUrl_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",sendUrl_out=" + sendUrl_out);
			sb.append(",fromUrl_out=" + fromUrl_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String sendUrl_out;

		public String getSendUrl_out() {
			return this.sendUrl_out;
		}

		public String fromUrl_out;

		public String getFromUrl_out() {
			return this.fromUrl_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.sendUrl_out = readString(dis);

					this.fromUrl_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.sendUrl_out, dos);

				// String

				writeString(this.fromUrl_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",sendUrl_out=" + sendUrl_out);
			sb.append(",fromUrl_out=" + fromUrl_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String sendUrl_out;

		public String getSendUrl_out() {
			return this.sendUrl_out;
		}

		public String fromUrl_out;

		public String getFromUrl_out() {
			return this.fromUrl_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.sendUrl_out = readString(dis);

					this.fromUrl_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.sendUrl_out, dos);

				// String

				writeString(this.fromUrl_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",sendUrl_out=" + sendUrl_out);
			sb.append(",fromUrl_out=" + fromUrl_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String sendUrl_out;

		public String getSendUrl_out() {
			return this.sendUrl_out;
		}

		public String fromUrl_out;

		public String getFromUrl_out() {
			return this.fromUrl_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.sendUrl_out = readString(dis);

					this.fromUrl_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.sendUrl_out, dos);

				// String

				writeString(this.fromUrl_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",sendUrl_out=" + sendUrl_out);
			sb.append(",fromUrl_out=" + fromUrl_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class mrp_production_product_lineStruct implements
			routines.system.IPersistableRow<mrp_production_product_lineStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String sendUrl_out;

		public String getSendUrl_out() {
			return this.sendUrl_out;
		}

		public String fromUrl_out;

		public String getFromUrl_out() {
			return this.fromUrl_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.sendUrl_out = readString(dis);

					this.fromUrl_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.sendUrl_out, dos);

				// String

				writeString(this.fromUrl_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",sendUrl_out=" + sendUrl_out);
			sb.append(",fromUrl_out=" + fromUrl_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mrp_production_product_lineStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class produits_magentoStruct implements
			routines.system.IPersistableRow<produits_magentoStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(produits_magentoStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class produits_asperpgiStruct implements
			routines.system.IPersistableRow<produits_asperpgiStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(produits_asperpgiStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class bl_magentoStruct implements
			routines.system.IPersistableRow<bl_magentoStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(bl_magentoStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class colis_asperpgiStruct implements
			routines.system.IPersistableRow<colis_asperpgiStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(colis_asperpgiStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class persoStruct implements
			routines.system.IPersistableRow<persoStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(persoStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class etiquettesStruct implements
			routines.system.IPersistableRow<etiquettesStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(etiquettesStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class groupsStruct implements
			routines.system.IPersistableRow<groupsStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(groupsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class persoinStruct implements
			routines.system.IPersistableRow<persoinStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(persoinStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class persooutStruct implements
			routines.system.IPersistableRow<persooutStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(persooutStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class bl_asperpgi_reportStruct implements
			routines.system.IPersistableRow<bl_asperpgi_reportStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(bl_asperpgi_reportStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class posteStruct implements
			routines.system.IPersistableRow<posteStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(posteStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class dossierStruct implements
			routines.system.IPersistableRow<dossierStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(dossierStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class mrp_productionStruct implements
			routines.system.IPersistableRow<mrp_productionStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mrp_productionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class bl_asperpgiStruct implements
			routines.system.IPersistableRow<bl_asperpgiStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String sendUrl_out;

		public String getSendUrl_out() {
			return this.sendUrl_out;
		}

		public String fromUrl_out;

		public String getFromUrl_out() {
			return this.fromUrl_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.sendUrl_out = readString(dis);

					this.fromUrl_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.sendUrl_out, dos);

				// String

				writeString(this.fromUrl_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",sendUrl_out=" + sendUrl_out);
			sb.append(",fromUrl_out=" + fromUrl_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(bl_asperpgiStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class getWsGenericsExtStruct implements
			routines.system.IPersistableRow<getWsGenericsExtStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(getWsGenericsExtStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMomObjectInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMomObjectInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();
				getWsGenericsExtStruct getWsGenericsExt = new getWsGenericsExtStruct();
				mrp_production_product_lineStruct mrp_production_product_line = new mrp_production_product_lineStruct();
				row3Struct row3 = new row3Struct();
				produits_magentoStruct produits_magento = new produits_magentoStruct();
				row17Struct row17 = new row17Struct();
				produits_asperpgiStruct produits_asperpgi = new produits_asperpgiStruct();
				row5Struct row5 = new row5Struct();
				bl_magentoStruct bl_magento = new bl_magentoStruct();
				row16Struct row16 = new row16Struct();
				colis_asperpgiStruct colis_asperpgi = new colis_asperpgiStruct();
				row7Struct row7 = new row7Struct();
				persoStruct perso = new persoStruct();
				row8Struct row8 = new row8Struct();
				etiquettesStruct etiquettes = new etiquettesStruct();
				row9Struct row9 = new row9Struct();
				groupsStruct groups = new groupsStruct();
				row2Struct row2 = new row2Struct();
				persoinStruct persoin = new persoinStruct();
				row4Struct row4 = new row4Struct();
				persooutStruct persoout = new persooutStruct();
				row10Struct row10 = new row10Struct();
				bl_asperpgi_reportStruct bl_asperpgi_report = new bl_asperpgi_reportStruct();
				row11Struct row11 = new row11Struct();
				posteStruct poste = new posteStruct();
				row12Struct row12 = new row12Struct();
				dossierStruct dossier = new dossierStruct();
				row13Struct row13 = new row13Struct();
				mrp_productionStruct mrp_production = new mrp_productionStruct();
				row14Struct row14 = new row14Struct();
				bl_asperpgiStruct bl_asperpgi = new bl_asperpgiStruct();
				row15Struct row15 = new row15Struct();

				/**
				 * [tMomObjectOutput_82 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_82", false);
				start_Hash.put("tMomObjectOutput_82", System
						.currentTimeMillis());
				currentComponent = "tMomObjectOutput_82";

				int tos_count_tMomObjectOutput_82 = 0;

				java.util.Hashtable props_tMomObjectOutput_82 = new java.util.Hashtable();
				String url_tMomObjectOutput_82 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_82);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_82 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_82);

				javax.jms.Connection connection_tMomObjectOutput_82 = factory_tMomObjectOutput_82
						.createConnection();
				connection_tMomObjectOutput_82.start();

				javax.jms.Session session_tMomObjectOutput_82 = connection_tMomObjectOutput_82
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_82;
				des_tMomObjectOutput_82 = session_tMomObjectOutput_82
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_82 = session_tMomObjectOutput_82
						.createProducer(des_tMomObjectOutput_82);

				producer_tMomObjectOutput_82
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_82 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_16 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_16", false);
				start_Hash.put("tXMLRPCOpenDAS_16", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_16";

				int tos_count_tXMLRPCOpenDAS_16 = 0;

				/**
				 * [tXMLRPCOpenDAS_16 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_64 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_64", false);
				start_Hash.put("tMomObjectOutput_64", System
						.currentTimeMillis());
				currentComponent = "tMomObjectOutput_64";

				int tos_count_tMomObjectOutput_64 = 0;

				java.util.Hashtable props_tMomObjectOutput_64 = new java.util.Hashtable();
				String url_tMomObjectOutput_64 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_64);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_64 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_64);

				javax.jms.Connection connection_tMomObjectOutput_64 = factory_tMomObjectOutput_64
						.createConnection();
				connection_tMomObjectOutput_64.start();

				javax.jms.Session session_tMomObjectOutput_64 = connection_tMomObjectOutput_64
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_64;
				des_tMomObjectOutput_64 = session_tMomObjectOutput_64
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_64 = session_tMomObjectOutput_64
						.createProducer(des_tMomObjectOutput_64);

				producer_tMomObjectOutput_64
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_64 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_4 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_4", false);
				start_Hash.put("tXMLRPCOpenDAS_4", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_4";

				int tos_count_tXMLRPCOpenDAS_4 = 0;

				/**
				 * [tXMLRPCOpenDAS_4 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_9 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_9", false);
				start_Hash
						.put("tMomObjectOutput_9", System.currentTimeMillis());
				currentComponent = "tMomObjectOutput_9";

				int tos_count_tMomObjectOutput_9 = 0;

				java.util.Hashtable props_tMomObjectOutput_9 = new java.util.Hashtable();
				String url_tMomObjectOutput_9 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_9);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_9 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_9);

				javax.jms.Connection connection_tMomObjectOutput_9 = factory_tMomObjectOutput_9
						.createConnection();
				connection_tMomObjectOutput_9.start();

				javax.jms.Session session_tMomObjectOutput_9 = connection_tMomObjectOutput_9
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_9;
				des_tMomObjectOutput_9 = session_tMomObjectOutput_9
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_9 = session_tMomObjectOutput_9
						.createProducer(des_tMomObjectOutput_9);

				producer_tMomObjectOutput_9
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_9 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_3 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_3", false);
				start_Hash.put("tXMLRPCOpenDAS_3", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_3";

				int tos_count_tXMLRPCOpenDAS_3 = 0;

				/**
				 * [tXMLRPCOpenDAS_3 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_19 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_19", false);
				start_Hash.put("tMomObjectOutput_19", System
						.currentTimeMillis());
				currentComponent = "tMomObjectOutput_19";

				int tos_count_tMomObjectOutput_19 = 0;

				java.util.Hashtable props_tMomObjectOutput_19 = new java.util.Hashtable();
				String url_tMomObjectOutput_19 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_19);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_19 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_19);

				javax.jms.Connection connection_tMomObjectOutput_19 = factory_tMomObjectOutput_19
						.createConnection();
				connection_tMomObjectOutput_19.start();

				javax.jms.Session session_tMomObjectOutput_19 = connection_tMomObjectOutput_19
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_19;
				des_tMomObjectOutput_19 = session_tMomObjectOutput_19
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_19 = session_tMomObjectOutput_19
						.createProducer(des_tMomObjectOutput_19);

				producer_tMomObjectOutput_19
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_19 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_6 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_6", false);
				start_Hash.put("tXMLRPCOpenDAS_6", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_6";

				int tos_count_tXMLRPCOpenDAS_6 = 0;

				/**
				 * [tXMLRPCOpenDAS_6 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_20 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_20", false);
				start_Hash.put("tMomObjectOutput_20", System
						.currentTimeMillis());
				currentComponent = "tMomObjectOutput_20";

				int tos_count_tMomObjectOutput_20 = 0;

				java.util.Hashtable props_tMomObjectOutput_20 = new java.util.Hashtable();
				String url_tMomObjectOutput_20 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_20);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_20 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_20);

				javax.jms.Connection connection_tMomObjectOutput_20 = factory_tMomObjectOutput_20
						.createConnection();
				connection_tMomObjectOutput_20.start();

				javax.jms.Session session_tMomObjectOutput_20 = connection_tMomObjectOutput_20
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_20;
				des_tMomObjectOutput_20 = session_tMomObjectOutput_20
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_20 = session_tMomObjectOutput_20
						.createProducer(des_tMomObjectOutput_20);

				producer_tMomObjectOutput_20
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_20 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_8 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_8", false);
				start_Hash.put("tXMLRPCOpenDAS_8", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_8";

				int tos_count_tXMLRPCOpenDAS_8 = 0;

				/**
				 * [tXMLRPCOpenDAS_8 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_30 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_30", false);
				start_Hash.put("tMomObjectOutput_30", System
						.currentTimeMillis());
				currentComponent = "tMomObjectOutput_30";

				int tos_count_tMomObjectOutput_30 = 0;

				java.util.Hashtable props_tMomObjectOutput_30 = new java.util.Hashtable();
				String url_tMomObjectOutput_30 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_30);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_30 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_30);

				javax.jms.Connection connection_tMomObjectOutput_30 = factory_tMomObjectOutput_30
						.createConnection();
				connection_tMomObjectOutput_30.start();

				javax.jms.Session session_tMomObjectOutput_30 = connection_tMomObjectOutput_30
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_30;
				des_tMomObjectOutput_30 = session_tMomObjectOutput_30
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_30 = session_tMomObjectOutput_30
						.createProducer(des_tMomObjectOutput_30);

				producer_tMomObjectOutput_30
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_30 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_9 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_9", false);
				start_Hash.put("tXMLRPCOpenDAS_9", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_9";

				int tos_count_tXMLRPCOpenDAS_9 = 0;

				/**
				 * [tXMLRPCOpenDAS_9 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_7 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_7", false);
				start_Hash
						.put("tMomObjectOutput_7", System.currentTimeMillis());
				currentComponent = "tMomObjectOutput_7";

				int tos_count_tMomObjectOutput_7 = 0;

				java.util.Hashtable props_tMomObjectOutput_7 = new java.util.Hashtable();
				String url_tMomObjectOutput_7 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_7);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_7 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_7);

				javax.jms.Connection connection_tMomObjectOutput_7 = factory_tMomObjectOutput_7
						.createConnection();
				connection_tMomObjectOutput_7.start();

				javax.jms.Session session_tMomObjectOutput_7 = connection_tMomObjectOutput_7
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_7;
				des_tMomObjectOutput_7 = session_tMomObjectOutput_7
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_7 = session_tMomObjectOutput_7
						.createProducer(des_tMomObjectOutput_7);

				producer_tMomObjectOutput_7
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_7 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_10 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_10", false);
				start_Hash.put("tXMLRPCOpenDAS_10", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_10";

				int tos_count_tXMLRPCOpenDAS_10 = 0;

				/**
				 * [tXMLRPCOpenDAS_10 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_6 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_6", false);
				start_Hash
						.put("tMomObjectOutput_6", System.currentTimeMillis());
				currentComponent = "tMomObjectOutput_6";

				int tos_count_tMomObjectOutput_6 = 0;

				java.util.Hashtable props_tMomObjectOutput_6 = new java.util.Hashtable();
				String url_tMomObjectOutput_6 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_6);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_6 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_6);

				javax.jms.Connection connection_tMomObjectOutput_6 = factory_tMomObjectOutput_6
						.createConnection();
				connection_tMomObjectOutput_6.start();

				javax.jms.Session session_tMomObjectOutput_6 = connection_tMomObjectOutput_6
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_6;
				des_tMomObjectOutput_6 = session_tMomObjectOutput_6
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_6 = session_tMomObjectOutput_6
						.createProducer(des_tMomObjectOutput_6);

				producer_tMomObjectOutput_6
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_6 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_1 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_1", false);
				start_Hash.put("tXMLRPCOpenDAS_1", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_1";

				int tos_count_tXMLRPCOpenDAS_1 = 0;

				/**
				 * [tXMLRPCOpenDAS_1 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_15 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_15", false);
				start_Hash.put("tMomObjectOutput_15", System
						.currentTimeMillis());
				currentComponent = "tMomObjectOutput_15";

				int tos_count_tMomObjectOutput_15 = 0;

				java.util.Hashtable props_tMomObjectOutput_15 = new java.util.Hashtable();
				String url_tMomObjectOutput_15 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_15);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_15 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_15);

				javax.jms.Connection connection_tMomObjectOutput_15 = factory_tMomObjectOutput_15
						.createConnection();
				connection_tMomObjectOutput_15.start();

				javax.jms.Session session_tMomObjectOutput_15 = connection_tMomObjectOutput_15
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_15;
				des_tMomObjectOutput_15 = session_tMomObjectOutput_15
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_15 = session_tMomObjectOutput_15
						.createProducer(des_tMomObjectOutput_15);

				producer_tMomObjectOutput_15
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_15 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_11 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_11", false);
				start_Hash.put("tXMLRPCOpenDAS_11", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_11";

				int tos_count_tXMLRPCOpenDAS_11 = 0;

				/**
				 * [tXMLRPCOpenDAS_11 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_16 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_16", false);
				start_Hash.put("tMomObjectOutput_16", System
						.currentTimeMillis());
				currentComponent = "tMomObjectOutput_16";

				int tos_count_tMomObjectOutput_16 = 0;

				java.util.Hashtable props_tMomObjectOutput_16 = new java.util.Hashtable();
				String url_tMomObjectOutput_16 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_16);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_16 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_16);

				javax.jms.Connection connection_tMomObjectOutput_16 = factory_tMomObjectOutput_16
						.createConnection();
				connection_tMomObjectOutput_16.start();

				javax.jms.Session session_tMomObjectOutput_16 = connection_tMomObjectOutput_16
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_16;
				des_tMomObjectOutput_16 = session_tMomObjectOutput_16
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_16 = session_tMomObjectOutput_16
						.createProducer(des_tMomObjectOutput_16);

				producer_tMomObjectOutput_16
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_16 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_12 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_12", false);
				start_Hash.put("tXMLRPCOpenDAS_12", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_12";

				int tos_count_tXMLRPCOpenDAS_12 = 0;

				/**
				 * [tXMLRPCOpenDAS_12 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_11 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_11", false);
				start_Hash.put("tMomObjectOutput_11", System
						.currentTimeMillis());
				currentComponent = "tMomObjectOutput_11";

				int tos_count_tMomObjectOutput_11 = 0;

				java.util.Hashtable props_tMomObjectOutput_11 = new java.util.Hashtable();
				String url_tMomObjectOutput_11 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_11);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_11 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_11);

				javax.jms.Connection connection_tMomObjectOutput_11 = factory_tMomObjectOutput_11
						.createConnection();
				connection_tMomObjectOutput_11.start();

				javax.jms.Session session_tMomObjectOutput_11 = connection_tMomObjectOutput_11
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_11;
				des_tMomObjectOutput_11 = session_tMomObjectOutput_11
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_11 = session_tMomObjectOutput_11
						.createProducer(des_tMomObjectOutput_11);

				producer_tMomObjectOutput_11
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_11 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_13 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_13", false);
				start_Hash.put("tXMLRPCOpenDAS_13", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_13";

				int tos_count_tXMLRPCOpenDAS_13 = 0;

				/**
				 * [tXMLRPCOpenDAS_13 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_12 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_12", false);
				start_Hash.put("tMomObjectOutput_12", System
						.currentTimeMillis());
				currentComponent = "tMomObjectOutput_12";

				int tos_count_tMomObjectOutput_12 = 0;

				java.util.Hashtable props_tMomObjectOutput_12 = new java.util.Hashtable();
				String url_tMomObjectOutput_12 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_12);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_12 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_12);

				javax.jms.Connection connection_tMomObjectOutput_12 = factory_tMomObjectOutput_12
						.createConnection();
				connection_tMomObjectOutput_12.start();

				javax.jms.Session session_tMomObjectOutput_12 = connection_tMomObjectOutput_12
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_12;
				des_tMomObjectOutput_12 = session_tMomObjectOutput_12
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_12 = session_tMomObjectOutput_12
						.createProducer(des_tMomObjectOutput_12);

				producer_tMomObjectOutput_12
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_12 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_14 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_14", false);
				start_Hash.put("tXMLRPCOpenDAS_14", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_14";

				int tos_count_tXMLRPCOpenDAS_14 = 0;

				/**
				 * [tXMLRPCOpenDAS_14 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_13 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_13", false);
				start_Hash.put("tMomObjectOutput_13", System
						.currentTimeMillis());
				currentComponent = "tMomObjectOutput_13";

				int tos_count_tMomObjectOutput_13 = 0;

				java.util.Hashtable props_tMomObjectOutput_13 = new java.util.Hashtable();
				String url_tMomObjectOutput_13 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_13);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_13 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_13);

				javax.jms.Connection connection_tMomObjectOutput_13 = factory_tMomObjectOutput_13
						.createConnection();
				connection_tMomObjectOutput_13.start();

				javax.jms.Session session_tMomObjectOutput_13 = connection_tMomObjectOutput_13
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_13;
				des_tMomObjectOutput_13 = session_tMomObjectOutput_13
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_13 = session_tMomObjectOutput_13
						.createProducer(des_tMomObjectOutput_13);

				producer_tMomObjectOutput_13
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_13 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_15 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_15", false);
				start_Hash.put("tXMLRPCOpenDAS_15", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_15";

				int tos_count_tXMLRPCOpenDAS_15 = 0;

				/**
				 * [tXMLRPCOpenDAS_15 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_14 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_14", false);
				start_Hash.put("tMomObjectOutput_14", System
						.currentTimeMillis());
				currentComponent = "tMomObjectOutput_14";

				int tos_count_tMomObjectOutput_14 = 0;

				java.util.Hashtable props_tMomObjectOutput_14 = new java.util.Hashtable();
				String url_tMomObjectOutput_14 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_14);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_14 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_14);

				javax.jms.Connection connection_tMomObjectOutput_14 = factory_tMomObjectOutput_14
						.createConnection();
				connection_tMomObjectOutput_14.start();

				javax.jms.Session session_tMomObjectOutput_14 = connection_tMomObjectOutput_14
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_14;
				des_tMomObjectOutput_14 = session_tMomObjectOutput_14
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_14 = session_tMomObjectOutput_14
						.createProducer(des_tMomObjectOutput_14);

				producer_tMomObjectOutput_14
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_14 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_17 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_17", false);
				start_Hash.put("tXMLRPCOpenDAS_17", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_17";

				int tos_count_tXMLRPCOpenDAS_17 = 0;

				/**
				 * [tXMLRPCOpenDAS_17 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_18 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_18", false);
				start_Hash.put("tMomObjectOutput_18", System
						.currentTimeMillis());
				currentComponent = "tMomObjectOutput_18";

				int tos_count_tMomObjectOutput_18 = 0;

				java.util.Hashtable props_tMomObjectOutput_18 = new java.util.Hashtable();
				String url_tMomObjectOutput_18 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_18);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_18 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_18);

				javax.jms.Connection connection_tMomObjectOutput_18 = factory_tMomObjectOutput_18
						.createConnection();
				connection_tMomObjectOutput_18.start();

				javax.jms.Session session_tMomObjectOutput_18 = connection_tMomObjectOutput_18
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_18;
				des_tMomObjectOutput_18 = session_tMomObjectOutput_18
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_18 = session_tMomObjectOutput_18
						.createProducer(des_tMomObjectOutput_18);

				producer_tMomObjectOutput_18
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_18 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_7 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_7", false);
				start_Hash.put("tXMLRPCOpenDAS_7", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_7";

				int tos_count_tXMLRPCOpenDAS_7 = 0;

				/**
				 * [tXMLRPCOpenDAS_7 begin ] stop
				 */

				/**
				 * [tMap_179 begin ] start
				 */

				ok_Hash.put("tMap_179", false);
				start_Hash.put("tMap_179", System.currentTimeMillis());
				currentComponent = "tMap_179";

				int tos_count_tMap_179 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				// ###############################

				// ###############################
				// # Outputs initialization
				mrp_production_product_lineStruct mrp_production_product_line_tmp = new mrp_production_product_lineStruct();
				produits_magentoStruct produits_magento_tmp = new produits_magentoStruct();
				produits_asperpgiStruct produits_asperpgi_tmp = new produits_asperpgiStruct();
				bl_magentoStruct bl_magento_tmp = new bl_magentoStruct();
				colis_asperpgiStruct colis_asperpgi_tmp = new colis_asperpgiStruct();
				persoStruct perso_tmp = new persoStruct();
				etiquettesStruct etiquettes_tmp = new etiquettesStruct();
				groupsStruct groups_tmp = new groupsStruct();
				persoinStruct persoin_tmp = new persoinStruct();
				persooutStruct persoout_tmp = new persooutStruct();
				bl_asperpgi_reportStruct bl_asperpgi_report_tmp = new bl_asperpgi_reportStruct();
				posteStruct poste_tmp = new posteStruct();
				dossierStruct dossier_tmp = new dossierStruct();
				mrp_productionStruct mrp_production_tmp = new mrp_productionStruct();
				bl_asperpgiStruct bl_asperpgi_tmp = new bl_asperpgiStruct();
				// ###############################

				/**
				 * [tMap_179 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());
				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				// ###############################

				// ###############################
				// # Outputs initialization
				getWsGenericsExtStruct getWsGenericsExt_tmp = new getWsGenericsExtStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tMomObjectInput_1 begin ] start
				 */

				ok_Hash.put("tMomObjectInput_1", false);
				start_Hash.put("tMomObjectInput_1", System.currentTimeMillis());
				currentComponent = "tMomObjectInput_1";

				int tos_count_tMomObjectInput_1 = 0;

				String url_tMomObjectInput_1 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				long timeout_tMomObjectInput_1 = 30;

				System.out.println("Connecting to URL: "
						+ url_tMomObjectInput_1);
				System.out.println("Consuming " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectInput_1 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectInput_1);

				javax.jms.Connection connection_tMomObjectInput_1 = factory_tMomObjectInput_1
						.createConnection();
				connection_tMomObjectInput_1.start();
				javax.jms.Session session_tMomObjectInput_1 = connection_tMomObjectInput_1
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);
				javax.jms.Destination des_tMomObjectInput_1 = null;

				des_tMomObjectInput_1 = session_tMomObjectInput_1
						.createQueue(context.expediteurActiveMQ);

				javax.jms.MessageProducer replyProducer_tMomObjectInput_1 = session_tMomObjectInput_1
						.createProducer(null);
				replyProducer_tMomObjectInput_1
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				javax.jms.MessageConsumer consumer_tMomObjectInput_1 = session_tMomObjectInput_1
						.createConsumer(des_tMomObjectInput_1, "Sujet = '"
								+ context.station + "'");
				System.out
						.println("tMomObjectInput_1 Attente de la liste de sujet Sujet = 'context.station'");

				javax.jms.Message message_tMomObjectInput_1;
				System.out
						.println("tMomObjectInput_1 Attente de la liste de sujets");

				// Réception de la liste de sujets à écouter

				java.util.List subjectList = null;
				// Boucle qui écoute jusqu'à ce qu'on ait retiré la liste du
				// message.
				while ((message_tMomObjectInput_1 = consumer_tMomObjectInput_1
						.receive()) != null) {

					javax.jms.ObjectMessage objMsg_tMomObjectInput_1 = (javax.jms.ObjectMessage) message_tMomObjectInput_1;
					Object object = objMsg_tMomObjectInput_1.getObject();
					if (object instanceof org.opendas.modele.ServerRequest) {
						org.opendas.modele.ServerRequest serverRequest = (org.opendas.modele.ServerRequest) object;
						subjectList = (java.util.List) serverRequest
								.getAttachement();
						System.out.println("tMomObjectInput_1 Liste reçue");
						break;
					}
				}

				// Création de la requête de sélection de sujets en fonction de
				// la liste reçue.
				StringBuilder strBuild = new StringBuilder();

				java.util.Iterator it = subjectList.iterator();
				while (it.hasNext()) {
					strBuild.append("Sujet = '");
					strBuild.append(it.next() + "'");
					if (it.hasNext())
						strBuild.append(" OR ");
				}

				// Création d'un autre MessageConsumer avec le bon
				// MessageSelector
				System.out
						.println("tMomObjectInput_1 Liste de sujets non utilisée");// DEBUG
				consumer_tMomObjectInput_1 = session_tMomObjectInput_1
						.createConsumer(des_tMomObjectInput_1, strBuild
								.toString());
				System.out.println("\ntMomObjectInput_1 message selector : "
						+ consumer_tMomObjectInput_1.getMessageSelector());

				System.out
						.println("We will consume messages while they continue to be delivered ");
				while ((message_tMomObjectInput_1 = consumer_tMomObjectInput_1
						.receive()) != null) {

					javax.jms.ObjectMessage objMsg_tMomObjectInput_1 = (javax.jms.ObjectMessage) message_tMomObjectInput_1;
					String msg_tMomObjectInput_1 = "";
					Object object = objMsg_tMomObjectInput_1.getObject();
					System.out.println("\ntMomObjectInput_1 Station : "
							+ objMsg_tMomObjectInput_1
									.getStringProperty("Station"));// DEBUG
					String station = objMsg_tMomObjectInput_1
							.getStringProperty("Station");
					// initialisation des champs récupérés dans le message
					String title = null;
					String sendUrl = null;
					String fromUrl = null;
					Date sendedDate = null;
					Object attachement = null;

					if (object instanceof org.opendas.modele.ServerRequest) {
						org.opendas.modele.ServerRequest serverRequest = (org.opendas.modele.ServerRequest) object;

						// champs qui serviront à créer l'object previousRequest
						// que l'on enverra avec la réponse
						title = serverRequest.getTitle();// on récupère le champ
															// "title"
						sendUrl = serverRequest.getSendUrl();// on récupère le
																// champ
																// "sendUrl"
						fromUrl = serverRequest.getFromUrl();// on récupère le
																// champ
																// "fromUrl"
						sendedDate = serverRequest.getSendedDate();// on
																	// récupère
																	// le champ
																	// "sendedDate"

						// champ contenant les paramètres de la requête XMLRPC à
						// effectuer
						attachement = serverRequest.getAttachement();

						System.out
								.println("tMomObjectInput_1 title : " + title);// DEBUG

					}

					// renseigner les champs des connexions de sortie (champs
					// pour previousRequest)
					row6.title = title;
					row6.sendUrl = sendUrl;
					row6.fromUrl = fromUrl;
					row6.sendedDate = sendedDate;
					// champ attachement fournissant les paramètres pour la
					// requête XMLRPC
					row6.attachement = attachement;
					// nom de l'expéditeur du message (la propriété "Sujet" de
					// la réponse prendra cette valeur)
					row6.station = station;

					/**
					 * [tMomObjectInput_1 begin ] stop
					 */
					/**
					 * [tMomObjectInput_1 main ] start
					 */

					currentComponent = "tMomObjectInput_1";

					tos_count_tMomObjectInput_1++;

					/**
					 * [tMomObjectInput_1 main ] stop
					 */

					/**
					 * [tMap_3 main ] start
					 */

					currentComponent = "tMap_3";

					boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_3 = false;
					boolean mainRowRejected_tMap_3 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables
						// ###############################
						// ###############################
						// # Output tables

						getWsGenericsExt = null;

						// # Output table : 'getWsGenericsExt'
						// # Filter conditions
						if (

						"getWsGenericsExt".equals(row6.title)

						) {
							getWsGenericsExt_tmp.title = row6.title;
							getWsGenericsExt_tmp.sendUrl = row6.sendUrl;
							getWsGenericsExt_tmp.fromUrl = row6.fromUrl;
							getWsGenericsExt_tmp.sendedDate = row6.sendedDate;
							getWsGenericsExt_tmp.attachement = row6.attachement;
							getWsGenericsExt_tmp.station = row6.station;
							getWsGenericsExt_tmp.title_out = row6.title_out;
							getWsGenericsExt_tmp.send_out = row6.send_out;
							getWsGenericsExt_tmp.from_out = row6.from_out;
							getWsGenericsExt_tmp.sendedDate_out = row6.sendedDate_out;
							getWsGenericsExt_tmp.attachement_out = row6.attachement_out;
							getWsGenericsExt_tmp.station_out = row6.station_out;
							getWsGenericsExt = getWsGenericsExt_tmp;
						} // closing filter/reject
							// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_3 = false;

					tos_count_tMap_3++;

					/**
					 * [tMap_3 main ] stop
					 */
					// Start of branch "getWsGenericsExt"
					if (getWsGenericsExt != null) {

						/**
						 * [tMap_179 main ] start
						 */

						currentComponent = "tMap_179";

						boolean hasCasePrimitiveKeyWithNull_tMap_179 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_179 = false;
						boolean mainRowRejected_tMap_179 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables
							// ###############################
							// ###############################
							// # Output tables

							mrp_production_product_line = null;
							produits_magento = null;
							produits_asperpgi = null;
							bl_magento = null;
							colis_asperpgi = null;
							perso = null;
							etiquettes = null;
							groups = null;
							persoin = null;
							persoout = null;
							bl_asperpgi_report = null;
							poste = null;
							dossier = null;
							mrp_production = null;
							bl_asperpgi = null;

							// # Output table : 'mrp_production_product_line'
							// # Filter conditions
							if (

							"mrp_production_product_line"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								mrp_production_product_line_tmp.title = getWsGenericsExt.title;
								mrp_production_product_line_tmp.sendUrl = getWsGenericsExt.sendUrl;
								mrp_production_product_line_tmp.fromUrl = getWsGenericsExt.fromUrl;
								mrp_production_product_line_tmp.sendedDate = getWsGenericsExt.sendedDate;
								mrp_production_product_line_tmp.attachement = getWsGenericsExt.attachement;
								mrp_production_product_line_tmp.station = getWsGenericsExt.station;
								mrp_production_product_line_tmp.title_out = getWsGenericsExt.title_out;
								mrp_production_product_line_tmp.sendUrl_out = null;
								mrp_production_product_line_tmp.fromUrl_out = null;
								mrp_production_product_line_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								mrp_production_product_line_tmp.attachement_out = getWsGenericsExt.attachement_out;
								mrp_production_product_line_tmp.station_out = getWsGenericsExt.station_out;
								mrp_production_product_line = mrp_production_product_line_tmp;
							} // closing filter/reject

							// # Output table : 'produits_magento'
							// # Filter conditions
							if (

							"produits_magento"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								produits_magento_tmp.title = getWsGenericsExt.title;
								produits_magento_tmp.sendUrl = getWsGenericsExt.sendUrl;
								produits_magento_tmp.fromUrl = getWsGenericsExt.fromUrl;
								produits_magento_tmp.sendedDate = getWsGenericsExt.sendedDate;
								produits_magento_tmp.attachement = getWsGenericsExt.attachement;
								produits_magento_tmp.station = getWsGenericsExt.station;
								produits_magento_tmp.title_out = getWsGenericsExt.title_out;
								produits_magento_tmp.send_out = getWsGenericsExt.send_out;
								produits_magento_tmp.from_out = getWsGenericsExt.from_out;
								produits_magento_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								produits_magento_tmp.attachement_out = getWsGenericsExt.attachement_out;
								produits_magento_tmp.station_out = getWsGenericsExt.station_out;
								produits_magento = produits_magento_tmp;
							} // closing filter/reject

							// # Output table : 'produits_asperpgi'
							// # Filter conditions
							if (

							"produits_asperpgi"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								produits_asperpgi_tmp.title = getWsGenericsExt.title;
								produits_asperpgi_tmp.sendUrl = getWsGenericsExt.sendUrl;
								produits_asperpgi_tmp.fromUrl = getWsGenericsExt.fromUrl;
								produits_asperpgi_tmp.sendedDate = getWsGenericsExt.sendedDate;
								produits_asperpgi_tmp.attachement = getWsGenericsExt.attachement;
								produits_asperpgi_tmp.station = getWsGenericsExt.station;
								produits_asperpgi_tmp.title_out = getWsGenericsExt.title_out;
								produits_asperpgi_tmp.send_out = getWsGenericsExt.send_out;
								produits_asperpgi_tmp.from_out = getWsGenericsExt.from_out;
								produits_asperpgi_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								produits_asperpgi_tmp.attachement_out = getWsGenericsExt.attachement_out;
								produits_asperpgi_tmp.station_out = getWsGenericsExt.station_out;
								produits_asperpgi = produits_asperpgi_tmp;
							} // closing filter/reject

							// # Output table : 'bl_magento'
							// # Filter conditions
							if (

							"bl_magento"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								bl_magento_tmp.title = getWsGenericsExt.title;
								bl_magento_tmp.sendUrl = getWsGenericsExt.sendUrl;
								bl_magento_tmp.fromUrl = getWsGenericsExt.fromUrl;
								bl_magento_tmp.sendedDate = getWsGenericsExt.sendedDate;
								bl_magento_tmp.attachement = getWsGenericsExt.attachement;
								bl_magento_tmp.station = getWsGenericsExt.station;
								bl_magento_tmp.title_out = getWsGenericsExt.title_out;
								bl_magento_tmp.send_out = getWsGenericsExt.send_out;
								bl_magento_tmp.from_out = getWsGenericsExt.from_out;
								bl_magento_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								bl_magento_tmp.attachement_out = getWsGenericsExt.attachement_out;
								bl_magento_tmp.station_out = getWsGenericsExt.station_out;
								bl_magento = bl_magento_tmp;
							} // closing filter/reject

							// # Output table : 'colis_asperpgi'
							// # Filter conditions
							if (

							"colis_asperpgi"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								colis_asperpgi_tmp.title = getWsGenericsExt.title;
								colis_asperpgi_tmp.sendUrl = getWsGenericsExt.sendUrl;
								colis_asperpgi_tmp.fromUrl = getWsGenericsExt.fromUrl;
								colis_asperpgi_tmp.sendedDate = getWsGenericsExt.sendedDate;
								colis_asperpgi_tmp.attachement = getWsGenericsExt.attachement;
								colis_asperpgi_tmp.station = getWsGenericsExt.station;
								colis_asperpgi_tmp.title_out = getWsGenericsExt.title_out;
								colis_asperpgi_tmp.send_out = getWsGenericsExt.send_out;
								colis_asperpgi_tmp.from_out = getWsGenericsExt.from_out;
								colis_asperpgi_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								colis_asperpgi_tmp.attachement_out = getWsGenericsExt.attachement_out;
								colis_asperpgi_tmp.station_out = getWsGenericsExt.station_out;
								colis_asperpgi = colis_asperpgi_tmp;
							} // closing filter/reject

							// # Output table : 'perso'
							// # Filter conditions
							if (

							"perso".equals(((java.util.Map) getWsGenericsExt.attachement)
									.get("model"))

							) {
								perso_tmp.title = getWsGenericsExt.title;
								perso_tmp.sendUrl = getWsGenericsExt.sendUrl;
								perso_tmp.fromUrl = getWsGenericsExt.fromUrl;
								perso_tmp.sendedDate = getWsGenericsExt.sendedDate;
								perso_tmp.attachement = getWsGenericsExt.attachement;
								perso_tmp.station = getWsGenericsExt.station;
								perso_tmp.title_out = getWsGenericsExt.title_out;
								perso_tmp.send_out = getWsGenericsExt.send_out;
								perso_tmp.from_out = getWsGenericsExt.from_out;
								perso_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								perso_tmp.attachement_out = getWsGenericsExt.attachement_out;
								perso_tmp.station_out = getWsGenericsExt.station_out;
								perso = perso_tmp;
							} // closing filter/reject

							// # Output table : 'etiquettes'
							// # Filter conditions
							if (

							"etiquettes"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								etiquettes_tmp.title = getWsGenericsExt.title;
								etiquettes_tmp.sendUrl = getWsGenericsExt.sendUrl;
								etiquettes_tmp.fromUrl = getWsGenericsExt.fromUrl;
								etiquettes_tmp.sendedDate = getWsGenericsExt.sendedDate;
								etiquettes_tmp.attachement = getWsGenericsExt.attachement;
								etiquettes_tmp.station = getWsGenericsExt.station;
								etiquettes_tmp.title_out = getWsGenericsExt.title_out;
								etiquettes_tmp.send_out = getWsGenericsExt.send_out;
								etiquettes_tmp.from_out = getWsGenericsExt.from_out;
								etiquettes_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								etiquettes_tmp.attachement_out = getWsGenericsExt.attachement_out;
								etiquettes_tmp.station_out = getWsGenericsExt.station_out;
								etiquettes = etiquettes_tmp;
							} // closing filter/reject

							// # Output table : 'groups'
							// # Filter conditions
							if (

							"groups".equals(((java.util.Map) getWsGenericsExt.attachement)
									.get("model"))

							) {
								groups_tmp.title = getWsGenericsExt.title;
								groups_tmp.sendUrl = getWsGenericsExt.sendUrl;
								groups_tmp.fromUrl = getWsGenericsExt.fromUrl;
								groups_tmp.sendedDate = getWsGenericsExt.sendedDate;
								groups_tmp.attachement = getWsGenericsExt.attachement;
								groups_tmp.station = getWsGenericsExt.station;
								groups_tmp.title_out = getWsGenericsExt.title_out;
								groups_tmp.send_out = getWsGenericsExt.send_out;
								groups_tmp.from_out = getWsGenericsExt.from_out;
								groups_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								groups_tmp.attachement_out = getWsGenericsExt.attachement_out;
								groups_tmp.station_out = getWsGenericsExt.station_out;
								groups = groups_tmp;
							} // closing filter/reject

							// # Output table : 'persoin'
							// # Filter conditions
							if (

							"persoin"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								persoin_tmp.title = getWsGenericsExt.title;
								persoin_tmp.sendUrl = getWsGenericsExt.sendUrl;
								persoin_tmp.fromUrl = getWsGenericsExt.fromUrl;
								persoin_tmp.sendedDate = getWsGenericsExt.sendedDate;
								persoin_tmp.attachement = getWsGenericsExt.attachement;
								persoin_tmp.station = getWsGenericsExt.station;
								persoin_tmp.title_out = getWsGenericsExt.title_out;
								persoin_tmp.send_out = getWsGenericsExt.send_out;
								persoin_tmp.from_out = getWsGenericsExt.from_out;
								persoin_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								persoin_tmp.attachement_out = getWsGenericsExt.attachement_out;
								persoin_tmp.station_out = getWsGenericsExt.station_out;
								persoin = persoin_tmp;
							} // closing filter/reject

							// # Output table : 'persoout'
							// # Filter conditions
							if (

							"persoout"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								persoout_tmp.title = getWsGenericsExt.title;
								persoout_tmp.sendUrl = getWsGenericsExt.sendUrl;
								persoout_tmp.fromUrl = getWsGenericsExt.fromUrl;
								persoout_tmp.sendedDate = getWsGenericsExt.sendedDate;
								persoout_tmp.attachement = getWsGenericsExt.attachement;
								persoout_tmp.station = getWsGenericsExt.station;
								persoout_tmp.title_out = getWsGenericsExt.title_out;
								persoout_tmp.send_out = getWsGenericsExt.send_out;
								persoout_tmp.from_out = getWsGenericsExt.from_out;
								persoout_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								persoout_tmp.attachement_out = getWsGenericsExt.attachement_out;
								persoout_tmp.station_out = getWsGenericsExt.station_out;
								persoout = persoout_tmp;
							} // closing filter/reject

							// # Output table : 'bl_asperpgi_report'
							// # Filter conditions
							if (

							"bl_asperpgi_report"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								bl_asperpgi_report_tmp.title = getWsGenericsExt.title;
								bl_asperpgi_report_tmp.sendUrl = getWsGenericsExt.sendUrl;
								bl_asperpgi_report_tmp.fromUrl = getWsGenericsExt.fromUrl;
								bl_asperpgi_report_tmp.sendedDate = getWsGenericsExt.sendedDate;
								bl_asperpgi_report_tmp.attachement = getWsGenericsExt.attachement;
								bl_asperpgi_report_tmp.station = getWsGenericsExt.station;
								bl_asperpgi_report_tmp.title_out = getWsGenericsExt.title_out;
								bl_asperpgi_report_tmp.send_out = getWsGenericsExt.send_out;
								bl_asperpgi_report_tmp.from_out = getWsGenericsExt.from_out;
								bl_asperpgi_report_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								bl_asperpgi_report_tmp.attachement_out = getWsGenericsExt.attachement_out;
								bl_asperpgi_report_tmp.station_out = getWsGenericsExt.station_out;
								bl_asperpgi_report = bl_asperpgi_report_tmp;
							} // closing filter/reject

							// # Output table : 'poste'
							// # Filter conditions
							if (

							"poste".equals(((java.util.Map) getWsGenericsExt.attachement)
									.get("model"))

							) {
								poste_tmp.title = getWsGenericsExt.title;
								poste_tmp.sendUrl = getWsGenericsExt.sendUrl;
								poste_tmp.fromUrl = getWsGenericsExt.fromUrl;
								poste_tmp.sendedDate = getWsGenericsExt.sendedDate;
								poste_tmp.attachement = getWsGenericsExt.attachement;
								poste_tmp.station = getWsGenericsExt.station;
								poste_tmp.title_out = getWsGenericsExt.title_out;
								poste_tmp.send_out = getWsGenericsExt.send_out;
								poste_tmp.from_out = getWsGenericsExt.from_out;
								poste_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								poste_tmp.attachement_out = getWsGenericsExt.attachement_out;
								poste_tmp.station_out = getWsGenericsExt.station_out;
								poste = poste_tmp;
							} // closing filter/reject

							// # Output table : 'dossier'
							// # Filter conditions
							if (

							"dossier"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								dossier_tmp.title = getWsGenericsExt.title;
								dossier_tmp.sendUrl = getWsGenericsExt.sendUrl;
								dossier_tmp.fromUrl = getWsGenericsExt.fromUrl;
								dossier_tmp.sendedDate = getWsGenericsExt.sendedDate;
								dossier_tmp.attachement = getWsGenericsExt.attachement;
								dossier_tmp.station = getWsGenericsExt.station;
								dossier_tmp.title_out = getWsGenericsExt.title_out;
								dossier_tmp.send_out = getWsGenericsExt.send_out;
								dossier_tmp.from_out = getWsGenericsExt.from_out;
								dossier_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								dossier_tmp.attachement_out = getWsGenericsExt.attachement_out;
								dossier_tmp.station_out = getWsGenericsExt.station_out;
								dossier = dossier_tmp;
							} // closing filter/reject

							// # Output table : 'mrp_production'
							// # Filter conditions
							if (

							"mrp_production"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								mrp_production_tmp.title = getWsGenericsExt.title;
								mrp_production_tmp.sendUrl = getWsGenericsExt.sendUrl;
								mrp_production_tmp.fromUrl = getWsGenericsExt.fromUrl;
								mrp_production_tmp.sendedDate = getWsGenericsExt.sendedDate;
								mrp_production_tmp.attachement = getWsGenericsExt.attachement;
								mrp_production_tmp.station = getWsGenericsExt.station;
								mrp_production_tmp.title_out = getWsGenericsExt.title_out;
								mrp_production_tmp.send_out = getWsGenericsExt.send_out;
								mrp_production_tmp.from_out = getWsGenericsExt.from_out;
								mrp_production_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								mrp_production_tmp.attachement_out = getWsGenericsExt.attachement_out;
								mrp_production_tmp.station_out = getWsGenericsExt.station_out;
								mrp_production = mrp_production_tmp;
							} // closing filter/reject

							// # Output table : 'bl_asperpgi'
							// # Filter conditions
							if (

							"bl_asperpgi"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								bl_asperpgi_tmp.title = getWsGenericsExt.title;
								bl_asperpgi_tmp.sendUrl = getWsGenericsExt.sendUrl;
								bl_asperpgi_tmp.fromUrl = getWsGenericsExt.fromUrl;
								bl_asperpgi_tmp.sendedDate = getWsGenericsExt.sendedDate;
								bl_asperpgi_tmp.attachement = getWsGenericsExt.attachement;
								bl_asperpgi_tmp.station = getWsGenericsExt.station;
								bl_asperpgi_tmp.title_out = getWsGenericsExt.title_out;
								bl_asperpgi_tmp.sendUrl_out = null;
								bl_asperpgi_tmp.fromUrl_out = null;
								bl_asperpgi_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								bl_asperpgi_tmp.attachement_out = getWsGenericsExt.attachement_out;
								bl_asperpgi_tmp.station_out = getWsGenericsExt.station_out;
								bl_asperpgi = bl_asperpgi_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_179 = false;

						tos_count_tMap_179++;

						/**
						 * [tMap_179 main ] stop
						 */
						// Start of branch "mrp_production_product_line"
						if (mrp_production_product_line != null) {

							/**
							 * [tXMLRPCOpenDAS_16 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_16";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_16 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_16 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_16 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_16);
							}

							consoleOut_tXMLRPCOpenDAS_16
									.println("tXMLRPCOpenDAS_16"
											+ " received parameters : "
											+ mrp_production_product_line
													.toString());
							consoleOut_tXMLRPCOpenDAS_16.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_16 = mrp_production_product_line.title;
							String sendUrl_tXMLRPCOpenDAS_16 = mrp_production_product_line.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_16 = mrp_production_product_line.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_16 = mrp_production_product_line.sendedDate;
							String station_tXMLRPCOpenDAS_16 = mrp_production_product_line.station;
							java.util.Map checkingMap = (java.util.Map) mrp_production_product_line.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_16 = null;
							String sendUrl_out_tXMLRPCOpenDAS_16 = null;
							String fromUrl_out_tXMLRPCOpenDAS_16 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_16 = null;
							String station_out_tXMLRPCOpenDAS_16 = null;
							Object attachement_out_tXMLRPCOpenDAS_16 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_16
										.println("tXMLRPCOpenDAS_16"
												+ " Connexion ASPerpgi ");
								consoleOut_tXMLRPCOpenDAS_16.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_16 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameASPerpgi,
										context.usernameASPerpgi,
										context.pwdASPerpgi,
										context.hostASPerpgi,
										context.portASPerpgi);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_16
										.println("tXMLRPCOpenDAS_16"
												+ " XMLRpc : "
												+ "mrp.production.product.line"
												+ " "
												+ "talend_get_mrp_production_product_line");
								consoleOut_tXMLRPCOpenDAS_16.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_16 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_16
										.exec(
												"mrp.production.product.line",
												"talend_get_mrp_production_product_line",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_16 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_16 : "
													+ responsetXMLRPCOpenDAS_16);
									result.setCode(responsetXMLRPCOpenDAS_16
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_16
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_16
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_16
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("parent_id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("parent_id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("parent_id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCodeDependency((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_16 = {
									title_tXMLRPCOpenDAS_16,
									sendUrl_tXMLRPCOpenDAS_16,
									fromUrl_tXMLRPCOpenDAS_16,
									sendedDate_tXMLRPCOpenDAS_16,
									mrp_production_product_line.attachement,
									station_tXMLRPCOpenDAS_16,
									title_out_tXMLRPCOpenDAS_16,
									sendUrl_out_tXMLRPCOpenDAS_16,
									fromUrl_out_tXMLRPCOpenDAS_16,
									sendedDate_out_tXMLRPCOpenDAS_16, result,
									station_out_tXMLRPCOpenDAS_16 };

							for (int i_tXMLRPCOpenDAS_16 = 0; i_tXMLRPCOpenDAS_16 < results_tXMLRPCOpenDAS_16.length; i_tXMLRPCOpenDAS_16++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[0] != null) {
									row3.title = (String) results_tXMLRPCOpenDAS_16[0];

								} else {
									row3.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[1] != null) {
									row3.sendUrl = (String) results_tXMLRPCOpenDAS_16[1];

								} else {
									row3.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[2] != null) {
									row3.fromUrl = (String) results_tXMLRPCOpenDAS_16[2];

								} else {
									row3.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[3] != null) {
									row3.sendedDate = (Date) results_tXMLRPCOpenDAS_16[3];

								} else {
									row3.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[4] != null) {
									row3.attachement = (Object) results_tXMLRPCOpenDAS_16[4];

								} else {
									row3.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[5] != null) {
									row3.station = (String) results_tXMLRPCOpenDAS_16[5];

								} else {
									row3.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[6] != null) {
									row3.title_out = (String) results_tXMLRPCOpenDAS_16[6];

								} else {
									row3.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[7] != null) {
									row3.sendUrl_out = (String) results_tXMLRPCOpenDAS_16[7];

								} else {
									row3.sendUrl_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[8] != null) {
									row3.fromUrl_out = (String) results_tXMLRPCOpenDAS_16[8];

								} else {
									row3.fromUrl_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[9] != null) {
									row3.sendedDate_out = (Date) results_tXMLRPCOpenDAS_16[9];

								} else {
									row3.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[10] != null) {
									row3.attachement_out = (Object) results_tXMLRPCOpenDAS_16[10];

								} else {
									row3.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[11] != null) {
									row3.station_out = (String) results_tXMLRPCOpenDAS_16[11];

								} else {
									row3.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_16++;

							/**
							 * [tXMLRPCOpenDAS_16 main ] stop
							 */
							// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tMomObjectOutput_82 main ] start
								 */

								currentComponent = "tMomObjectOutput_82";

								System.out.println("attachement :"
										+ row3.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row3.title);
								previousRequest.setSendUrl(row3.sendUrl);
								previousRequest.setFromUrl(row3.fromUrl);
								previousRequest.setSendedDate(row3.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row3.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row3.title_out);
								response.setSendedDate(row3.sendedDate_out);
								response.setAttachement((java.io.Serializable) row3.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_82 = session_tMomObjectOutput_82
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_82.setObject(response);
								message_tMomObjectOutput_82.setStringProperty(
										"Sujet", row3.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_82 = session_tMomObjectOutput_82
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_82 = session_tMomObjectOutput_82
										.createProducer(des_tMomObjectOutput_82);
								producer_tMomObjectOutput_82
										.send(message_tMomObjectOutput_82);

								tos_count_tMomObjectOutput_82++;

								/**
								 * [tMomObjectOutput_82 main ] stop
								 */

							} // End of branch "row3"

						} // End of branch "mrp_production_product_line"

						// Start of branch "produits_magento"
						if (produits_magento != null) {

							/**
							 * [tXMLRPCOpenDAS_4 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_4";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_4 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_4 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_4 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_4);
							}

							consoleOut_tXMLRPCOpenDAS_4
									.println("tXMLRPCOpenDAS_4"
											+ " received parameters : "
											+ produits_magento.toString());
							consoleOut_tXMLRPCOpenDAS_4.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_4 = produits_magento.title;
							String sendUrl_tXMLRPCOpenDAS_4 = produits_magento.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_4 = produits_magento.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_4 = produits_magento.sendedDate;
							String station_tXMLRPCOpenDAS_4 = produits_magento.station;
							java.util.Map checkingMap = (java.util.Map) produits_magento.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
								if ("bl_magento".equals(tab[i])) {
									vals.put("id", checkingMap.get(tab[i]));
								}
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_4 = null;
							String sendUrl_out_tXMLRPCOpenDAS_4 = null;
							String fromUrl_out_tXMLRPCOpenDAS_4 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_4 = null;
							String station_out_tXMLRPCOpenDAS_4 = null;
							Object attachement_out_tXMLRPCOpenDAS_4 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_4
										.println("tXMLRPCOpenDAS_4"
												+ " Connexion Magento ");
								consoleOut_tXMLRPCOpenDAS_4.flush();
								OpenDAS_xmlrpc.Magento_connect connexiontXMLRPCOpenDAS_4 = new OpenDAS_xmlrpc.Magento_connect(
										context.username, context.pwd,
										context.host, context.port);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();
								if (checkingMap.get("bl_magento") != null
										&& "=" != null) {
									context_search_tmp
											.add(new Object[] {
													"id",
													"=",
													checkingMap
															.get("bl_magento") });
								}

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_4
										.println("tXMLRPCOpenDAS_4"
												+ " XMLRpc : "
												+ "opendas_shipping_order"
												+ " " + "items_can_ship");
								consoleOut_tXMLRPCOpenDAS_4.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_4 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_4
										.exec("opendas_shipping_order",
												"items_can_ship", vals,
												context_search);
								if (responsetXMLRPCOpenDAS_4 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_4 : "
													+ responsetXMLRPCOpenDAS_4);
									result.setCode(responsetXMLRPCOpenDAS_4
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_4
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_4
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_4
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("Integer".equals("Integer")) {
											if ("Integer".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("qty"));
											} else if ("Integer"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("qty"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("Integer".equals("String")) {
											if ("Integer".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("Integer"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("qty"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setQtyMax((Integer) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("Integer".equals("Integer")) {
											if ("Integer".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("qty"));
											} else if ("Integer"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("qty"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("Integer".equals("String")) {
											if ("Integer".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("Integer"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("qty"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setQtyMin((Integer) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_4 = {
									title_tXMLRPCOpenDAS_4,
									sendUrl_tXMLRPCOpenDAS_4,
									fromUrl_tXMLRPCOpenDAS_4,
									sendedDate_tXMLRPCOpenDAS_4,
									produits_magento.attachement,
									station_tXMLRPCOpenDAS_4,
									title_out_tXMLRPCOpenDAS_4,
									sendUrl_out_tXMLRPCOpenDAS_4,
									fromUrl_out_tXMLRPCOpenDAS_4,
									sendedDate_out_tXMLRPCOpenDAS_4, result,
									station_out_tXMLRPCOpenDAS_4 };

							for (int i_tXMLRPCOpenDAS_4 = 0; i_tXMLRPCOpenDAS_4 < results_tXMLRPCOpenDAS_4.length; i_tXMLRPCOpenDAS_4++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[0] != null) {
									row17.title = (String) results_tXMLRPCOpenDAS_4[0];

								} else {
									row17.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[1] != null) {
									row17.sendUrl = (String) results_tXMLRPCOpenDAS_4[1];

								} else {
									row17.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[2] != null) {
									row17.fromUrl = (String) results_tXMLRPCOpenDAS_4[2];

								} else {
									row17.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[3] != null) {
									row17.sendedDate = (Date) results_tXMLRPCOpenDAS_4[3];

								} else {
									row17.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[4] != null) {
									row17.attachement = (Object) results_tXMLRPCOpenDAS_4[4];

								} else {
									row17.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[5] != null) {
									row17.station = (String) results_tXMLRPCOpenDAS_4[5];

								} else {
									row17.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[6] != null) {
									row17.title_out = (String) results_tXMLRPCOpenDAS_4[6];

								} else {
									row17.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[7] != null) {
									row17.send_out = (String) results_tXMLRPCOpenDAS_4[7];

								} else {
									row17.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[8] != null) {
									row17.from_out = (String) results_tXMLRPCOpenDAS_4[8];

								} else {
									row17.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[9] != null) {
									row17.sendedDate_out = (Date) results_tXMLRPCOpenDAS_4[9];

								} else {
									row17.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[10] != null) {
									row17.attachement_out = (Object) results_tXMLRPCOpenDAS_4[10];

								} else {
									row17.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[11] != null) {
									row17.station_out = (String) results_tXMLRPCOpenDAS_4[11];

								} else {
									row17.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_4++;

							/**
							 * [tXMLRPCOpenDAS_4 main ] stop
							 */
							// Start of branch "row17"
							if (row17 != null) {

								/**
								 * [tMomObjectOutput_64 main ] start
								 */

								currentComponent = "tMomObjectOutput_64";

								System.out.println("attachement :"
										+ row17.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row17.title);
								previousRequest.setSendUrl(row17.sendUrl);
								previousRequest.setFromUrl(row17.fromUrl);
								previousRequest.setSendedDate(row17.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row17.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row17.title_out);
								response.setSendedDate(row17.sendedDate_out);
								response.setAttachement((java.io.Serializable) row17.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_64 = session_tMomObjectOutput_64
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_64.setObject(response);
								message_tMomObjectOutput_64.setStringProperty(
										"Sujet", row17.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_64 = session_tMomObjectOutput_64
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_64 = session_tMomObjectOutput_64
										.createProducer(des_tMomObjectOutput_64);
								producer_tMomObjectOutput_64
										.send(message_tMomObjectOutput_64);

								tos_count_tMomObjectOutput_64++;

								/**
								 * [tMomObjectOutput_64 main ] stop
								 */

							} // End of branch "row17"

						} // End of branch "produits_magento"

						// Start of branch "produits_asperpgi"
						if (produits_asperpgi != null) {

							/**
							 * [tXMLRPCOpenDAS_3 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_3";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_3 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_3 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_3 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_3);
							}

							consoleOut_tXMLRPCOpenDAS_3
									.println("tXMLRPCOpenDAS_3"
											+ " received parameters : "
											+ produits_asperpgi.toString());
							consoleOut_tXMLRPCOpenDAS_3.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_3 = produits_asperpgi.title;
							String sendUrl_tXMLRPCOpenDAS_3 = produits_asperpgi.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_3 = produits_asperpgi.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_3 = produits_asperpgi.sendedDate;
							String station_tXMLRPCOpenDAS_3 = produits_asperpgi.station;
							java.util.Map checkingMap = (java.util.Map) produits_asperpgi.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
								if ("bl_asperpgi".equals(tab[i])) {
									vals.put("picking", checkingMap.get(tab[i]));
								}
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_3 = null;
							String sendUrl_out_tXMLRPCOpenDAS_3 = null;
							String fromUrl_out_tXMLRPCOpenDAS_3 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_3 = null;
							String station_out_tXMLRPCOpenDAS_3 = null;
							Object attachement_out_tXMLRPCOpenDAS_3 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_3
										.println("tXMLRPCOpenDAS_3"
												+ " Connexion ASPerpgi ");
								consoleOut_tXMLRPCOpenDAS_3.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_3 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameASPerpgi,
										context.usernameASPerpgi,
										context.pwdASPerpgi,
										context.hostASPerpgi,
										context.portASPerpgi);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_3
										.println("tXMLRPCOpenDAS_3"
												+ " XMLRpc : "
												+ "stock.picking"
												+ " "
												+ "talend_get_product_by_picking");
								consoleOut_tXMLRPCOpenDAS_3.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_3 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_3
										.exec(
												"stock.picking",
												"talend_get_product_by_picking",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_3 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_3 : "
													+ responsetXMLRPCOpenDAS_3);
									result.setCode(responsetXMLRPCOpenDAS_3
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_3
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_3
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_3
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("Integer".equals("Integer")) {
											if ("Integer".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("qty"));
											} else if ("Integer"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("qty"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("Integer".equals("String")) {
											if ("Integer".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("Integer"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("qty"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setQtyMax((Integer) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("Integer".equals("Integer")) {
											if ("Integer".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("qty"));
											} else if ("Integer"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("qty"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("Integer".equals("String")) {
											if ("Integer".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("Integer"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("qty"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setQtyMin((Integer) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_3 = {
									title_tXMLRPCOpenDAS_3,
									sendUrl_tXMLRPCOpenDAS_3,
									fromUrl_tXMLRPCOpenDAS_3,
									sendedDate_tXMLRPCOpenDAS_3,
									produits_asperpgi.attachement,
									station_tXMLRPCOpenDAS_3,
									title_out_tXMLRPCOpenDAS_3,
									sendUrl_out_tXMLRPCOpenDAS_3,
									fromUrl_out_tXMLRPCOpenDAS_3,
									sendedDate_out_tXMLRPCOpenDAS_3, result,
									station_out_tXMLRPCOpenDAS_3 };

							for (int i_tXMLRPCOpenDAS_3 = 0; i_tXMLRPCOpenDAS_3 < results_tXMLRPCOpenDAS_3.length; i_tXMLRPCOpenDAS_3++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[0] != null) {
									row5.title = (String) results_tXMLRPCOpenDAS_3[0];

								} else {
									row5.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[1] != null) {
									row5.sendUrl = (String) results_tXMLRPCOpenDAS_3[1];

								} else {
									row5.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[2] != null) {
									row5.fromUrl = (String) results_tXMLRPCOpenDAS_3[2];

								} else {
									row5.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[3] != null) {
									row5.sendedDate = (Date) results_tXMLRPCOpenDAS_3[3];

								} else {
									row5.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[4] != null) {
									row5.attachement = (Object) results_tXMLRPCOpenDAS_3[4];

								} else {
									row5.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[5] != null) {
									row5.station = (String) results_tXMLRPCOpenDAS_3[5];

								} else {
									row5.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[6] != null) {
									row5.title_out = (String) results_tXMLRPCOpenDAS_3[6];

								} else {
									row5.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[7] != null) {
									row5.send_out = (String) results_tXMLRPCOpenDAS_3[7];

								} else {
									row5.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[8] != null) {
									row5.from_out = (String) results_tXMLRPCOpenDAS_3[8];

								} else {
									row5.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[9] != null) {
									row5.sendedDate_out = (Date) results_tXMLRPCOpenDAS_3[9];

								} else {
									row5.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[10] != null) {
									row5.attachement_out = (Object) results_tXMLRPCOpenDAS_3[10];

								} else {
									row5.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[11] != null) {
									row5.station_out = (String) results_tXMLRPCOpenDAS_3[11];

								} else {
									row5.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_3++;

							/**
							 * [tXMLRPCOpenDAS_3 main ] stop
							 */
							// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tMomObjectOutput_9 main ] start
								 */

								currentComponent = "tMomObjectOutput_9";

								System.out.println("attachement :"
										+ row5.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row5.title);
								previousRequest.setSendUrl(row5.sendUrl);
								previousRequest.setFromUrl(row5.fromUrl);
								previousRequest.setSendedDate(row5.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row5.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row5.title_out);
								response.setSendedDate(row5.sendedDate_out);
								response.setAttachement((java.io.Serializable) row5.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_9 = session_tMomObjectOutput_9
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_9.setObject(response);
								message_tMomObjectOutput_9.setStringProperty(
										"Sujet", row5.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_9 = session_tMomObjectOutput_9
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_9 = session_tMomObjectOutput_9
										.createProducer(des_tMomObjectOutput_9);
								producer_tMomObjectOutput_9
										.send(message_tMomObjectOutput_9);

								tos_count_tMomObjectOutput_9++;

								/**
								 * [tMomObjectOutput_9 main ] stop
								 */

							} // End of branch "row5"

						} // End of branch "produits_asperpgi"

						// Start of branch "bl_magento"
						if (bl_magento != null) {

							/**
							 * [tXMLRPCOpenDAS_6 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_6";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_6 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_6 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_6 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_6);
							}

							consoleOut_tXMLRPCOpenDAS_6
									.println("tXMLRPCOpenDAS_6"
											+ " received parameters : "
											+ bl_magento.toString());
							consoleOut_tXMLRPCOpenDAS_6.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_6 = bl_magento.title;
							String sendUrl_tXMLRPCOpenDAS_6 = bl_magento.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_6 = bl_magento.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_6 = bl_magento.sendedDate;
							String station_tXMLRPCOpenDAS_6 = bl_magento.station;
							java.util.Map checkingMap = (java.util.Map) bl_magento.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_6 = null;
							String sendUrl_out_tXMLRPCOpenDAS_6 = null;
							String fromUrl_out_tXMLRPCOpenDAS_6 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_6 = null;
							String station_out_tXMLRPCOpenDAS_6 = null;
							Object attachement_out_tXMLRPCOpenDAS_6 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_6
										.println("tXMLRPCOpenDAS_6"
												+ " Connexion Magento ");
								consoleOut_tXMLRPCOpenDAS_6.flush();
								OpenDAS_xmlrpc.Magento_connect connexiontXMLRPCOpenDAS_6 = new OpenDAS_xmlrpc.Magento_connect(
										context.username, context.pwd,
										context.host, context.port);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_6
										.println("tXMLRPCOpenDAS_6"
												+ " XMLRpc : "
												+ "opendas_shipping_order"
												+ " " + "list_can_ship");
								consoleOut_tXMLRPCOpenDAS_6.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_6 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_6
										.exec("opendas_shipping_order",
												"list_can_ship", vals,
												context_search);
								if (responsetXMLRPCOpenDAS_6 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_6 : "
													+ responsetXMLRPCOpenDAS_6);
									result.setCode(responsetXMLRPCOpenDAS_6
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_6
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_6
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_6
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_6 = {
									title_tXMLRPCOpenDAS_6,
									sendUrl_tXMLRPCOpenDAS_6,
									fromUrl_tXMLRPCOpenDAS_6,
									sendedDate_tXMLRPCOpenDAS_6,
									bl_magento.attachement,
									station_tXMLRPCOpenDAS_6,
									title_out_tXMLRPCOpenDAS_6,
									sendUrl_out_tXMLRPCOpenDAS_6,
									fromUrl_out_tXMLRPCOpenDAS_6,
									sendedDate_out_tXMLRPCOpenDAS_6, result,
									station_out_tXMLRPCOpenDAS_6 };

							for (int i_tXMLRPCOpenDAS_6 = 0; i_tXMLRPCOpenDAS_6 < results_tXMLRPCOpenDAS_6.length; i_tXMLRPCOpenDAS_6++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[0] != null) {
									row16.title = (String) results_tXMLRPCOpenDAS_6[0];

								} else {
									row16.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[1] != null) {
									row16.sendUrl = (String) results_tXMLRPCOpenDAS_6[1];

								} else {
									row16.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[2] != null) {
									row16.fromUrl = (String) results_tXMLRPCOpenDAS_6[2];

								} else {
									row16.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[3] != null) {
									row16.sendedDate = (Date) results_tXMLRPCOpenDAS_6[3];

								} else {
									row16.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[4] != null) {
									row16.attachement = (Object) results_tXMLRPCOpenDAS_6[4];

								} else {
									row16.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[5] != null) {
									row16.station = (String) results_tXMLRPCOpenDAS_6[5];

								} else {
									row16.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[6] != null) {
									row16.title_out = (String) results_tXMLRPCOpenDAS_6[6];

								} else {
									row16.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[7] != null) {
									row16.send_out = (String) results_tXMLRPCOpenDAS_6[7];

								} else {
									row16.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[8] != null) {
									row16.from_out = (String) results_tXMLRPCOpenDAS_6[8];

								} else {
									row16.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[9] != null) {
									row16.sendedDate_out = (Date) results_tXMLRPCOpenDAS_6[9];

								} else {
									row16.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[10] != null) {
									row16.attachement_out = (Object) results_tXMLRPCOpenDAS_6[10];

								} else {
									row16.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[11] != null) {
									row16.station_out = (String) results_tXMLRPCOpenDAS_6[11];

								} else {
									row16.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_6++;

							/**
							 * [tXMLRPCOpenDAS_6 main ] stop
							 */
							// Start of branch "row16"
							if (row16 != null) {

								/**
								 * [tMomObjectOutput_19 main ] start
								 */

								currentComponent = "tMomObjectOutput_19";

								System.out.println("attachement :"
										+ row16.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row16.title);
								previousRequest.setSendUrl(row16.sendUrl);
								previousRequest.setFromUrl(row16.fromUrl);
								previousRequest.setSendedDate(row16.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row16.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row16.title_out);
								response.setSendedDate(row16.sendedDate_out);
								response.setAttachement((java.io.Serializable) row16.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_19 = session_tMomObjectOutput_19
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_19.setObject(response);
								message_tMomObjectOutput_19.setStringProperty(
										"Sujet", row16.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_19 = session_tMomObjectOutput_19
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_19 = session_tMomObjectOutput_19
										.createProducer(des_tMomObjectOutput_19);
								producer_tMomObjectOutput_19
										.send(message_tMomObjectOutput_19);

								tos_count_tMomObjectOutput_19++;

								/**
								 * [tMomObjectOutput_19 main ] stop
								 */

							} // End of branch "row16"

						} // End of branch "bl_magento"

						// Start of branch "colis_asperpgi"
						if (colis_asperpgi != null) {

							/**
							 * [tXMLRPCOpenDAS_8 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_8";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_8 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_8 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_8 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_8);
							}

							consoleOut_tXMLRPCOpenDAS_8
									.println("tXMLRPCOpenDAS_8"
											+ " received parameters : "
											+ colis_asperpgi.toString());
							consoleOut_tXMLRPCOpenDAS_8.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_8 = colis_asperpgi.title;
							String sendUrl_tXMLRPCOpenDAS_8 = colis_asperpgi.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_8 = colis_asperpgi.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_8 = colis_asperpgi.sendedDate;
							String station_tXMLRPCOpenDAS_8 = colis_asperpgi.station;
							java.util.Map checkingMap = (java.util.Map) colis_asperpgi.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
								if ("produits_asperpgi".equals(tab[i])) {
									vals.put("product_id", checkingMap
											.get(tab[i]));
								}
								if ("bl_asperpgi".equals(tab[i])) {
									vals.put("id", checkingMap.get(tab[i]));
								}
								if ("colis_asperpgi".equals(tab[i])) {
									vals.put("packaging_ids", checkingMap
											.get(tab[i]));
								}
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_8 = null;
							String sendUrl_out_tXMLRPCOpenDAS_8 = null;
							String fromUrl_out_tXMLRPCOpenDAS_8 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_8 = null;
							String station_out_tXMLRPCOpenDAS_8 = null;
							Object attachement_out_tXMLRPCOpenDAS_8 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_8
										.println("tXMLRPCOpenDAS_8"
												+ " Connexion ASPerpgi ");
								consoleOut_tXMLRPCOpenDAS_8.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_8 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameASPerpgi,
										context.usernameASPerpgi,
										context.pwdASPerpgi,
										context.hostASPerpgi,
										context.portASPerpgi);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								context_search_tmp.add(new Object[] { "state",
										"=", "follow" });

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_8
										.println("tXMLRPCOpenDAS_8"
												+ " XMLRpc : "
												+ "stock.picking"
												+ " "
												+ "talend_get_packaging_by_product");
								consoleOut_tXMLRPCOpenDAS_8.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_8 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_8
										.exec(
												"stock.picking",
												"talend_get_packaging_by_product",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_8 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_8 : "
													+ responsetXMLRPCOpenDAS_8);
									result.setCode(responsetXMLRPCOpenDAS_8
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_8
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_8
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_8
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_8 = {
									title_tXMLRPCOpenDAS_8,
									sendUrl_tXMLRPCOpenDAS_8,
									fromUrl_tXMLRPCOpenDAS_8,
									sendedDate_tXMLRPCOpenDAS_8,
									colis_asperpgi.attachement,
									station_tXMLRPCOpenDAS_8,
									title_out_tXMLRPCOpenDAS_8,
									sendUrl_out_tXMLRPCOpenDAS_8,
									fromUrl_out_tXMLRPCOpenDAS_8,
									sendedDate_out_tXMLRPCOpenDAS_8, result,
									station_out_tXMLRPCOpenDAS_8 };

							for (int i_tXMLRPCOpenDAS_8 = 0; i_tXMLRPCOpenDAS_8 < results_tXMLRPCOpenDAS_8.length; i_tXMLRPCOpenDAS_8++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[0] != null) {
									row7.title = (String) results_tXMLRPCOpenDAS_8[0];

								} else {
									row7.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[1] != null) {
									row7.sendUrl = (String) results_tXMLRPCOpenDAS_8[1];

								} else {
									row7.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[2] != null) {
									row7.fromUrl = (String) results_tXMLRPCOpenDAS_8[2];

								} else {
									row7.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[3] != null) {
									row7.sendedDate = (Date) results_tXMLRPCOpenDAS_8[3];

								} else {
									row7.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[4] != null) {
									row7.attachement = (Object) results_tXMLRPCOpenDAS_8[4];

								} else {
									row7.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[5] != null) {
									row7.station = (String) results_tXMLRPCOpenDAS_8[5];

								} else {
									row7.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[6] != null) {
									row7.title_out = (String) results_tXMLRPCOpenDAS_8[6];

								} else {
									row7.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[7] != null) {
									row7.sendUrl_out = (String) results_tXMLRPCOpenDAS_8[7];

								} else {
									row7.sendUrl_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[8] != null) {
									row7.fromUrl_out = (String) results_tXMLRPCOpenDAS_8[8];

								} else {
									row7.fromUrl_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[9] != null) {
									row7.sendedDate_out = (Date) results_tXMLRPCOpenDAS_8[9];

								} else {
									row7.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[10] != null) {
									row7.attachement_out = (Object) results_tXMLRPCOpenDAS_8[10];

								} else {
									row7.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[11] != null) {
									row7.station_out = (String) results_tXMLRPCOpenDAS_8[11];

								} else {
									row7.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_8++;

							/**
							 * [tXMLRPCOpenDAS_8 main ] stop
							 */
							// Start of branch "row7"
							if (row7 != null) {

								/**
								 * [tMomObjectOutput_20 main ] start
								 */

								currentComponent = "tMomObjectOutput_20";

								System.out.println("attachement :"
										+ row7.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row7.title);
								previousRequest.setSendUrl(row7.sendUrl);
								previousRequest.setFromUrl(row7.fromUrl);
								previousRequest.setSendedDate(row7.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row7.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row7.title_out);
								response.setSendedDate(row7.sendedDate_out);
								response.setAttachement((java.io.Serializable) row7.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_20 = session_tMomObjectOutput_20
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_20.setObject(response);
								message_tMomObjectOutput_20.setStringProperty(
										"Sujet", row7.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_20 = session_tMomObjectOutput_20
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_20 = session_tMomObjectOutput_20
										.createProducer(des_tMomObjectOutput_20);
								producer_tMomObjectOutput_20
										.send(message_tMomObjectOutput_20);

								tos_count_tMomObjectOutput_20++;

								/**
								 * [tMomObjectOutput_20 main ] stop
								 */

							} // End of branch "row7"

						} // End of branch "colis_asperpgi"

						// Start of branch "perso"
						if (perso != null) {

							/**
							 * [tXMLRPCOpenDAS_9 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_9";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_9 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_9 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_9 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_9);
							}

							consoleOut_tXMLRPCOpenDAS_9
									.println("tXMLRPCOpenDAS_9"
											+ " received parameters : "
											+ perso.toString());
							consoleOut_tXMLRPCOpenDAS_9.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_9 = perso.title;
							String sendUrl_tXMLRPCOpenDAS_9 = perso.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_9 = perso.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_9 = perso.sendedDate;
							String station_tXMLRPCOpenDAS_9 = perso.station;
							java.util.Map checkingMap = (java.util.Map) perso.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_9 = null;
							String sendUrl_out_tXMLRPCOpenDAS_9 = null;
							String fromUrl_out_tXMLRPCOpenDAS_9 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_9 = null;
							String station_out_tXMLRPCOpenDAS_9 = null;
							Object attachement_out_tXMLRPCOpenDAS_9 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_9
										.println("tXMLRPCOpenDAS_9"
												+ " Connexion ASPerpgi ");
								consoleOut_tXMLRPCOpenDAS_9.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_9 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameASPerpgi,
										context.usernameASPerpgi,
										context.pwdASPerpgi,
										context.hostASPerpgi,
										context.portASPerpgi);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_9
										.println("tXMLRPCOpenDAS_9"
												+ " XMLRpc : " + "hr.employee"
												+ " "
												+ "talend_get_employee_barre");
								consoleOut_tXMLRPCOpenDAS_9.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_9 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_9
										.exec("hr.employee",
												"talend_get_employee_barre",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_9 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_9 : "
													+ responsetXMLRPCOpenDAS_9);
									result.setCode(responsetXMLRPCOpenDAS_9
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_9
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_9
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_9
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_9 = {
									title_tXMLRPCOpenDAS_9,
									sendUrl_tXMLRPCOpenDAS_9,
									fromUrl_tXMLRPCOpenDAS_9,
									sendedDate_tXMLRPCOpenDAS_9,
									perso.attachement,
									station_tXMLRPCOpenDAS_9,
									title_out_tXMLRPCOpenDAS_9,
									sendUrl_out_tXMLRPCOpenDAS_9,
									fromUrl_out_tXMLRPCOpenDAS_9,
									sendedDate_out_tXMLRPCOpenDAS_9, result,
									station_out_tXMLRPCOpenDAS_9 };

							for (int i_tXMLRPCOpenDAS_9 = 0; i_tXMLRPCOpenDAS_9 < results_tXMLRPCOpenDAS_9.length; i_tXMLRPCOpenDAS_9++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[0] != null) {
									row8.title = (String) results_tXMLRPCOpenDAS_9[0];

								} else {
									row8.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[1] != null) {
									row8.sendUrl = (String) results_tXMLRPCOpenDAS_9[1];

								} else {
									row8.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[2] != null) {
									row8.fromUrl = (String) results_tXMLRPCOpenDAS_9[2];

								} else {
									row8.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[3] != null) {
									row8.sendedDate = (Date) results_tXMLRPCOpenDAS_9[3];

								} else {
									row8.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[4] != null) {
									row8.attachement = (Object) results_tXMLRPCOpenDAS_9[4];

								} else {
									row8.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[5] != null) {
									row8.station = (String) results_tXMLRPCOpenDAS_9[5];

								} else {
									row8.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[6] != null) {
									row8.title_out = (String) results_tXMLRPCOpenDAS_9[6];

								} else {
									row8.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[7] != null) {
									row8.send_out = (String) results_tXMLRPCOpenDAS_9[7];

								} else {
									row8.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[8] != null) {
									row8.from_out = (String) results_tXMLRPCOpenDAS_9[8];

								} else {
									row8.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[9] != null) {
									row8.sendedDate_out = (Date) results_tXMLRPCOpenDAS_9[9];

								} else {
									row8.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[10] != null) {
									row8.attachement_out = (Object) results_tXMLRPCOpenDAS_9[10];

								} else {
									row8.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[11] != null) {
									row8.station_out = (String) results_tXMLRPCOpenDAS_9[11];

								} else {
									row8.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_9++;

							/**
							 * [tXMLRPCOpenDAS_9 main ] stop
							 */
							// Start of branch "row8"
							if (row8 != null) {

								/**
								 * [tMomObjectOutput_30 main ] start
								 */

								currentComponent = "tMomObjectOutput_30";

								System.out.println("attachement :"
										+ row8.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row8.title);
								previousRequest.setSendUrl(row8.sendUrl);
								previousRequest.setFromUrl(row8.fromUrl);
								previousRequest.setSendedDate(row8.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row8.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row8.title_out);
								response.setSendedDate(row8.sendedDate_out);
								response.setAttachement((java.io.Serializable) row8.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_30 = session_tMomObjectOutput_30
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_30.setObject(response);
								message_tMomObjectOutput_30.setStringProperty(
										"Sujet", row8.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_30 = session_tMomObjectOutput_30
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_30 = session_tMomObjectOutput_30
										.createProducer(des_tMomObjectOutput_30);
								producer_tMomObjectOutput_30
										.send(message_tMomObjectOutput_30);

								tos_count_tMomObjectOutput_30++;

								/**
								 * [tMomObjectOutput_30 main ] stop
								 */

							} // End of branch "row8"

						} // End of branch "perso"

						// Start of branch "etiquettes"
						if (etiquettes != null) {

							/**
							 * [tXMLRPCOpenDAS_10 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_10";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_10 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_10 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_10 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_10);
							}

							consoleOut_tXMLRPCOpenDAS_10
									.println("tXMLRPCOpenDAS_10"
											+ " received parameters : "
											+ etiquettes.toString());
							consoleOut_tXMLRPCOpenDAS_10.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_10 = etiquettes.title;
							String sendUrl_tXMLRPCOpenDAS_10 = etiquettes.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_10 = etiquettes.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_10 = etiquettes.sendedDate;
							String station_tXMLRPCOpenDAS_10 = etiquettes.station;
							java.util.Map checkingMap = (java.util.Map) etiquettes.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_10 = null;
							String sendUrl_out_tXMLRPCOpenDAS_10 = null;
							String fromUrl_out_tXMLRPCOpenDAS_10 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_10 = null;
							String station_out_tXMLRPCOpenDAS_10 = null;
							Object attachement_out_tXMLRPCOpenDAS_10 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_10
										.println("tXMLRPCOpenDAS_10"
												+ " Connexion ASPerpgi ");
								consoleOut_tXMLRPCOpenDAS_10.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_10 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameASPerpgi,
										context.usernameASPerpgi,
										context.pwdASPerpgi,
										context.hostASPerpgi,
										context.portASPerpgi);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_10
										.println("tXMLRPCOpenDAS_10"
												+ " XMLRpc : "
												+ "stock.move.packaging"
												+ " "
												+ "talend_get_employee_in_workcenter_barre");
								consoleOut_tXMLRPCOpenDAS_10.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_10 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_10
										.exec(
												"stock.move.packaging",
												"talend_get_employee_in_workcenter_barre",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_10 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_10 : "
													+ responsetXMLRPCOpenDAS_10);
									result.setCode(responsetXMLRPCOpenDAS_10
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_10
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_10
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_10
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_10 = {
									title_tXMLRPCOpenDAS_10,
									sendUrl_tXMLRPCOpenDAS_10,
									fromUrl_tXMLRPCOpenDAS_10,
									sendedDate_tXMLRPCOpenDAS_10,
									etiquettes.attachement,
									station_tXMLRPCOpenDAS_10,
									title_out_tXMLRPCOpenDAS_10,
									sendUrl_out_tXMLRPCOpenDAS_10,
									fromUrl_out_tXMLRPCOpenDAS_10,
									sendedDate_out_tXMLRPCOpenDAS_10, result,
									station_out_tXMLRPCOpenDAS_10 };

							for (int i_tXMLRPCOpenDAS_10 = 0; i_tXMLRPCOpenDAS_10 < results_tXMLRPCOpenDAS_10.length; i_tXMLRPCOpenDAS_10++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[0] != null) {
									row9.title = (String) results_tXMLRPCOpenDAS_10[0];

								} else {
									row9.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[1] != null) {
									row9.sendUrl = (String) results_tXMLRPCOpenDAS_10[1];

								} else {
									row9.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[2] != null) {
									row9.fromUrl = (String) results_tXMLRPCOpenDAS_10[2];

								} else {
									row9.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[3] != null) {
									row9.sendedDate = (Date) results_tXMLRPCOpenDAS_10[3];

								} else {
									row9.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[4] != null) {
									row9.attachement = (Object) results_tXMLRPCOpenDAS_10[4];

								} else {
									row9.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[5] != null) {
									row9.station = (String) results_tXMLRPCOpenDAS_10[5];

								} else {
									row9.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[6] != null) {
									row9.title_out = (String) results_tXMLRPCOpenDAS_10[6];

								} else {
									row9.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[7] != null) {
									row9.send_out = (String) results_tXMLRPCOpenDAS_10[7];

								} else {
									row9.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[8] != null) {
									row9.from_out = (String) results_tXMLRPCOpenDAS_10[8];

								} else {
									row9.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[9] != null) {
									row9.sendedDate_out = (Date) results_tXMLRPCOpenDAS_10[9];

								} else {
									row9.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[10] != null) {
									row9.attachement_out = (Object) results_tXMLRPCOpenDAS_10[10];

								} else {
									row9.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[11] != null) {
									row9.station_out = (String) results_tXMLRPCOpenDAS_10[11];

								} else {
									row9.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_10++;

							/**
							 * [tXMLRPCOpenDAS_10 main ] stop
							 */
							// Start of branch "row9"
							if (row9 != null) {

								/**
								 * [tMomObjectOutput_7 main ] start
								 */

								currentComponent = "tMomObjectOutput_7";

								System.out.println("attachement :"
										+ row9.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row9.title);
								previousRequest.setSendUrl(row9.sendUrl);
								previousRequest.setFromUrl(row9.fromUrl);
								previousRequest.setSendedDate(row9.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row9.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row9.title_out);
								response.setSendedDate(row9.sendedDate_out);
								response.setAttachement((java.io.Serializable) row9.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_7 = session_tMomObjectOutput_7
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_7.setObject(response);
								message_tMomObjectOutput_7.setStringProperty(
										"Sujet", row9.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_7 = session_tMomObjectOutput_7
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_7 = session_tMomObjectOutput_7
										.createProducer(des_tMomObjectOutput_7);
								producer_tMomObjectOutput_7
										.send(message_tMomObjectOutput_7);

								tos_count_tMomObjectOutput_7++;

								/**
								 * [tMomObjectOutput_7 main ] stop
								 */

							} // End of branch "row9"

						} // End of branch "etiquettes"

						// Start of branch "groups"
						if (groups != null) {

							/**
							 * [tXMLRPCOpenDAS_1 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_1";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_1 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_1 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_1 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_1);
							}

							consoleOut_tXMLRPCOpenDAS_1
									.println("tXMLRPCOpenDAS_1"
											+ " received parameters : "
											+ groups.toString());
							consoleOut_tXMLRPCOpenDAS_1.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_1 = groups.title;
							String sendUrl_tXMLRPCOpenDAS_1 = groups.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_1 = groups.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_1 = groups.sendedDate;
							String station_tXMLRPCOpenDAS_1 = groups.station;
							java.util.Map checkingMap = (java.util.Map) groups.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
								if ("perso".equals(tab[i])) {
									vals.put("employee", checkingMap
											.get(tab[i]));
								}
								if ("persoin".equals(tab[i])) {
									vals.put("employee", checkingMap
											.get(tab[i]));
								}
								if ("persoout".equals(tab[i])) {
									vals.put("employee", checkingMap
											.get(tab[i]));
								}
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_1 = null;
							String sendUrl_out_tXMLRPCOpenDAS_1 = null;
							String fromUrl_out_tXMLRPCOpenDAS_1 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_1 = null;
							String station_out_tXMLRPCOpenDAS_1 = null;
							Object attachement_out_tXMLRPCOpenDAS_1 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_1
										.println("tXMLRPCOpenDAS_1"
												+ " Connexion ASPerpgi ");
								consoleOut_tXMLRPCOpenDAS_1.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_1 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameASPerpgi,
										context.usernameASPerpgi,
										context.pwdASPerpgi,
										context.hostASPerpgi,
										context.portASPerpgi);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_1
										.println("tXMLRPCOpenDAS_1"
												+ " XMLRpc : "
												+ "hr.employee"
												+ " "
												+ "talend_get_groups_by_employee");
								consoleOut_tXMLRPCOpenDAS_1.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_1 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_1
										.exec(
												"hr.employee",
												"talend_get_groups_by_employee",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_1 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_1 : "
													+ responsetXMLRPCOpenDAS_1);
									result.setCode(responsetXMLRPCOpenDAS_1
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_1
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_1
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_1
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_1 = {
									title_tXMLRPCOpenDAS_1,
									sendUrl_tXMLRPCOpenDAS_1,
									fromUrl_tXMLRPCOpenDAS_1,
									sendedDate_tXMLRPCOpenDAS_1,
									groups.attachement,
									station_tXMLRPCOpenDAS_1,
									title_out_tXMLRPCOpenDAS_1,
									sendUrl_out_tXMLRPCOpenDAS_1,
									fromUrl_out_tXMLRPCOpenDAS_1,
									sendedDate_out_tXMLRPCOpenDAS_1, result,
									station_out_tXMLRPCOpenDAS_1 };

							for (int i_tXMLRPCOpenDAS_1 = 0; i_tXMLRPCOpenDAS_1 < results_tXMLRPCOpenDAS_1.length; i_tXMLRPCOpenDAS_1++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[0] != null) {
									row2.title = (String) results_tXMLRPCOpenDAS_1[0];

								} else {
									row2.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[1] != null) {
									row2.sendUrl = (String) results_tXMLRPCOpenDAS_1[1];

								} else {
									row2.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[2] != null) {
									row2.fromUrl = (String) results_tXMLRPCOpenDAS_1[2];

								} else {
									row2.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[3] != null) {
									row2.sendedDate = (Date) results_tXMLRPCOpenDAS_1[3];

								} else {
									row2.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[4] != null) {
									row2.attachement = (Object) results_tXMLRPCOpenDAS_1[4];

								} else {
									row2.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[5] != null) {
									row2.station = (String) results_tXMLRPCOpenDAS_1[5];

								} else {
									row2.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[6] != null) {
									row2.title_out = (String) results_tXMLRPCOpenDAS_1[6];

								} else {
									row2.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[7] != null) {
									row2.send_out = (String) results_tXMLRPCOpenDAS_1[7];

								} else {
									row2.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[8] != null) {
									row2.from_out = (String) results_tXMLRPCOpenDAS_1[8];

								} else {
									row2.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[9] != null) {
									row2.sendedDate_out = (Date) results_tXMLRPCOpenDAS_1[9];

								} else {
									row2.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[10] != null) {
									row2.attachement_out = (Object) results_tXMLRPCOpenDAS_1[10];

								} else {
									row2.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_1.length
										&& results_tXMLRPCOpenDAS_1[11] != null) {
									row2.station_out = (String) results_tXMLRPCOpenDAS_1[11];

								} else {
									row2.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_1++;

							/**
							 * [tXMLRPCOpenDAS_1 main ] stop
							 */
							// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tMomObjectOutput_6 main ] start
								 */

								currentComponent = "tMomObjectOutput_6";

								System.out.println("attachement :"
										+ row2.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row2.title);
								previousRequest.setSendUrl(row2.sendUrl);
								previousRequest.setFromUrl(row2.fromUrl);
								previousRequest.setSendedDate(row2.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row2.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row2.title_out);
								response.setSendedDate(row2.sendedDate_out);
								response.setAttachement((java.io.Serializable) row2.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_6 = session_tMomObjectOutput_6
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_6.setObject(response);
								message_tMomObjectOutput_6.setStringProperty(
										"Sujet", row2.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_6 = session_tMomObjectOutput_6
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_6 = session_tMomObjectOutput_6
										.createProducer(des_tMomObjectOutput_6);
								producer_tMomObjectOutput_6
										.send(message_tMomObjectOutput_6);

								tos_count_tMomObjectOutput_6++;

								/**
								 * [tMomObjectOutput_6 main ] stop
								 */

							} // End of branch "row2"

						} // End of branch "groups"

						// Start of branch "persoin"
						if (persoin != null) {

							/**
							 * [tXMLRPCOpenDAS_11 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_11";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_11 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_11 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_11 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_11);
							}

							consoleOut_tXMLRPCOpenDAS_11
									.println("tXMLRPCOpenDAS_11"
											+ " received parameters : "
											+ persoin.toString());
							consoleOut_tXMLRPCOpenDAS_11.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_11 = persoin.title;
							String sendUrl_tXMLRPCOpenDAS_11 = persoin.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_11 = persoin.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_11 = persoin.sendedDate;
							String station_tXMLRPCOpenDAS_11 = persoin.station;
							java.util.Map checkingMap = (java.util.Map) persoin.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
								if ("_workstation".equals(tab[i])) {
									vals.put("workcenter_ext", checkingMap
											.get(tab[i]));
								}
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_11 = null;
							String sendUrl_out_tXMLRPCOpenDAS_11 = null;
							String fromUrl_out_tXMLRPCOpenDAS_11 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_11 = null;
							String station_out_tXMLRPCOpenDAS_11 = null;
							Object attachement_out_tXMLRPCOpenDAS_11 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_11
										.println("tXMLRPCOpenDAS_11"
												+ " Connexion ASPerpgi ");
								consoleOut_tXMLRPCOpenDAS_11.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_11 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameASPerpgi,
										context.usernameASPerpgi,
										context.pwdASPerpgi,
										context.hostASPerpgi,
										context.portASPerpgi);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_11
										.println("tXMLRPCOpenDAS_11"
												+ " XMLRpc : "
												+ "hr.employee"
												+ " "
												+ "talend_get_employee_in_workcenter_barre");
								consoleOut_tXMLRPCOpenDAS_11.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_11 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_11
										.exec(
												"hr.employee",
												"talend_get_employee_in_workcenter_barre",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_11 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_11 : "
													+ responsetXMLRPCOpenDAS_11);
									result.setCode(responsetXMLRPCOpenDAS_11
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_11
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_11
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_11
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_11 = {
									title_tXMLRPCOpenDAS_11,
									sendUrl_tXMLRPCOpenDAS_11,
									fromUrl_tXMLRPCOpenDAS_11,
									sendedDate_tXMLRPCOpenDAS_11,
									persoin.attachement,
									station_tXMLRPCOpenDAS_11,
									title_out_tXMLRPCOpenDAS_11,
									sendUrl_out_tXMLRPCOpenDAS_11,
									fromUrl_out_tXMLRPCOpenDAS_11,
									sendedDate_out_tXMLRPCOpenDAS_11, result,
									station_out_tXMLRPCOpenDAS_11 };

							for (int i_tXMLRPCOpenDAS_11 = 0; i_tXMLRPCOpenDAS_11 < results_tXMLRPCOpenDAS_11.length; i_tXMLRPCOpenDAS_11++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[0] != null) {
									row4.title = (String) results_tXMLRPCOpenDAS_11[0];

								} else {
									row4.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[1] != null) {
									row4.sendUrl = (String) results_tXMLRPCOpenDAS_11[1];

								} else {
									row4.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[2] != null) {
									row4.fromUrl = (String) results_tXMLRPCOpenDAS_11[2];

								} else {
									row4.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[3] != null) {
									row4.sendedDate = (Date) results_tXMLRPCOpenDAS_11[3];

								} else {
									row4.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[4] != null) {
									row4.attachement = (Object) results_tXMLRPCOpenDAS_11[4];

								} else {
									row4.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[5] != null) {
									row4.station = (String) results_tXMLRPCOpenDAS_11[5];

								} else {
									row4.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[6] != null) {
									row4.title_out = (String) results_tXMLRPCOpenDAS_11[6];

								} else {
									row4.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[7] != null) {
									row4.send_out = (String) results_tXMLRPCOpenDAS_11[7];

								} else {
									row4.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[8] != null) {
									row4.from_out = (String) results_tXMLRPCOpenDAS_11[8];

								} else {
									row4.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[9] != null) {
									row4.sendedDate_out = (Date) results_tXMLRPCOpenDAS_11[9];

								} else {
									row4.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[10] != null) {
									row4.attachement_out = (Object) results_tXMLRPCOpenDAS_11[10];

								} else {
									row4.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[11] != null) {
									row4.station_out = (String) results_tXMLRPCOpenDAS_11[11];

								} else {
									row4.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_11++;

							/**
							 * [tXMLRPCOpenDAS_11 main ] stop
							 */
							// Start of branch "row4"
							if (row4 != null) {

								/**
								 * [tMomObjectOutput_15 main ] start
								 */

								currentComponent = "tMomObjectOutput_15";

								System.out.println("attachement :"
										+ row4.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row4.title);
								previousRequest.setSendUrl(row4.sendUrl);
								previousRequest.setFromUrl(row4.fromUrl);
								previousRequest.setSendedDate(row4.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row4.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row4.title_out);
								response.setSendedDate(row4.sendedDate_out);
								response.setAttachement((java.io.Serializable) row4.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_15 = session_tMomObjectOutput_15
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_15.setObject(response);
								message_tMomObjectOutput_15.setStringProperty(
										"Sujet", row4.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_15 = session_tMomObjectOutput_15
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_15 = session_tMomObjectOutput_15
										.createProducer(des_tMomObjectOutput_15);
								producer_tMomObjectOutput_15
										.send(message_tMomObjectOutput_15);

								tos_count_tMomObjectOutput_15++;

								/**
								 * [tMomObjectOutput_15 main ] stop
								 */

							} // End of branch "row4"

						} // End of branch "persoin"

						// Start of branch "persoout"
						if (persoout != null) {

							/**
							 * [tXMLRPCOpenDAS_12 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_12";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_12 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_12 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_12 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_12);
							}

							consoleOut_tXMLRPCOpenDAS_12
									.println("tXMLRPCOpenDAS_12"
											+ " received parameters : "
											+ persoout.toString());
							consoleOut_tXMLRPCOpenDAS_12.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_12 = persoout.title;
							String sendUrl_tXMLRPCOpenDAS_12 = persoout.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_12 = persoout.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_12 = persoout.sendedDate;
							String station_tXMLRPCOpenDAS_12 = persoout.station;
							java.util.Map checkingMap = (java.util.Map) persoout.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
								if ("_workstation".equals(tab[i])) {
									vals.put("workcenter_ext", checkingMap
											.get(tab[i]));
								}
								if ("_workstation".equals(tab[i])) {
									vals.put("workcenter_ext", checkingMap
											.get(tab[i]));
								}
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_12 = null;
							String sendUrl_out_tXMLRPCOpenDAS_12 = null;
							String fromUrl_out_tXMLRPCOpenDAS_12 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_12 = null;
							String station_out_tXMLRPCOpenDAS_12 = null;
							Object attachement_out_tXMLRPCOpenDAS_12 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_12
										.println("tXMLRPCOpenDAS_12"
												+ " Connexion ASPerpgi ");
								consoleOut_tXMLRPCOpenDAS_12.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_12 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameASPerpgi,
										context.usernameASPerpgi,
										context.pwdASPerpgi,
										context.hostASPerpgi,
										context.portASPerpgi);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_12
										.println("tXMLRPCOpenDAS_12"
												+ " XMLRpc : "
												+ "hr.employee"
												+ " "
												+ "talend_get_employee_out_workcenter_barre");
								consoleOut_tXMLRPCOpenDAS_12.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_12 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_12
										.exec(
												"hr.employee",
												"talend_get_employee_out_workcenter_barre",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_12 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_12 : "
													+ responsetXMLRPCOpenDAS_12);
									result.setCode(responsetXMLRPCOpenDAS_12
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_12
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_12
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_12
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_12 = {
									title_tXMLRPCOpenDAS_12,
									sendUrl_tXMLRPCOpenDAS_12,
									fromUrl_tXMLRPCOpenDAS_12,
									sendedDate_tXMLRPCOpenDAS_12,
									persoout.attachement,
									station_tXMLRPCOpenDAS_12,
									title_out_tXMLRPCOpenDAS_12,
									sendUrl_out_tXMLRPCOpenDAS_12,
									fromUrl_out_tXMLRPCOpenDAS_12,
									sendedDate_out_tXMLRPCOpenDAS_12, result,
									station_out_tXMLRPCOpenDAS_12 };

							for (int i_tXMLRPCOpenDAS_12 = 0; i_tXMLRPCOpenDAS_12 < results_tXMLRPCOpenDAS_12.length; i_tXMLRPCOpenDAS_12++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[0] != null) {
									row10.title = (String) results_tXMLRPCOpenDAS_12[0];

								} else {
									row10.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[1] != null) {
									row10.sendUrl = (String) results_tXMLRPCOpenDAS_12[1];

								} else {
									row10.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[2] != null) {
									row10.fromUrl = (String) results_tXMLRPCOpenDAS_12[2];

								} else {
									row10.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[3] != null) {
									row10.sendedDate = (Date) results_tXMLRPCOpenDAS_12[3];

								} else {
									row10.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[4] != null) {
									row10.attachement = (Object) results_tXMLRPCOpenDAS_12[4];

								} else {
									row10.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[5] != null) {
									row10.station = (String) results_tXMLRPCOpenDAS_12[5];

								} else {
									row10.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[6] != null) {
									row10.title_out = (String) results_tXMLRPCOpenDAS_12[6];

								} else {
									row10.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[7] != null) {
									row10.send_out = (String) results_tXMLRPCOpenDAS_12[7];

								} else {
									row10.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[8] != null) {
									row10.from_out = (String) results_tXMLRPCOpenDAS_12[8];

								} else {
									row10.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[9] != null) {
									row10.sendedDate_out = (Date) results_tXMLRPCOpenDAS_12[9];

								} else {
									row10.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[10] != null) {
									row10.attachement_out = (Object) results_tXMLRPCOpenDAS_12[10];

								} else {
									row10.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[11] != null) {
									row10.station_out = (String) results_tXMLRPCOpenDAS_12[11];

								} else {
									row10.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_12++;

							/**
							 * [tXMLRPCOpenDAS_12 main ] stop
							 */
							// Start of branch "row10"
							if (row10 != null) {

								/**
								 * [tMomObjectOutput_16 main ] start
								 */

								currentComponent = "tMomObjectOutput_16";

								System.out.println("attachement :"
										+ row10.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row10.title);
								previousRequest.setSendUrl(row10.sendUrl);
								previousRequest.setFromUrl(row10.fromUrl);
								previousRequest.setSendedDate(row10.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row10.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row10.title_out);
								response.setSendedDate(row10.sendedDate_out);
								response.setAttachement((java.io.Serializable) row10.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_16 = session_tMomObjectOutput_16
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_16.setObject(response);
								message_tMomObjectOutput_16.setStringProperty(
										"Sujet", row10.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_16 = session_tMomObjectOutput_16
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_16 = session_tMomObjectOutput_16
										.createProducer(des_tMomObjectOutput_16);
								producer_tMomObjectOutput_16
										.send(message_tMomObjectOutput_16);

								tos_count_tMomObjectOutput_16++;

								/**
								 * [tMomObjectOutput_16 main ] stop
								 */

							} // End of branch "row10"

						} // End of branch "persoout"

						// Start of branch "bl_asperpgi_report"
						if (bl_asperpgi_report != null) {

							/**
							 * [tXMLRPCOpenDAS_13 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_13";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_13 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_13 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_13 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_13);
							}

							consoleOut_tXMLRPCOpenDAS_13
									.println("tXMLRPCOpenDAS_13"
											+ " received parameters : "
											+ bl_asperpgi_report.toString());
							consoleOut_tXMLRPCOpenDAS_13.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_13 = bl_asperpgi_report.title;
							String sendUrl_tXMLRPCOpenDAS_13 = bl_asperpgi_report.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_13 = bl_asperpgi_report.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_13 = bl_asperpgi_report.sendedDate;
							String station_tXMLRPCOpenDAS_13 = bl_asperpgi_report.station;
							java.util.Map checkingMap = (java.util.Map) bl_asperpgi_report.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
								if ("bl_asperpgi".equals(tab[i])) {
									vals.put("picking", checkingMap.get(tab[i]));
								}
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_13 = null;
							String sendUrl_out_tXMLRPCOpenDAS_13 = null;
							String fromUrl_out_tXMLRPCOpenDAS_13 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_13 = null;
							String station_out_tXMLRPCOpenDAS_13 = null;
							Object attachement_out_tXMLRPCOpenDAS_13 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_13
										.println("tXMLRPCOpenDAS_13"
												+ " Connexion ASPerpgi ");
								consoleOut_tXMLRPCOpenDAS_13.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_13 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameASPerpgi,
										context.usernameASPerpgi,
										context.pwdASPerpgi,
										context.hostASPerpgi,
										context.portASPerpgi);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_13
										.println("tXMLRPCOpenDAS_13"
												+ " XMLRpc : "
												+ "stock.picking"
												+ " "
												+ "talend_get_report_by_picking");
								consoleOut_tXMLRPCOpenDAS_13.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_13 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_13
										.exec("stock.picking",
												"talend_get_report_by_picking",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_13 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_13 : "
													+ responsetXMLRPCOpenDAS_13);
									result.setCode(responsetXMLRPCOpenDAS_13
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_13
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_13
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_13
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_13 = {
									title_tXMLRPCOpenDAS_13,
									sendUrl_tXMLRPCOpenDAS_13,
									fromUrl_tXMLRPCOpenDAS_13,
									sendedDate_tXMLRPCOpenDAS_13,
									bl_asperpgi_report.attachement,
									station_tXMLRPCOpenDAS_13,
									title_out_tXMLRPCOpenDAS_13,
									sendUrl_out_tXMLRPCOpenDAS_13,
									fromUrl_out_tXMLRPCOpenDAS_13,
									sendedDate_out_tXMLRPCOpenDAS_13, result,
									station_out_tXMLRPCOpenDAS_13 };

							for (int i_tXMLRPCOpenDAS_13 = 0; i_tXMLRPCOpenDAS_13 < results_tXMLRPCOpenDAS_13.length; i_tXMLRPCOpenDAS_13++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_13.length
										&& results_tXMLRPCOpenDAS_13[0] != null) {
									row11.title = (String) results_tXMLRPCOpenDAS_13[0];

								} else {
									row11.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_13.length
										&& results_tXMLRPCOpenDAS_13[1] != null) {
									row11.sendUrl = (String) results_tXMLRPCOpenDAS_13[1];

								} else {
									row11.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_13.length
										&& results_tXMLRPCOpenDAS_13[2] != null) {
									row11.fromUrl = (String) results_tXMLRPCOpenDAS_13[2];

								} else {
									row11.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_13.length
										&& results_tXMLRPCOpenDAS_13[3] != null) {
									row11.sendedDate = (Date) results_tXMLRPCOpenDAS_13[3];

								} else {
									row11.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_13.length
										&& results_tXMLRPCOpenDAS_13[4] != null) {
									row11.attachement = (Object) results_tXMLRPCOpenDAS_13[4];

								} else {
									row11.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_13.length
										&& results_tXMLRPCOpenDAS_13[5] != null) {
									row11.station = (String) results_tXMLRPCOpenDAS_13[5];

								} else {
									row11.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_13.length
										&& results_tXMLRPCOpenDAS_13[6] != null) {
									row11.title_out = (String) results_tXMLRPCOpenDAS_13[6];

								} else {
									row11.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_13.length
										&& results_tXMLRPCOpenDAS_13[7] != null) {
									row11.sendUrl_out = (String) results_tXMLRPCOpenDAS_13[7];

								} else {
									row11.sendUrl_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_13.length
										&& results_tXMLRPCOpenDAS_13[8] != null) {
									row11.fromUrl_out = (String) results_tXMLRPCOpenDAS_13[8];

								} else {
									row11.fromUrl_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_13.length
										&& results_tXMLRPCOpenDAS_13[9] != null) {
									row11.sendedDate_out = (Date) results_tXMLRPCOpenDAS_13[9];

								} else {
									row11.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_13.length
										&& results_tXMLRPCOpenDAS_13[10] != null) {
									row11.attachement_out = (Object) results_tXMLRPCOpenDAS_13[10];

								} else {
									row11.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_13.length
										&& results_tXMLRPCOpenDAS_13[11] != null) {
									row11.station_out = (String) results_tXMLRPCOpenDAS_13[11];

								} else {
									row11.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_13++;

							/**
							 * [tXMLRPCOpenDAS_13 main ] stop
							 */
							// Start of branch "row11"
							if (row11 != null) {

								/**
								 * [tMomObjectOutput_11 main ] start
								 */

								currentComponent = "tMomObjectOutput_11";

								System.out.println("attachement :"
										+ row11.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row11.title);
								previousRequest.setSendUrl(row11.sendUrl);
								previousRequest.setFromUrl(row11.fromUrl);
								previousRequest.setSendedDate(row11.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row11.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row11.title_out);
								response.setSendedDate(row11.sendedDate_out);
								response.setAttachement((java.io.Serializable) row11.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_11 = session_tMomObjectOutput_11
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_11.setObject(response);
								message_tMomObjectOutput_11.setStringProperty(
										"Sujet", row11.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_11 = session_tMomObjectOutput_11
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_11 = session_tMomObjectOutput_11
										.createProducer(des_tMomObjectOutput_11);
								producer_tMomObjectOutput_11
										.send(message_tMomObjectOutput_11);

								tos_count_tMomObjectOutput_11++;

								/**
								 * [tMomObjectOutput_11 main ] stop
								 */

							} // End of branch "row11"

						} // End of branch "bl_asperpgi_report"

						// Start of branch "poste"
						if (poste != null) {

							/**
							 * [tXMLRPCOpenDAS_14 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_14";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_14 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_14 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_14 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_14);
							}

							consoleOut_tXMLRPCOpenDAS_14
									.println("tXMLRPCOpenDAS_14"
											+ " received parameters : "
											+ poste.toString());
							consoleOut_tXMLRPCOpenDAS_14.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_14 = poste.title;
							String sendUrl_tXMLRPCOpenDAS_14 = poste.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_14 = poste.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_14 = poste.sendedDate;
							String station_tXMLRPCOpenDAS_14 = poste.station;
							java.util.Map checkingMap = (java.util.Map) poste.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_14 = null;
							String sendUrl_out_tXMLRPCOpenDAS_14 = null;
							String fromUrl_out_tXMLRPCOpenDAS_14 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_14 = null;
							String station_out_tXMLRPCOpenDAS_14 = null;
							Object attachement_out_tXMLRPCOpenDAS_14 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_14
										.println("tXMLRPCOpenDAS_14"
												+ " Connexion ASPerpgi ");
								consoleOut_tXMLRPCOpenDAS_14.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_14 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameASPerpgi,
										context.usernameASPerpgi,
										context.pwdASPerpgi,
										context.hostASPerpgi,
										context.portASPerpgi);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_14
										.println("tXMLRPCOpenDAS_14"
												+ " XMLRpc : " + "hr.employee"
												+ " " + "talend_get_workcenter");
								consoleOut_tXMLRPCOpenDAS_14.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_14 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_14
										.exec("hr.employee",
												"talend_get_workcenter", vals,
												context_search);
								if (responsetXMLRPCOpenDAS_14 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_14 : "
													+ responsetXMLRPCOpenDAS_14);
									result.setCode(responsetXMLRPCOpenDAS_14
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_14
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_14
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_14
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_14 = {
									title_tXMLRPCOpenDAS_14,
									sendUrl_tXMLRPCOpenDAS_14,
									fromUrl_tXMLRPCOpenDAS_14,
									sendedDate_tXMLRPCOpenDAS_14,
									poste.attachement,
									station_tXMLRPCOpenDAS_14,
									title_out_tXMLRPCOpenDAS_14,
									sendUrl_out_tXMLRPCOpenDAS_14,
									fromUrl_out_tXMLRPCOpenDAS_14,
									sendedDate_out_tXMLRPCOpenDAS_14, result,
									station_out_tXMLRPCOpenDAS_14 };

							for (int i_tXMLRPCOpenDAS_14 = 0; i_tXMLRPCOpenDAS_14 < results_tXMLRPCOpenDAS_14.length; i_tXMLRPCOpenDAS_14++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[0] != null) {
									row12.title = (String) results_tXMLRPCOpenDAS_14[0];

								} else {
									row12.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[1] != null) {
									row12.sendUrl = (String) results_tXMLRPCOpenDAS_14[1];

								} else {
									row12.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[2] != null) {
									row12.fromUrl = (String) results_tXMLRPCOpenDAS_14[2];

								} else {
									row12.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[3] != null) {
									row12.sendedDate = (Date) results_tXMLRPCOpenDAS_14[3];

								} else {
									row12.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[4] != null) {
									row12.attachement = (Object) results_tXMLRPCOpenDAS_14[4];

								} else {
									row12.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[5] != null) {
									row12.station = (String) results_tXMLRPCOpenDAS_14[5];

								} else {
									row12.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[6] != null) {
									row12.title_out = (String) results_tXMLRPCOpenDAS_14[6];

								} else {
									row12.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[7] != null) {
									row12.send_out = (String) results_tXMLRPCOpenDAS_14[7];

								} else {
									row12.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[8] != null) {
									row12.from_out = (String) results_tXMLRPCOpenDAS_14[8];

								} else {
									row12.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[9] != null) {
									row12.sendedDate_out = (Date) results_tXMLRPCOpenDAS_14[9];

								} else {
									row12.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[10] != null) {
									row12.attachement_out = (Object) results_tXMLRPCOpenDAS_14[10];

								} else {
									row12.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[11] != null) {
									row12.station_out = (String) results_tXMLRPCOpenDAS_14[11];

								} else {
									row12.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_14++;

							/**
							 * [tXMLRPCOpenDAS_14 main ] stop
							 */
							// Start of branch "row12"
							if (row12 != null) {

								/**
								 * [tMomObjectOutput_12 main ] start
								 */

								currentComponent = "tMomObjectOutput_12";

								System.out.println("attachement :"
										+ row12.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row12.title);
								previousRequest.setSendUrl(row12.sendUrl);
								previousRequest.setFromUrl(row12.fromUrl);
								previousRequest.setSendedDate(row12.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row12.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row12.title_out);
								response.setSendedDate(row12.sendedDate_out);
								response.setAttachement((java.io.Serializable) row12.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_12 = session_tMomObjectOutput_12
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_12.setObject(response);
								message_tMomObjectOutput_12.setStringProperty(
										"Sujet", row12.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_12 = session_tMomObjectOutput_12
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_12 = session_tMomObjectOutput_12
										.createProducer(des_tMomObjectOutput_12);
								producer_tMomObjectOutput_12
										.send(message_tMomObjectOutput_12);

								tos_count_tMomObjectOutput_12++;

								/**
								 * [tMomObjectOutput_12 main ] stop
								 */

							} // End of branch "row12"

						} // End of branch "poste"

						// Start of branch "dossier"
						if (dossier != null) {

							/**
							 * [tXMLRPCOpenDAS_15 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_15";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_15 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_15 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_15 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_15);
							}

							consoleOut_tXMLRPCOpenDAS_15
									.println("tXMLRPCOpenDAS_15"
											+ " received parameters : "
											+ dossier.toString());
							consoleOut_tXMLRPCOpenDAS_15.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_15 = dossier.title;
							String sendUrl_tXMLRPCOpenDAS_15 = dossier.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_15 = dossier.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_15 = dossier.sendedDate;
							String station_tXMLRPCOpenDAS_15 = dossier.station;
							java.util.Map checkingMap = (java.util.Map) dossier.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
								if ("poste".equals(tab[i])) {
									vals.put("workcenter", checkingMap
											.get(tab[i]));
								}
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_15 = null;
							String sendUrl_out_tXMLRPCOpenDAS_15 = null;
							String fromUrl_out_tXMLRPCOpenDAS_15 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_15 = null;
							String station_out_tXMLRPCOpenDAS_15 = null;
							Object attachement_out_tXMLRPCOpenDAS_15 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_15
										.println("tXMLRPCOpenDAS_15"
												+ " Connexion ASPerpgi ");
								consoleOut_tXMLRPCOpenDAS_15.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_15 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameASPerpgi,
										context.usernameASPerpgi,
										context.pwdASPerpgi,
										context.hostASPerpgi,
										context.portASPerpgi);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_15
										.println("tXMLRPCOpenDAS_15"
												+ " XMLRpc : " + "hr.employee"
												+ " "
												+ "talend_get_workcenter_line");
								consoleOut_tXMLRPCOpenDAS_15.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_15 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_15
										.exec("hr.employee",
												"talend_get_workcenter_line",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_15 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_15 : "
													+ responsetXMLRPCOpenDAS_15);
									result.setCode(responsetXMLRPCOpenDAS_15
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_15
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_15
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_15
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("parent_id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("parent_id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("parent_id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCodeDependency((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_15 = {
									title_tXMLRPCOpenDAS_15,
									sendUrl_tXMLRPCOpenDAS_15,
									fromUrl_tXMLRPCOpenDAS_15,
									sendedDate_tXMLRPCOpenDAS_15,
									dossier.attachement,
									station_tXMLRPCOpenDAS_15,
									title_out_tXMLRPCOpenDAS_15,
									sendUrl_out_tXMLRPCOpenDAS_15,
									fromUrl_out_tXMLRPCOpenDAS_15,
									sendedDate_out_tXMLRPCOpenDAS_15, result,
									station_out_tXMLRPCOpenDAS_15 };

							for (int i_tXMLRPCOpenDAS_15 = 0; i_tXMLRPCOpenDAS_15 < results_tXMLRPCOpenDAS_15.length; i_tXMLRPCOpenDAS_15++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[0] != null) {
									row13.title = (String) results_tXMLRPCOpenDAS_15[0];

								} else {
									row13.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[1] != null) {
									row13.sendUrl = (String) results_tXMLRPCOpenDAS_15[1];

								} else {
									row13.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[2] != null) {
									row13.fromUrl = (String) results_tXMLRPCOpenDAS_15[2];

								} else {
									row13.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[3] != null) {
									row13.sendedDate = (Date) results_tXMLRPCOpenDAS_15[3];

								} else {
									row13.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[4] != null) {
									row13.attachement = (Object) results_tXMLRPCOpenDAS_15[4];

								} else {
									row13.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[5] != null) {
									row13.station = (String) results_tXMLRPCOpenDAS_15[5];

								} else {
									row13.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[6] != null) {
									row13.title_out = (String) results_tXMLRPCOpenDAS_15[6];

								} else {
									row13.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[7] != null) {
									row13.send_out = (String) results_tXMLRPCOpenDAS_15[7];

								} else {
									row13.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[8] != null) {
									row13.from_out = (String) results_tXMLRPCOpenDAS_15[8];

								} else {
									row13.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[9] != null) {
									row13.sendedDate_out = (Date) results_tXMLRPCOpenDAS_15[9];

								} else {
									row13.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[10] != null) {
									row13.attachement_out = (Object) results_tXMLRPCOpenDAS_15[10];

								} else {
									row13.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[11] != null) {
									row13.station_out = (String) results_tXMLRPCOpenDAS_15[11];

								} else {
									row13.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_15++;

							/**
							 * [tXMLRPCOpenDAS_15 main ] stop
							 */
							// Start of branch "row13"
							if (row13 != null) {

								/**
								 * [tMomObjectOutput_13 main ] start
								 */

								currentComponent = "tMomObjectOutput_13";

								System.out.println("attachement :"
										+ row13.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row13.title);
								previousRequest.setSendUrl(row13.sendUrl);
								previousRequest.setFromUrl(row13.fromUrl);
								previousRequest.setSendedDate(row13.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row13.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row13.title_out);
								response.setSendedDate(row13.sendedDate_out);
								response.setAttachement((java.io.Serializable) row13.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_13 = session_tMomObjectOutput_13
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_13.setObject(response);
								message_tMomObjectOutput_13.setStringProperty(
										"Sujet", row13.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_13 = session_tMomObjectOutput_13
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_13 = session_tMomObjectOutput_13
										.createProducer(des_tMomObjectOutput_13);
								producer_tMomObjectOutput_13
										.send(message_tMomObjectOutput_13);

								tos_count_tMomObjectOutput_13++;

								/**
								 * [tMomObjectOutput_13 main ] stop
								 */

							} // End of branch "row13"

						} // End of branch "dossier"

						// Start of branch "mrp_production"
						if (mrp_production != null) {

							/**
							 * [tXMLRPCOpenDAS_17 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_17";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_17 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_17 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_17 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_17);
							}

							consoleOut_tXMLRPCOpenDAS_17
									.println("tXMLRPCOpenDAS_17"
											+ " received parameters : "
											+ mrp_production.toString());
							consoleOut_tXMLRPCOpenDAS_17.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_17 = mrp_production.title;
							String sendUrl_tXMLRPCOpenDAS_17 = mrp_production.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_17 = mrp_production.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_17 = mrp_production.sendedDate;
							String station_tXMLRPCOpenDAS_17 = mrp_production.station;
							java.util.Map checkingMap = (java.util.Map) mrp_production.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_17 = null;
							String sendUrl_out_tXMLRPCOpenDAS_17 = null;
							String fromUrl_out_tXMLRPCOpenDAS_17 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_17 = null;
							String station_out_tXMLRPCOpenDAS_17 = null;
							Object attachement_out_tXMLRPCOpenDAS_17 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_17
										.println("tXMLRPCOpenDAS_17"
												+ " Connexion ASPerpgi ");
								consoleOut_tXMLRPCOpenDAS_17.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_17 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameASPerpgi,
										context.usernameASPerpgi,
										context.pwdASPerpgi,
										context.hostASPerpgi,
										context.portASPerpgi);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								context_search_tmp.add(new Object[] { "id",
										"<", "3300" });
								context_search_tmp.add(new Object[] { "id",
										">", "3100" });

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_17
										.println("tXMLRPCOpenDAS_17"
												+ " XMLRpc : "
												+ "mrp.production" + " "
												+ "talend_get_mrp_production");
								consoleOut_tXMLRPCOpenDAS_17.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_17 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_17
										.exec("mrp.production",
												"talend_get_mrp_production",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_17 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_17 : "
													+ responsetXMLRPCOpenDAS_17);
									result.setCode(responsetXMLRPCOpenDAS_17
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_17
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_17
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_17
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_17 = {
									title_tXMLRPCOpenDAS_17,
									sendUrl_tXMLRPCOpenDAS_17,
									fromUrl_tXMLRPCOpenDAS_17,
									sendedDate_tXMLRPCOpenDAS_17,
									mrp_production.attachement,
									station_tXMLRPCOpenDAS_17,
									title_out_tXMLRPCOpenDAS_17,
									sendUrl_out_tXMLRPCOpenDAS_17,
									fromUrl_out_tXMLRPCOpenDAS_17,
									sendedDate_out_tXMLRPCOpenDAS_17, result,
									station_out_tXMLRPCOpenDAS_17 };

							for (int i_tXMLRPCOpenDAS_17 = 0; i_tXMLRPCOpenDAS_17 < results_tXMLRPCOpenDAS_17.length; i_tXMLRPCOpenDAS_17++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[0] != null) {
									row14.title = (String) results_tXMLRPCOpenDAS_17[0];

								} else {
									row14.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[1] != null) {
									row14.sendUrl = (String) results_tXMLRPCOpenDAS_17[1];

								} else {
									row14.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[2] != null) {
									row14.fromUrl = (String) results_tXMLRPCOpenDAS_17[2];

								} else {
									row14.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[3] != null) {
									row14.sendedDate = (Date) results_tXMLRPCOpenDAS_17[3];

								} else {
									row14.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[4] != null) {
									row14.attachement = (Object) results_tXMLRPCOpenDAS_17[4];

								} else {
									row14.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[5] != null) {
									row14.station = (String) results_tXMLRPCOpenDAS_17[5];

								} else {
									row14.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[6] != null) {
									row14.title_out = (String) results_tXMLRPCOpenDAS_17[6];

								} else {
									row14.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[7] != null) {
									row14.sendUrl_out = (String) results_tXMLRPCOpenDAS_17[7];

								} else {
									row14.sendUrl_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[8] != null) {
									row14.fromUrl_out = (String) results_tXMLRPCOpenDAS_17[8];

								} else {
									row14.fromUrl_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[9] != null) {
									row14.sendedDate_out = (Date) results_tXMLRPCOpenDAS_17[9];

								} else {
									row14.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[10] != null) {
									row14.attachement_out = (Object) results_tXMLRPCOpenDAS_17[10];

								} else {
									row14.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[11] != null) {
									row14.station_out = (String) results_tXMLRPCOpenDAS_17[11];

								} else {
									row14.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_17++;

							/**
							 * [tXMLRPCOpenDAS_17 main ] stop
							 */
							// Start of branch "row14"
							if (row14 != null) {

								/**
								 * [tMomObjectOutput_14 main ] start
								 */

								currentComponent = "tMomObjectOutput_14";

								System.out.println("attachement :"
										+ row14.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row14.title);
								previousRequest.setSendUrl(row14.sendUrl);
								previousRequest.setFromUrl(row14.fromUrl);
								previousRequest.setSendedDate(row14.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row14.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row14.title_out);
								response.setSendedDate(row14.sendedDate_out);
								response.setAttachement((java.io.Serializable) row14.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_14 = session_tMomObjectOutput_14
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_14.setObject(response);
								message_tMomObjectOutput_14.setStringProperty(
										"Sujet", row14.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_14 = session_tMomObjectOutput_14
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_14 = session_tMomObjectOutput_14
										.createProducer(des_tMomObjectOutput_14);
								producer_tMomObjectOutput_14
										.send(message_tMomObjectOutput_14);

								tos_count_tMomObjectOutput_14++;

								/**
								 * [tMomObjectOutput_14 main ] stop
								 */

							} // End of branch "row14"

						} // End of branch "mrp_production"

						// Start of branch "bl_asperpgi"
						if (bl_asperpgi != null) {

							/**
							 * [tXMLRPCOpenDAS_7 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_7";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_7 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_7 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_7 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_7);
							}

							consoleOut_tXMLRPCOpenDAS_7
									.println("tXMLRPCOpenDAS_7"
											+ " received parameters : "
											+ bl_asperpgi.toString());
							consoleOut_tXMLRPCOpenDAS_7.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_7 = bl_asperpgi.title;
							String sendUrl_tXMLRPCOpenDAS_7 = bl_asperpgi.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_7 = bl_asperpgi.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_7 = bl_asperpgi.sendedDate;
							String station_tXMLRPCOpenDAS_7 = bl_asperpgi.station;
							java.util.Map checkingMap = (java.util.Map) bl_asperpgi.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_7 = null;
							String sendUrl_out_tXMLRPCOpenDAS_7 = null;
							String fromUrl_out_tXMLRPCOpenDAS_7 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_7 = null;
							String station_out_tXMLRPCOpenDAS_7 = null;
							Object attachement_out_tXMLRPCOpenDAS_7 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_7
										.println("tXMLRPCOpenDAS_7"
												+ " Connexion ASPerpgi ");
								consoleOut_tXMLRPCOpenDAS_7.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_7 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameASPerpgi,
										context.usernameASPerpgi,
										context.pwdASPerpgi,
										context.hostASPerpgi,
										context.portASPerpgi);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								context_search_tmp.add(new Object[] { "state",
										"=", "follow" });

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_7
										.println("tXMLRPCOpenDAS_7"
												+ " XMLRpc : "
												+ "stock.picking" + " "
												+ "talend_get_picking");
								consoleOut_tXMLRPCOpenDAS_7.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_7 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_7
										.exec("stock.picking",
												"talend_get_picking", vals,
												context_search);
								if (responsetXMLRPCOpenDAS_7 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_7 : "
													+ responsetXMLRPCOpenDAS_7);
									result.setCode(responsetXMLRPCOpenDAS_7
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_7
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_7
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_7
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_7 = {
									title_tXMLRPCOpenDAS_7,
									sendUrl_tXMLRPCOpenDAS_7,
									fromUrl_tXMLRPCOpenDAS_7,
									sendedDate_tXMLRPCOpenDAS_7,
									bl_asperpgi.attachement,
									station_tXMLRPCOpenDAS_7,
									title_out_tXMLRPCOpenDAS_7,
									sendUrl_out_tXMLRPCOpenDAS_7,
									fromUrl_out_tXMLRPCOpenDAS_7,
									sendedDate_out_tXMLRPCOpenDAS_7, result,
									station_out_tXMLRPCOpenDAS_7 };

							for (int i_tXMLRPCOpenDAS_7 = 0; i_tXMLRPCOpenDAS_7 < results_tXMLRPCOpenDAS_7.length; i_tXMLRPCOpenDAS_7++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[0] != null) {
									row15.title = (String) results_tXMLRPCOpenDAS_7[0];

								} else {
									row15.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[1] != null) {
									row15.sendUrl = (String) results_tXMLRPCOpenDAS_7[1];

								} else {
									row15.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[2] != null) {
									row15.fromUrl = (String) results_tXMLRPCOpenDAS_7[2];

								} else {
									row15.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[3] != null) {
									row15.sendedDate = (Date) results_tXMLRPCOpenDAS_7[3];

								} else {
									row15.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[4] != null) {
									row15.attachement = (Object) results_tXMLRPCOpenDAS_7[4];

								} else {
									row15.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[5] != null) {
									row15.station = (String) results_tXMLRPCOpenDAS_7[5];

								} else {
									row15.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[6] != null) {
									row15.title_out = (String) results_tXMLRPCOpenDAS_7[6];

								} else {
									row15.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[7] != null) {
									row15.send_out = (String) results_tXMLRPCOpenDAS_7[7];

								} else {
									row15.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[8] != null) {
									row15.from_out = (String) results_tXMLRPCOpenDAS_7[8];

								} else {
									row15.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[9] != null) {
									row15.sendedDate_out = (Date) results_tXMLRPCOpenDAS_7[9];

								} else {
									row15.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[10] != null) {
									row15.attachement_out = (Object) results_tXMLRPCOpenDAS_7[10];

								} else {
									row15.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_7.length
										&& results_tXMLRPCOpenDAS_7[11] != null) {
									row15.station_out = (String) results_tXMLRPCOpenDAS_7[11];

								} else {
									row15.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_7++;

							/**
							 * [tXMLRPCOpenDAS_7 main ] stop
							 */
							// Start of branch "row15"
							if (row15 != null) {

								/**
								 * [tMomObjectOutput_18 main ] start
								 */

								currentComponent = "tMomObjectOutput_18";

								System.out.println("attachement :"
										+ row15.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row15.title);
								previousRequest.setSendUrl(row15.sendUrl);
								previousRequest.setFromUrl(row15.fromUrl);
								previousRequest.setSendedDate(row15.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row15.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row15.title_out);
								response.setSendedDate(row15.sendedDate_out);
								response.setAttachement((java.io.Serializable) row15.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_18 = session_tMomObjectOutput_18
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_18.setObject(response);
								message_tMomObjectOutput_18.setStringProperty(
										"Sujet", row15.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_18 = session_tMomObjectOutput_18
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_18 = session_tMomObjectOutput_18
										.createProducer(des_tMomObjectOutput_18);
								producer_tMomObjectOutput_18
										.send(message_tMomObjectOutput_18);

								tos_count_tMomObjectOutput_18++;

								/**
								 * [tMomObjectOutput_18 main ] stop
								 */

							} // End of branch "row15"

						} // End of branch "bl_asperpgi"

					} // End of branch "getWsGenericsExt"

					/**
					 * [tMomObjectInput_1 end ] start
					 */

					currentComponent = "tMomObjectInput_1";

				}
				System.out.println("Closing connection");
				consumer_tMomObjectInput_1.close();
				session_tMomObjectInput_1.close();
				connection_tMomObjectInput_1.close();

				ok_Hash.put("tMomObjectInput_1", true);
				end_Hash.put("tMomObjectInput_1", System.currentTimeMillis());

				/**
				 * [tMomObjectInput_1 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tMap_179 end ] start
				 */

				currentComponent = "tMap_179";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_179", true);
				end_Hash.put("tMap_179", System.currentTimeMillis());

				/**
				 * [tMap_179 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_16 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_16";

				ok_Hash.put("tXMLRPCOpenDAS_16", true);
				end_Hash.put("tXMLRPCOpenDAS_16", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_16 end ] stop
				 */

				/**
				 * [tMomObjectOutput_82 end ] start
				 */

				currentComponent = "tMomObjectOutput_82";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_82.close();
				session_tMomObjectOutput_82.close();
				connection_tMomObjectOutput_82.close();

				ok_Hash.put("tMomObjectOutput_82", true);
				end_Hash.put("tMomObjectOutput_82", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_82 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_4 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_4";

				ok_Hash.put("tXMLRPCOpenDAS_4", true);
				end_Hash.put("tXMLRPCOpenDAS_4", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_4 end ] stop
				 */

				/**
				 * [tMomObjectOutput_64 end ] start
				 */

				currentComponent = "tMomObjectOutput_64";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_64.close();
				session_tMomObjectOutput_64.close();
				connection_tMomObjectOutput_64.close();

				ok_Hash.put("tMomObjectOutput_64", true);
				end_Hash.put("tMomObjectOutput_64", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_64 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_3 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_3";

				ok_Hash.put("tXMLRPCOpenDAS_3", true);
				end_Hash.put("tXMLRPCOpenDAS_3", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_3 end ] stop
				 */

				/**
				 * [tMomObjectOutput_9 end ] start
				 */

				currentComponent = "tMomObjectOutput_9";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_9.close();
				session_tMomObjectOutput_9.close();
				connection_tMomObjectOutput_9.close();

				ok_Hash.put("tMomObjectOutput_9", true);
				end_Hash.put("tMomObjectOutput_9", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_9 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_6 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_6";

				ok_Hash.put("tXMLRPCOpenDAS_6", true);
				end_Hash.put("tXMLRPCOpenDAS_6", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_6 end ] stop
				 */

				/**
				 * [tMomObjectOutput_19 end ] start
				 */

				currentComponent = "tMomObjectOutput_19";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_19.close();
				session_tMomObjectOutput_19.close();
				connection_tMomObjectOutput_19.close();

				ok_Hash.put("tMomObjectOutput_19", true);
				end_Hash.put("tMomObjectOutput_19", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_19 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_8 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_8";

				ok_Hash.put("tXMLRPCOpenDAS_8", true);
				end_Hash.put("tXMLRPCOpenDAS_8", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_8 end ] stop
				 */

				/**
				 * [tMomObjectOutput_20 end ] start
				 */

				currentComponent = "tMomObjectOutput_20";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_20.close();
				session_tMomObjectOutput_20.close();
				connection_tMomObjectOutput_20.close();

				ok_Hash.put("tMomObjectOutput_20", true);
				end_Hash.put("tMomObjectOutput_20", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_20 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_9 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_9";

				ok_Hash.put("tXMLRPCOpenDAS_9", true);
				end_Hash.put("tXMLRPCOpenDAS_9", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_9 end ] stop
				 */

				/**
				 * [tMomObjectOutput_30 end ] start
				 */

				currentComponent = "tMomObjectOutput_30";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_30.close();
				session_tMomObjectOutput_30.close();
				connection_tMomObjectOutput_30.close();

				ok_Hash.put("tMomObjectOutput_30", true);
				end_Hash.put("tMomObjectOutput_30", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_30 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_10 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_10";

				ok_Hash.put("tXMLRPCOpenDAS_10", true);
				end_Hash.put("tXMLRPCOpenDAS_10", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_10 end ] stop
				 */

				/**
				 * [tMomObjectOutput_7 end ] start
				 */

				currentComponent = "tMomObjectOutput_7";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_7.close();
				session_tMomObjectOutput_7.close();
				connection_tMomObjectOutput_7.close();

				ok_Hash.put("tMomObjectOutput_7", true);
				end_Hash.put("tMomObjectOutput_7", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_7 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_1 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_1";

				ok_Hash.put("tXMLRPCOpenDAS_1", true);
				end_Hash.put("tXMLRPCOpenDAS_1", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_1 end ] stop
				 */

				/**
				 * [tMomObjectOutput_6 end ] start
				 */

				currentComponent = "tMomObjectOutput_6";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_6.close();
				session_tMomObjectOutput_6.close();
				connection_tMomObjectOutput_6.close();

				ok_Hash.put("tMomObjectOutput_6", true);
				end_Hash.put("tMomObjectOutput_6", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_6 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_11 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_11";

				ok_Hash.put("tXMLRPCOpenDAS_11", true);
				end_Hash.put("tXMLRPCOpenDAS_11", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_11 end ] stop
				 */

				/**
				 * [tMomObjectOutput_15 end ] start
				 */

				currentComponent = "tMomObjectOutput_15";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_15.close();
				session_tMomObjectOutput_15.close();
				connection_tMomObjectOutput_15.close();

				ok_Hash.put("tMomObjectOutput_15", true);
				end_Hash.put("tMomObjectOutput_15", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_15 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_12 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_12";

				ok_Hash.put("tXMLRPCOpenDAS_12", true);
				end_Hash.put("tXMLRPCOpenDAS_12", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_12 end ] stop
				 */

				/**
				 * [tMomObjectOutput_16 end ] start
				 */

				currentComponent = "tMomObjectOutput_16";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_16.close();
				session_tMomObjectOutput_16.close();
				connection_tMomObjectOutput_16.close();

				ok_Hash.put("tMomObjectOutput_16", true);
				end_Hash.put("tMomObjectOutput_16", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_16 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_13 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_13";

				ok_Hash.put("tXMLRPCOpenDAS_13", true);
				end_Hash.put("tXMLRPCOpenDAS_13", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_13 end ] stop
				 */

				/**
				 * [tMomObjectOutput_11 end ] start
				 */

				currentComponent = "tMomObjectOutput_11";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_11.close();
				session_tMomObjectOutput_11.close();
				connection_tMomObjectOutput_11.close();

				ok_Hash.put("tMomObjectOutput_11", true);
				end_Hash.put("tMomObjectOutput_11", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_11 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_14 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_14";

				ok_Hash.put("tXMLRPCOpenDAS_14", true);
				end_Hash.put("tXMLRPCOpenDAS_14", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_14 end ] stop
				 */

				/**
				 * [tMomObjectOutput_12 end ] start
				 */

				currentComponent = "tMomObjectOutput_12";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_12.close();
				session_tMomObjectOutput_12.close();
				connection_tMomObjectOutput_12.close();

				ok_Hash.put("tMomObjectOutput_12", true);
				end_Hash.put("tMomObjectOutput_12", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_12 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_15 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_15";

				ok_Hash.put("tXMLRPCOpenDAS_15", true);
				end_Hash.put("tXMLRPCOpenDAS_15", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_15 end ] stop
				 */

				/**
				 * [tMomObjectOutput_13 end ] start
				 */

				currentComponent = "tMomObjectOutput_13";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_13.close();
				session_tMomObjectOutput_13.close();
				connection_tMomObjectOutput_13.close();

				ok_Hash.put("tMomObjectOutput_13", true);
				end_Hash.put("tMomObjectOutput_13", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_13 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_17 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_17";

				ok_Hash.put("tXMLRPCOpenDAS_17", true);
				end_Hash.put("tXMLRPCOpenDAS_17", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_17 end ] stop
				 */

				/**
				 * [tMomObjectOutput_14 end ] start
				 */

				currentComponent = "tMomObjectOutput_14";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_14.close();
				session_tMomObjectOutput_14.close();
				connection_tMomObjectOutput_14.close();

				ok_Hash.put("tMomObjectOutput_14", true);
				end_Hash.put("tMomObjectOutput_14", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_14 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_7 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_7";

				ok_Hash.put("tXMLRPCOpenDAS_7", true);
				end_Hash.put("tXMLRPCOpenDAS_7", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_7 end ] stop
				 */

				/**
				 * [tMomObjectOutput_18 end ] start
				 */

				currentComponent = "tMomObjectOutput_18";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_18.close();
				session_tMomObjectOutput_18.close();
				connection_tMomObjectOutput_18.close();

				ok_Hash.put("tMomObjectOutput_18", true);
				end_Hash.put("tMomObjectOutput_18", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_18 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (Error error) {

			throw new Error(error);

		}

		globalMap.put("tMomObjectInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal threadLocal = new ThreadLocal();
	{
		java.util.Map threadRunResultMap = new java.util.HashMap();
		threadRunResultMap.put("errorCode", null);
		threadRunResultMap.put("status", "");
		threadLocal.set(threadRunResultMap);
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final GET GETClass = new GET();

		int exitCode = GETClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = GET.class.getClassLoader()
					.getResourceAsStream(
							"opendas/get_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

			context.adresseOpenERP = (String) context
					.getProperty("adresseOpenERP");

			context.MAGdbname = (String) context.getProperty("MAGdbname");

			context.MAGhost = (String) context.getProperty("MAGhost");

			context.MAGport = (String) context.getProperty("MAGport");

			context.MAGpwd = (String) context.getProperty("MAGpwd");

			context.MAGuid = (String) context.getProperty("MAGuid");

			context.MAGusername = (String) context.getProperty("MAGusername");

			context.adresseActiveMQ = (String) context
					.getProperty("adresseActiveMQ");

			context.dbname = (String) context.getProperty("dbname");

			context.dbnameASPerpgi = (String) context
					.getProperty("dbnameASPerpgi");

			context.destinataireClientActiveMQ = (String) context
					.getProperty("destinataireClientActiveMQ");

			context.destinataireServeurActiveMQ = (String) context
					.getProperty("destinataireServeurActiveMQ");

			context.expediteurActiveMQ = (String) context
					.getProperty("expediteurActiveMQ");

			context.host = (String) context.getProperty("host");

			context.hostASPerpgi = (String) context.getProperty("hostASPerpgi");

			context.port = (String) context.getProperty("port");

			context.portActiveMQ = (String) context.getProperty("portActiveMQ");

			context.portASPerpgi = (String) context.getProperty("portASPerpgi");

			context.pwd = (String) context.getProperty("pwd");

			context.pwdASPerpgi = (String) context.getProperty("pwdASPerpgi");

			context.station = (String) context.getProperty("station");

			context.uid = (String) context.getProperty("uid");

			context.username = (String) context.getProperty("username");

			context.usernameASPerpgi = (String) context
					.getProperty("usernameASPerpgi");

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("adresseOpenERP")) {
				context.adresseOpenERP = (String) parentContextMap
						.get("adresseOpenERP");
			}
			if (parentContextMap.containsKey("MAGdbname")) {
				context.MAGdbname = (String) parentContextMap.get("MAGdbname");
			}
			if (parentContextMap.containsKey("MAGhost")) {
				context.MAGhost = (String) parentContextMap.get("MAGhost");
			}
			if (parentContextMap.containsKey("MAGport")) {
				context.MAGport = (String) parentContextMap.get("MAGport");
			}
			if (parentContextMap.containsKey("MAGpwd")) {
				context.MAGpwd = (String) parentContextMap.get("MAGpwd");
			}
			if (parentContextMap.containsKey("MAGuid")) {
				context.MAGuid = (String) parentContextMap.get("MAGuid");
			}
			if (parentContextMap.containsKey("MAGusername")) {
				context.MAGusername = (String) parentContextMap
						.get("MAGusername");
			}
			if (parentContextMap.containsKey("adresseActiveMQ")) {
				context.adresseActiveMQ = (String) parentContextMap
						.get("adresseActiveMQ");
			}
			if (parentContextMap.containsKey("dbname")) {
				context.dbname = (String) parentContextMap.get("dbname");
			}
			if (parentContextMap.containsKey("dbnameASPerpgi")) {
				context.dbnameASPerpgi = (String) parentContextMap
						.get("dbnameASPerpgi");
			}
			if (parentContextMap.containsKey("destinataireClientActiveMQ")) {
				context.destinataireClientActiveMQ = (String) parentContextMap
						.get("destinataireClientActiveMQ");
			}
			if (parentContextMap.containsKey("destinataireServeurActiveMQ")) {
				context.destinataireServeurActiveMQ = (String) parentContextMap
						.get("destinataireServeurActiveMQ");
			}
			if (parentContextMap.containsKey("expediteurActiveMQ")) {
				context.expediteurActiveMQ = (String) parentContextMap
						.get("expediteurActiveMQ");
			}
			if (parentContextMap.containsKey("host")) {
				context.host = (String) parentContextMap.get("host");
			}
			if (parentContextMap.containsKey("hostASPerpgi")) {
				context.hostASPerpgi = (String) parentContextMap
						.get("hostASPerpgi");
			}
			if (parentContextMap.containsKey("port")) {
				context.port = (String) parentContextMap.get("port");
			}
			if (parentContextMap.containsKey("portActiveMQ")) {
				context.portActiveMQ = (String) parentContextMap
						.get("portActiveMQ");
			}
			if (parentContextMap.containsKey("portASPerpgi")) {
				context.portASPerpgi = (String) parentContextMap
						.get("portASPerpgi");
			}
			if (parentContextMap.containsKey("pwd")) {
				context.pwd = (String) parentContextMap.get("pwd");
			}
			if (parentContextMap.containsKey("pwdASPerpgi")) {
				context.pwdASPerpgi = (String) parentContextMap
						.get("pwdASPerpgi");
			}
			if (parentContextMap.containsKey("station")) {
				context.station = (String) parentContextMap.get("station");
			}
			if (parentContextMap.containsKey("uid")) {
				context.uid = (String) parentContextMap.get("uid");
			}
			if (parentContextMap.containsKey("username")) {
				context.username = (String) parentContextMap.get("username");
			}
			if (parentContextMap.containsKey("usernameASPerpgi")) {
				context.usernameASPerpgi = (String) parentContextMap
						.get("usernameASPerpgi");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			status = "end";
		} catch (TalendException e_tFileInputDelimited_1) {
			status = "failure";
			e_tFileInputDelimited_1.printStackTrace();
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

		} finally {
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : GET");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				context_param.put(keyValue.substring(0, index), keyValue
						.substring(index + 1));
			}
		}

	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 503028 characters generated by Talend Open Studio on the 26 août 2014
 * 14:44:56 CEST
 ************************************************************************************************/
