// ============================================================================
//
// Copyright (c) 2005-2010, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio
// / JobDesigner (CodeGenerator version 4.2.1.r60995)
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package opendas.set_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

/**
 * Job: SET Purpose: <br>
 * Description: <br>
 * 
 * @author halgandd@asperience.fr
 * @version 4.2.1.r60995
 * @status
 */
public class SET implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (adresseOpenERP != null) {

				this.setProperty("adresseOpenERP", adresseOpenERP.toString());

			}

			if (MAGdbname != null) {

				this.setProperty("MAGdbname", MAGdbname.toString());

			}

			if (MAGhost != null) {

				this.setProperty("MAGhost", MAGhost.toString());

			}

			if (MAGport != null) {

				this.setProperty("MAGport", MAGport.toString());

			}

			if (MAGpwd != null) {

				this.setProperty("MAGpwd", MAGpwd.toString());

			}

			if (MAGuid != null) {

				this.setProperty("MAGuid", MAGuid.toString());

			}

			if (MAGusername != null) {

				this.setProperty("MAGusername", MAGusername.toString());

			}

			if (adresseActiveMQ != null) {

				this.setProperty("adresseActiveMQ", adresseActiveMQ.toString());

			}

			if (dbname != null) {

				this.setProperty("dbname", dbname.toString());

			}

			if (dbnameASPerpgi != null) {

				this.setProperty("dbnameASPerpgi", dbnameASPerpgi.toString());

			}

			if (destinataireClientActiveMQ != null) {

				this.setProperty("destinataireClientActiveMQ",
						destinataireClientActiveMQ.toString());

			}

			if (destinataireServeurActiveMQ != null) {

				this.setProperty("destinataireServeurActiveMQ",
						destinataireServeurActiveMQ.toString());

			}

			if (expediteurActiveMQ != null) {

				this.setProperty("expediteurActiveMQ", expediteurActiveMQ
						.toString());

			}

			if (host != null) {

				this.setProperty("host", host.toString());

			}

			if (hostASPerpgi != null) {

				this.setProperty("hostASPerpgi", hostASPerpgi.toString());

			}

			if (port != null) {

				this.setProperty("port", port.toString());

			}

			if (portActiveMQ != null) {

				this.setProperty("portActiveMQ", portActiveMQ.toString());

			}

			if (portASPerpgi != null) {

				this.setProperty("portASPerpgi", portASPerpgi.toString());

			}

			if (pwd != null) {

				this.setProperty("pwd", pwd.toString());

			}

			if (pwdASPerpgi != null) {

				this.setProperty("pwdASPerpgi", pwdASPerpgi.toString());

			}

			if (station != null) {

				this.setProperty("station", station.toString());

			}

			if (uid != null) {

				this.setProperty("uid", uid.toString());

			}

			if (username != null) {

				this.setProperty("username", username.toString());

			}

			if (usernameASPerpgi != null) {

				this.setProperty("usernameASPerpgi", usernameASPerpgi
						.toString());

			}

		}

		public String adresseOpenERP;

		public String getAdresseOpenERP() {
			return this.adresseOpenERP;
		}

		public String MAGdbname;

		public String getMAGdbname() {
			return this.MAGdbname;
		}

		public String MAGhost;

		public String getMAGhost() {
			return this.MAGhost;
		}

		public String MAGport;

		public String getMAGport() {
			return this.MAGport;
		}

		public String MAGpwd;

		public String getMAGpwd() {
			return this.MAGpwd;
		}

		public String MAGuid;

		public String getMAGuid() {
			return this.MAGuid;
		}

		public String MAGusername;

		public String getMAGusername() {
			return this.MAGusername;
		}

		public String adresseActiveMQ;

		public String getAdresseActiveMQ() {
			return this.adresseActiveMQ;
		}

		public String dbname;

		public String getDbname() {
			return this.dbname;
		}

		public String dbnameASPerpgi;

		public String getDbnameASPerpgi() {
			return this.dbnameASPerpgi;
		}

		public String destinataireClientActiveMQ;

		public String getDestinataireClientActiveMQ() {
			return this.destinataireClientActiveMQ;
		}

		public String destinataireServeurActiveMQ;

		public String getDestinataireServeurActiveMQ() {
			return this.destinataireServeurActiveMQ;
		}

		public String expediteurActiveMQ;

		public String getExpediteurActiveMQ() {
			return this.expediteurActiveMQ;
		}

		public String host;

		public String getHost() {
			return this.host;
		}

		public String hostASPerpgi;

		public String getHostASPerpgi() {
			return this.hostASPerpgi;
		}

		public String port;

		public String getPort() {
			return this.port;
		}

		public String portActiveMQ;

		public String getPortActiveMQ() {
			return this.portActiveMQ;
		}

		public String portASPerpgi;

		public String getPortASPerpgi() {
			return this.portASPerpgi;
		}

		public String pwd;

		public String getPwd() {
			return this.pwd;
		}

		public String pwdASPerpgi;

		public String getPwdASPerpgi() {
			return this.pwdASPerpgi;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String uid;

		public String getUid() {
			return this.uid;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String usernameASPerpgi;

		public String getUsernameASPerpgi() {
			return this.usernameASPerpgi;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "SET";
	private final String projectName = "OPENDAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception = null;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {
		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					SET.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(SET.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tContextLoad_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tContextLoad_1", System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tMomObjectOutput_SubjectList_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_SubjectList_1", System
				.currentTimeMillis());

		tMomObjectOutput_SubjectList_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tMomObjectInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectInput_1", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMap_179_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_179", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_3", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_40_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_40", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_1", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_63_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_63", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_5", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_11_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_11", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_6", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_7", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_7", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_8", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_8", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_5", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_9_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_9", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_6", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_10_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_10", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_9_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_9", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_12_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_12", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_10_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_10", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tXMLRPCOpenDAS_14_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tXMLRPCOpenDAS_14", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMomObjectOutput_12_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMomObjectOutput_12", System.currentTimeMillis());

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tMomObjectOutput_SubjectList_1_onSubJobError(
			Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tMomObjectInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String Column0;

		public String getColumn0() {
			return this.Column0;
		}

		public String Column1;

		public String getColumn1() {
			return this.Column1;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.Column0 = readString(dis);

					this.Column1 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Column0, dos);

				// String

				writeString(this.Column1, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Column0=" + Column0);
			sb.append(",Column1=" + Column1);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tContextLoad_1 begin ] start
				 */

				ok_Hash.put("tContextLoad_1", false);
				start_Hash.put("tContextLoad_1", System.currentTimeMillis());
				currentComponent = "tContextLoad_1";

				int tos_count_tContextLoad_1 = 0;
				java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_1 = 0;

				/**
				 * [tContextLoad_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System
						.currentTimeMillis());
				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {
					fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
							"/home/opendas/workspace/opendas/talend/config/SET.conf",
							"ISO-8859-15", ";", "\n", true, 0, 0, -1, -1, false);
					while (fid_tFileInputDelimited_1.nextRecord()) {
						row1 = null;
						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							row1.Column0 = fid_tFileInputDelimited_1.get(0);
							row1.Column1 = fid_tFileInputDelimited_1.get(1);

						} catch (Exception e) {
							whetherReject_tFileInputDelimited_1 = true;
							System.err.println(e.getMessage());
							row1 = null;
						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tContextLoad_1 main ] start
							 */

							currentComponent = "tContextLoad_1";

							// ////////////////////////
							String tmp_key_tContextLoad_1 = null;

							String key_tContextLoad_1 = null;
							if (row1.Column0 != null) {
								tmp_key_tContextLoad_1 = row1.Column0.trim();
								if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1
										.startsWith("!"))) {
									tmp_key_tContextLoad_1 = null;
								} else {
									row1.Column0 = tmp_key_tContextLoad_1;
								}
							}
							if (row1.Column0 != null) {

								key_tContextLoad_1 =

								row1.Column0;

							}

							String value_tContextLoad_1 = null;
							if (row1.Column1 != null) {

								value_tContextLoad_1 =

								row1.Column1;

							}

							if (tmp_key_tContextLoad_1 != null) {
								try {
									if (key_tContextLoad_1 != null
											&& "adresseOpenERP"
													.equals(key_tContextLoad_1)) {
										context.adresseOpenERP = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "MAGdbname"
													.equals(key_tContextLoad_1)) {
										context.MAGdbname = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "MAGhost"
													.equals(key_tContextLoad_1)) {
										context.MAGhost = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "MAGport"
													.equals(key_tContextLoad_1)) {
										context.MAGport = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "MAGpwd"
													.equals(key_tContextLoad_1)) {
										context.MAGpwd = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "MAGuid"
													.equals(key_tContextLoad_1)) {
										context.MAGuid = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "MAGusername"
													.equals(key_tContextLoad_1)) {
										context.MAGusername = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "adresseActiveMQ"
													.equals(key_tContextLoad_1)) {
										context.adresseActiveMQ = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "dbname"
													.equals(key_tContextLoad_1)) {
										context.dbname = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "dbnameASPerpgi"
													.equals(key_tContextLoad_1)) {
										context.dbnameASPerpgi = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "destinataireClientActiveMQ"
													.equals(key_tContextLoad_1)) {
										context.destinataireClientActiveMQ = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "destinataireServeurActiveMQ"
													.equals(key_tContextLoad_1)) {
										context.destinataireServeurActiveMQ = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "expediteurActiveMQ"
													.equals(key_tContextLoad_1)) {
										context.expediteurActiveMQ = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "host"
													.equals(key_tContextLoad_1)) {
										context.host = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "hostASPerpgi"
													.equals(key_tContextLoad_1)) {
										context.hostASPerpgi = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "port"
													.equals(key_tContextLoad_1)) {
										context.port = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "portActiveMQ"
													.equals(key_tContextLoad_1)) {
										context.portActiveMQ = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "portASPerpgi"
													.equals(key_tContextLoad_1)) {
										context.portASPerpgi = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "pwd".equals(key_tContextLoad_1)) {
										context.pwd = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "pwdASPerpgi"
													.equals(key_tContextLoad_1)) {
										context.pwdASPerpgi = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "station"
													.equals(key_tContextLoad_1)) {
										context.station = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "uid".equals(key_tContextLoad_1)) {
										context.uid = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "username"
													.equals(key_tContextLoad_1)) {
										context.username = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "usernameASPerpgi"
													.equals(key_tContextLoad_1)) {
										context.usernameASPerpgi = value_tContextLoad_1;
									}

									if (context.getProperty(key_tContextLoad_1) != null) {
										assignList_tContextLoad_1
												.add(key_tContextLoad_1);
									} else {
										newPropertyList_tContextLoad_1
												.add(key_tContextLoad_1);
									}
									context.setProperty(key_tContextLoad_1,
											value_tContextLoad_1);
								} catch (Exception e) {
									System.err.println("Set value for key: "
											+ key_tContextLoad_1
											+ " failed, error message: "
											+ e.getMessage());
								}
								nb_line_tContextLoad_1++;
							}
							// ////////////////////////

							tos_count_tContextLoad_1++;

							/**
							 * [tContextLoad_1 main ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("/home/opendas/workspace/opendas/talend/config/SET.conf") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System
						.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tContextLoad_1 end ] start
				 */

				currentComponent = "tContextLoad_1";

				java.util.Enumeration<?> enu_tContextLoad_1 = context
						.propertyNames();
				while (enu_tContextLoad_1.hasMoreElements()) {
					String key_tContextLoad_1 = (String) enu_tContextLoad_1
							.nextElement();
					if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
							&& !newPropertyList_tContextLoad_1
									.contains(key_tContextLoad_1)) {
						noAssignList_tContextLoad_1.add(key_tContextLoad_1);
					}
				}

				String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1
						.toString();
				String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1
						.substring(1,
								newPropertyStr_tContextLoad_1.length() - 1);

				String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1
						.toString();
				String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1
						.substring(1, noAssignStr_tContextLoad_1.length() - 1);

				globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT",
						newProperty_tContextLoad_1);
				globalMap.put("tContextLoad_1_KEY_NOT_LOADED",
						noAssign_tContextLoad_1);

				globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

				resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread
						.currentThread().getId()
						+ "", "", "", "", "", resumeUtil
						.convertToJsonText(context));

				ok_Hash.put("tContextLoad_1", true);
				end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				tMomObjectOutput_SubjectList_1Process(globalMap);

				/**
				 * [tContextLoad_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (Error error) {

			throw new Error(error);

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tMomObjectOutput_SubjectList_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMomObjectOutput_SubjectList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMomObjectOutput_SubjectList_1 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_SubjectList_1", false);
				start_Hash.put("tMomObjectOutput_SubjectList_1", System
						.currentTimeMillis());
				currentComponent = "tMomObjectOutput_SubjectList_1";

				int tos_count_tMomObjectOutput_SubjectList_1 = 0;

				java.util.Hashtable props_tMomObjectOutput_SubjectList_1 = new java.util.Hashtable();
				String url_tMomObjectOutput_SubjectList_1 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_SubjectList_1);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.destinataireServeurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_SubjectList_1 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_SubjectList_1);

				javax.jms.Connection connection_tMomObjectOutput_SubjectList_1 = factory_tMomObjectOutput_SubjectList_1
						.createConnection();
				connection_tMomObjectOutput_SubjectList_1.start();

				javax.jms.Session session_tMomObjectOutput_SubjectList_1 = connection_tMomObjectOutput_SubjectList_1
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_SubjectList_1;
				des_tMomObjectOutput_SubjectList_1 = session_tMomObjectOutput_SubjectList_1
						.createQueue(context.destinataireServeurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_SubjectList_1 = session_tMomObjectOutput_SubjectList_1
						.createProducer(des_tMomObjectOutput_SubjectList_1);

				producer_tMomObjectOutput_SubjectList_1
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_SubjectList_1 begin ] stop
				 */
				/**
				 * [tMomObjectOutput_SubjectList_1 main ] start
				 */

				currentComponent = "tMomObjectOutput_SubjectList_1";

				// On envoie le message qui demandera la liste des sujets à
				// suivre dans la file
				org.opendas.modele.ServerRequest serverRequest = new org.opendas.modele.ServerRequest();

				serverRequest.setTitle("getSubjectList");
				serverRequest.setSendUrl(context.destinataireServeurActiveMQ);
				serverRequest.setFromUrl(context.expediteurActiveMQ);

				javax.jms.ObjectMessage message_tMomObjectOutput_SubjectList_1 = session_tMomObjectOutput_SubjectList_1
						.createObjectMessage();// On crée l'ObjectMessage

				message_tMomObjectOutput_SubjectList_1.setObject(serverRequest);

				// propriétés
				message_tMomObjectOutput_SubjectList_1.setStringProperty(
						"Sujet", "getSubjectList");
				message_tMomObjectOutput_SubjectList_1.setStringProperty(
						"Station", context.station);

				System.out
						.println("tMomObjectOutput_SubjectList_1 Envoi de la demande de liste de sujets");// DEBUG
				producer_tMomObjectOutput_SubjectList_1
						.send(message_tMomObjectOutput_SubjectList_1);

				tos_count_tMomObjectOutput_SubjectList_1++;

				/**
				 * [tMomObjectOutput_SubjectList_1 main ] stop
				 */
				/**
				 * [tMomObjectOutput_SubjectList_1 end ] start
				 */

				currentComponent = "tMomObjectOutput_SubjectList_1";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_SubjectList_1.close();
				session_tMomObjectOutput_SubjectList_1.close();
				connection_tMomObjectOutput_SubjectList_1.close();

				ok_Hash.put("tMomObjectOutput_SubjectList_1", true);
				end_Hash.put("tMomObjectOutput_SubjectList_1", System
						.currentTimeMillis());

				tMomObjectInput_1Process(globalMap);

				/**
				 * [tMomObjectOutput_SubjectList_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (Error error) {

			throw new Error(error);

		}

		globalMap.put("tMomObjectOutput_SubjectList_1_SUBPROCESS_STATE", 1);
	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String sendUrl_out;

		public String getSendUrl_out() {
			return this.sendUrl_out;
		}

		public String fromUrl_out;

		public String getFromUrl_out() {
			return this.fromUrl_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.sendUrl_out = readString(dis);

					this.fromUrl_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.sendUrl_out, dos);

				// String

				writeString(this.fromUrl_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",sendUrl_out=" + sendUrl_out);
			sb.append(",fromUrl_out=" + fromUrl_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String sendUrl_out;

		public String getSendUrl_out() {
			return this.sendUrl_out;
		}

		public String fromUrl_out;

		public String getFromUrl_out() {
			return this.fromUrl_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.sendUrl_out = readString(dis);

					this.fromUrl_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.sendUrl_out, dos);

				// String

				writeString(this.fromUrl_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",sendUrl_out=" + sendUrl_out);
			sb.append(",fromUrl_out=" + fromUrl_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String sendUrl_out;

		public String getSendUrl_out() {
			return this.sendUrl_out;
		}

		public String fromUrl_out;

		public String getFromUrl_out() {
			return this.fromUrl_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.sendUrl_out = readString(dis);

					this.fromUrl_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.sendUrl_out, dos);

				// String

				writeString(this.fromUrl_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",sendUrl_out=" + sendUrl_out);
			sb.append(",fromUrl_out=" + fromUrl_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String sendUrl_out;

		public String getSendUrl_out() {
			return this.sendUrl_out;
		}

		public String fromUrl_out;

		public String getFromUrl_out() {
			return this.fromUrl_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.sendUrl_out = readString(dis);

					this.fromUrl_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.sendUrl_out, dos);

				// String

				writeString(this.fromUrl_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",sendUrl_out=" + sendUrl_out);
			sb.append(",fromUrl_out=" + fromUrl_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String sendUrl_out;

		public String getSendUrl_out() {
			return this.sendUrl_out;
		}

		public String fromUrl_out;

		public String getFromUrl_out() {
			return this.fromUrl_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.sendUrl_out = readString(dis);

					this.fromUrl_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.sendUrl_out, dos);

				// String

				writeString(this.fromUrl_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",sendUrl_out=" + sendUrl_out);
			sb.append(",fromUrl_out=" + fromUrl_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String sendUrl_out;

		public String getSendUrl_out() {
			return this.sendUrl_out;
		}

		public String fromUrl_out;

		public String getFromUrl_out() {
			return this.fromUrl_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.sendUrl_out = readString(dis);

					this.fromUrl_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.sendUrl_out, dos);

				// String

				writeString(this.fromUrl_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",sendUrl_out=" + sendUrl_out);
			sb.append(",fromUrl_out=" + fromUrl_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String sendUrl_out;

		public String getSendUrl_out() {
			return this.sendUrl_out;
		}

		public String fromUrl_out;

		public String getFromUrl_out() {
			return this.fromUrl_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.sendUrl_out = readString(dis);

					this.fromUrl_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.sendUrl_out, dos);

				// String

				writeString(this.fromUrl_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",sendUrl_out=" + sendUrl_out);
			sb.append(",fromUrl_out=" + fromUrl_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String sendUrl_out;

		public String getSendUrl_out() {
			return this.sendUrl_out;
		}

		public String fromUrl_out;

		public String getFromUrl_out() {
			return this.fromUrl_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.sendUrl_out = readString(dis);

					this.fromUrl_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.sendUrl_out, dos);

				// String

				writeString(this.fromUrl_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",sendUrl_out=" + sendUrl_out);
			sb.append(",fromUrl_out=" + fromUrl_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class controle_de_livraison_magentoStruct
			implements
			routines.system.IPersistableRow<controle_de_livraison_magentoStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(controle_de_livraison_magentoStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class controle_de_livraison_asperpgiStruct
			implements
			routines.system.IPersistableRow<controle_de_livraison_asperpgiStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(controle_de_livraison_asperpgiStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class pointageStruct implements
			routines.system.IPersistableRow<pointageStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(pointageStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tracking_asperpgiStruct implements
			routines.system.IPersistableRow<tracking_asperpgiStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tracking_asperpgiStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class delete_asperpgiStruct implements
			routines.system.IPersistableRow<delete_asperpgiStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(delete_asperpgiStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class entreeStruct implements
			routines.system.IPersistableRow<entreeStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(entreeStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class sortieStruct implements
			routines.system.IPersistableRow<sortieStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(sortieStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class pointage_changement_posteStruct implements
			routines.system.IPersistableRow<pointage_changement_posteStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String sendUrl_out;

		public String getSendUrl_out() {
			return this.sendUrl_out;
		}

		public String fromUrl_out;

		public String getFromUrl_out() {
			return this.fromUrl_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.sendUrl_out = readString(dis);

					this.fromUrl_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.sendUrl_out, dos);

				// String

				writeString(this.fromUrl_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",sendUrl_out=" + sendUrl_out);
			sb.append(",fromUrl_out=" + fromUrl_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(pointage_changement_posteStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class pointage_changement_dossierStruct implements
			routines.system.IPersistableRow<pointage_changement_dossierStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(pointage_changement_dossierStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class synchro_date_mrp_production_product_lineStruct
			implements
			routines.system.IPersistableRow<synchro_date_mrp_production_product_lineStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String sendUrl_out;

		public String getSendUrl_out() {
			return this.sendUrl_out;
		}

		public String fromUrl_out;

		public String getFromUrl_out() {
			return this.fromUrl_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.sendUrl_out = readString(dis);

					this.fromUrl_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.sendUrl_out, dos);

				// String

				writeString(this.fromUrl_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",sendUrl_out=" + sendUrl_out);
			sb.append(",fromUrl_out=" + fromUrl_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(
				synchro_date_mrp_production_product_lineStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMomObjectInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMomObjectInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();
				controle_de_livraison_magentoStruct controle_de_livraison_magento = new controle_de_livraison_magentoStruct();
				row17Struct row17 = new row17Struct();
				controle_de_livraison_asperpgiStruct controle_de_livraison_asperpgi = new controle_de_livraison_asperpgiStruct();
				row9Struct row9 = new row9Struct();
				pointageStruct pointage = new pointageStruct();
				row2Struct row2 = new row2Struct();
				tracking_asperpgiStruct tracking_asperpgi = new tracking_asperpgiStruct();
				row3Struct row3 = new row3Struct();
				delete_asperpgiStruct delete_asperpgi = new delete_asperpgiStruct();
				row4Struct row4 = new row4Struct();
				entreeStruct entree = new entreeStruct();
				row5Struct row5 = new row5Struct();
				sortieStruct sortie = new sortieStruct();
				row7Struct row7 = new row7Struct();
				pointage_changement_posteStruct pointage_changement_poste = new pointage_changement_posteStruct();
				row8Struct row8 = new row8Struct();
				pointage_changement_dossierStruct pointage_changement_dossier = new pointage_changement_dossierStruct();
				row10Struct row10 = new row10Struct();
				synchro_date_mrp_production_product_lineStruct synchro_date_mrp_production_product_line = new synchro_date_mrp_production_product_lineStruct();
				row11Struct row11 = new row11Struct();

				/**
				 * [tMomObjectOutput_40 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_40", false);
				start_Hash.put("tMomObjectOutput_40", System
						.currentTimeMillis());
				currentComponent = "tMomObjectOutput_40";

				int tos_count_tMomObjectOutput_40 = 0;

				java.util.Hashtable props_tMomObjectOutput_40 = new java.util.Hashtable();
				String url_tMomObjectOutput_40 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_40);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_40 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_40);

				javax.jms.Connection connection_tMomObjectOutput_40 = factory_tMomObjectOutput_40
						.createConnection();
				connection_tMomObjectOutput_40.start();

				javax.jms.Session session_tMomObjectOutput_40 = connection_tMomObjectOutput_40
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_40;
				des_tMomObjectOutput_40 = session_tMomObjectOutput_40
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_40 = session_tMomObjectOutput_40
						.createProducer(des_tMomObjectOutput_40);

				producer_tMomObjectOutput_40
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_40 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_3 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_3", false);
				start_Hash.put("tXMLRPCOpenDAS_3", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_3";

				int tos_count_tXMLRPCOpenDAS_3 = 0;

				/**
				 * [tXMLRPCOpenDAS_3 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_63 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_63", false);
				start_Hash.put("tMomObjectOutput_63", System
						.currentTimeMillis());
				currentComponent = "tMomObjectOutput_63";

				int tos_count_tMomObjectOutput_63 = 0;

				java.util.Hashtable props_tMomObjectOutput_63 = new java.util.Hashtable();
				String url_tMomObjectOutput_63 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_63);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_63 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_63);

				javax.jms.Connection connection_tMomObjectOutput_63 = factory_tMomObjectOutput_63
						.createConnection();
				connection_tMomObjectOutput_63.start();

				javax.jms.Session session_tMomObjectOutput_63 = connection_tMomObjectOutput_63
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_63;
				des_tMomObjectOutput_63 = session_tMomObjectOutput_63
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_63 = session_tMomObjectOutput_63
						.createProducer(des_tMomObjectOutput_63);

				producer_tMomObjectOutput_63
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_63 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_1 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_1", false);
				start_Hash.put("tXMLRPCOpenDAS_1", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_1";

				int tos_count_tXMLRPCOpenDAS_1 = 0;

				/**
				 * [tXMLRPCOpenDAS_1 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_11 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_11", false);
				start_Hash.put("tMomObjectOutput_11", System
						.currentTimeMillis());
				currentComponent = "tMomObjectOutput_11";

				int tos_count_tMomObjectOutput_11 = 0;

				java.util.Hashtable props_tMomObjectOutput_11 = new java.util.Hashtable();
				String url_tMomObjectOutput_11 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_11);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_11 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_11);

				javax.jms.Connection connection_tMomObjectOutput_11 = factory_tMomObjectOutput_11
						.createConnection();
				connection_tMomObjectOutput_11.start();

				javax.jms.Session session_tMomObjectOutput_11 = connection_tMomObjectOutput_11
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_11;
				des_tMomObjectOutput_11 = session_tMomObjectOutput_11
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_11 = session_tMomObjectOutput_11
						.createProducer(des_tMomObjectOutput_11);

				producer_tMomObjectOutput_11
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_11 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_5 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_5", false);
				start_Hash.put("tXMLRPCOpenDAS_5", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_5";

				int tos_count_tXMLRPCOpenDAS_5 = 0;

				/**
				 * [tXMLRPCOpenDAS_5 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_7 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_7", false);
				start_Hash
						.put("tMomObjectOutput_7", System.currentTimeMillis());
				currentComponent = "tMomObjectOutput_7";

				int tos_count_tMomObjectOutput_7 = 0;

				java.util.Hashtable props_tMomObjectOutput_7 = new java.util.Hashtable();
				String url_tMomObjectOutput_7 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_7);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_7 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_7);

				javax.jms.Connection connection_tMomObjectOutput_7 = factory_tMomObjectOutput_7
						.createConnection();
				connection_tMomObjectOutput_7.start();

				javax.jms.Session session_tMomObjectOutput_7 = connection_tMomObjectOutput_7
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_7;
				des_tMomObjectOutput_7 = session_tMomObjectOutput_7
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_7 = session_tMomObjectOutput_7
						.createProducer(des_tMomObjectOutput_7);

				producer_tMomObjectOutput_7
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_7 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_6 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_6", false);
				start_Hash.put("tXMLRPCOpenDAS_6", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_6";

				int tos_count_tXMLRPCOpenDAS_6 = 0;

				/**
				 * [tXMLRPCOpenDAS_6 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_8 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_8", false);
				start_Hash
						.put("tMomObjectOutput_8", System.currentTimeMillis());
				currentComponent = "tMomObjectOutput_8";

				int tos_count_tMomObjectOutput_8 = 0;

				java.util.Hashtable props_tMomObjectOutput_8 = new java.util.Hashtable();
				String url_tMomObjectOutput_8 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_8);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_8 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_8);

				javax.jms.Connection connection_tMomObjectOutput_8 = factory_tMomObjectOutput_8
						.createConnection();
				connection_tMomObjectOutput_8.start();

				javax.jms.Session session_tMomObjectOutput_8 = connection_tMomObjectOutput_8
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_8;
				des_tMomObjectOutput_8 = session_tMomObjectOutput_8
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_8 = session_tMomObjectOutput_8
						.createProducer(des_tMomObjectOutput_8);

				producer_tMomObjectOutput_8
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_8 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_7 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_7", false);
				start_Hash.put("tXMLRPCOpenDAS_7", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_7";

				int tos_count_tXMLRPCOpenDAS_7 = 0;

				/**
				 * [tXMLRPCOpenDAS_7 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_5 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_5", false);
				start_Hash
						.put("tMomObjectOutput_5", System.currentTimeMillis());
				currentComponent = "tMomObjectOutput_5";

				int tos_count_tMomObjectOutput_5 = 0;

				java.util.Hashtable props_tMomObjectOutput_5 = new java.util.Hashtable();
				String url_tMomObjectOutput_5 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_5);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_5 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_5);

				javax.jms.Connection connection_tMomObjectOutput_5 = factory_tMomObjectOutput_5
						.createConnection();
				connection_tMomObjectOutput_5.start();

				javax.jms.Session session_tMomObjectOutput_5 = connection_tMomObjectOutput_5
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_5;
				des_tMomObjectOutput_5 = session_tMomObjectOutput_5
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_5 = session_tMomObjectOutput_5
						.createProducer(des_tMomObjectOutput_5);

				producer_tMomObjectOutput_5
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_5 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_8 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_8", false);
				start_Hash.put("tXMLRPCOpenDAS_8", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_8";

				int tos_count_tXMLRPCOpenDAS_8 = 0;

				/**
				 * [tXMLRPCOpenDAS_8 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_6 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_6", false);
				start_Hash
						.put("tMomObjectOutput_6", System.currentTimeMillis());
				currentComponent = "tMomObjectOutput_6";

				int tos_count_tMomObjectOutput_6 = 0;

				java.util.Hashtable props_tMomObjectOutput_6 = new java.util.Hashtable();
				String url_tMomObjectOutput_6 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_6);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_6 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_6);

				javax.jms.Connection connection_tMomObjectOutput_6 = factory_tMomObjectOutput_6
						.createConnection();
				connection_tMomObjectOutput_6.start();

				javax.jms.Session session_tMomObjectOutput_6 = connection_tMomObjectOutput_6
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_6;
				des_tMomObjectOutput_6 = session_tMomObjectOutput_6
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_6 = session_tMomObjectOutput_6
						.createProducer(des_tMomObjectOutput_6);

				producer_tMomObjectOutput_6
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_6 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_9 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_9", false);
				start_Hash.put("tXMLRPCOpenDAS_9", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_9";

				int tos_count_tXMLRPCOpenDAS_9 = 0;

				/**
				 * [tXMLRPCOpenDAS_9 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_9 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_9", false);
				start_Hash
						.put("tMomObjectOutput_9", System.currentTimeMillis());
				currentComponent = "tMomObjectOutput_9";

				int tos_count_tMomObjectOutput_9 = 0;

				java.util.Hashtable props_tMomObjectOutput_9 = new java.util.Hashtable();
				String url_tMomObjectOutput_9 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_9);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_9 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_9);

				javax.jms.Connection connection_tMomObjectOutput_9 = factory_tMomObjectOutput_9
						.createConnection();
				connection_tMomObjectOutput_9.start();

				javax.jms.Session session_tMomObjectOutput_9 = connection_tMomObjectOutput_9
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_9;
				des_tMomObjectOutput_9 = session_tMomObjectOutput_9
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_9 = session_tMomObjectOutput_9
						.createProducer(des_tMomObjectOutput_9);

				producer_tMomObjectOutput_9
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_9 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_10 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_10", false);
				start_Hash.put("tXMLRPCOpenDAS_10", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_10";

				int tos_count_tXMLRPCOpenDAS_10 = 0;

				/**
				 * [tXMLRPCOpenDAS_10 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_10 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_10", false);
				start_Hash.put("tMomObjectOutput_10", System
						.currentTimeMillis());
				currentComponent = "tMomObjectOutput_10";

				int tos_count_tMomObjectOutput_10 = 0;

				java.util.Hashtable props_tMomObjectOutput_10 = new java.util.Hashtable();
				String url_tMomObjectOutput_10 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_10);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_10 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_10);

				javax.jms.Connection connection_tMomObjectOutput_10 = factory_tMomObjectOutput_10
						.createConnection();
				connection_tMomObjectOutput_10.start();

				javax.jms.Session session_tMomObjectOutput_10 = connection_tMomObjectOutput_10
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_10;
				des_tMomObjectOutput_10 = session_tMomObjectOutput_10
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_10 = session_tMomObjectOutput_10
						.createProducer(des_tMomObjectOutput_10);

				producer_tMomObjectOutput_10
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_10 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_12 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_12", false);
				start_Hash.put("tXMLRPCOpenDAS_12", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_12";

				int tos_count_tXMLRPCOpenDAS_12 = 0;

				/**
				 * [tXMLRPCOpenDAS_12 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_12 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_12", false);
				start_Hash.put("tMomObjectOutput_12", System
						.currentTimeMillis());
				currentComponent = "tMomObjectOutput_12";

				int tos_count_tMomObjectOutput_12 = 0;

				java.util.Hashtable props_tMomObjectOutput_12 = new java.util.Hashtable();
				String url_tMomObjectOutput_12 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_12);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_12 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_12);

				javax.jms.Connection connection_tMomObjectOutput_12 = factory_tMomObjectOutput_12
						.createConnection();
				connection_tMomObjectOutput_12.start();

				javax.jms.Session session_tMomObjectOutput_12 = connection_tMomObjectOutput_12
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_12;
				des_tMomObjectOutput_12 = session_tMomObjectOutput_12
						.createQueue(context.expediteurActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_12 = session_tMomObjectOutput_12
						.createProducer(des_tMomObjectOutput_12);

				producer_tMomObjectOutput_12
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_12 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_14 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_14", false);
				start_Hash.put("tXMLRPCOpenDAS_14", System.currentTimeMillis());
				currentComponent = "tXMLRPCOpenDAS_14";

				int tos_count_tXMLRPCOpenDAS_14 = 0;

				/**
				 * [tXMLRPCOpenDAS_14 begin ] stop
				 */

				/**
				 * [tMap_179 begin ] start
				 */

				ok_Hash.put("tMap_179", false);
				start_Hash.put("tMap_179", System.currentTimeMillis());
				currentComponent = "tMap_179";

				int tos_count_tMap_179 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				// ###############################

				// ###############################
				// # Outputs initialization
				controle_de_livraison_magentoStruct controle_de_livraison_magento_tmp = new controle_de_livraison_magentoStruct();
				controle_de_livraison_asperpgiStruct controle_de_livraison_asperpgi_tmp = new controle_de_livraison_asperpgiStruct();
				pointageStruct pointage_tmp = new pointageStruct();
				tracking_asperpgiStruct tracking_asperpgi_tmp = new tracking_asperpgiStruct();
				delete_asperpgiStruct delete_asperpgi_tmp = new delete_asperpgiStruct();
				entreeStruct entree_tmp = new entreeStruct();
				sortieStruct sortie_tmp = new sortieStruct();
				pointage_changement_posteStruct pointage_changement_poste_tmp = new pointage_changement_posteStruct();
				pointage_changement_dossierStruct pointage_changement_dossier_tmp = new pointage_changement_dossierStruct();
				synchro_date_mrp_production_product_lineStruct synchro_date_mrp_production_product_line_tmp = new synchro_date_mrp_production_product_lineStruct();
				// ###############################

				/**
				 * [tMap_179 begin ] stop
				 */

				/**
				 * [tMomObjectInput_1 begin ] start
				 */

				ok_Hash.put("tMomObjectInput_1", false);
				start_Hash.put("tMomObjectInput_1", System.currentTimeMillis());
				currentComponent = "tMomObjectInput_1";

				int tos_count_tMomObjectInput_1 = 0;

				String url_tMomObjectInput_1 = "tcp://"
						+ context.adresseActiveMQ + ":" + context.portActiveMQ;
				long timeout_tMomObjectInput_1 = 30;

				System.out.println("Connecting to URL: "
						+ url_tMomObjectInput_1);
				System.out.println("Consuming " + (false ? "topic" : "queue")
						+ ": " + context.expediteurActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectInput_1 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectInput_1);

				javax.jms.Connection connection_tMomObjectInput_1 = factory_tMomObjectInput_1
						.createConnection();
				connection_tMomObjectInput_1.start();
				javax.jms.Session session_tMomObjectInput_1 = connection_tMomObjectInput_1
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);
				javax.jms.Destination des_tMomObjectInput_1 = null;

				des_tMomObjectInput_1 = session_tMomObjectInput_1
						.createQueue(context.expediteurActiveMQ);

				javax.jms.MessageProducer replyProducer_tMomObjectInput_1 = session_tMomObjectInput_1
						.createProducer(null);
				replyProducer_tMomObjectInput_1
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				javax.jms.MessageConsumer consumer_tMomObjectInput_1 = session_tMomObjectInput_1
						.createConsumer(des_tMomObjectInput_1, "Sujet = '"
								+ context.station + "'");
				System.out
						.println("tMomObjectInput_1 Attente de la liste de sujet Sujet = 'context.station'");

				javax.jms.Message message_tMomObjectInput_1;
				System.out
						.println("tMomObjectInput_1 Attente de la liste de sujets");

				// Réception de la liste de sujets à écouter

				java.util.List subjectList = null;
				// Boucle qui écoute jusqu'à ce qu'on ait retiré la liste du
				// message.
				while ((message_tMomObjectInput_1 = consumer_tMomObjectInput_1
						.receive()) != null) {

					javax.jms.ObjectMessage objMsg_tMomObjectInput_1 = (javax.jms.ObjectMessage) message_tMomObjectInput_1;
					Object object = objMsg_tMomObjectInput_1.getObject();
					if (object instanceof org.opendas.modele.ServerRequest) {
						org.opendas.modele.ServerRequest serverRequest = (org.opendas.modele.ServerRequest) object;
						subjectList = (java.util.List) serverRequest
								.getAttachement();
						System.out.println("tMomObjectInput_1 Liste reçue");
						break;
					}
				}

				// Création de la requête de sélection de sujets en fonction de
				// la liste reçue.
				StringBuilder strBuild = new StringBuilder();

				java.util.Iterator it = subjectList.iterator();
				while (it.hasNext()) {
					strBuild.append("Sujet = '");
					strBuild.append(it.next() + "'");
					if (it.hasNext())
						strBuild.append(" OR ");
				}

				// Création d'un autre MessageConsumer avec le bon
				// MessageSelector
				System.out
						.println("tMomObjectInput_1 Liste de sujets non utilisée");// DEBUG
				consumer_tMomObjectInput_1 = session_tMomObjectInput_1
						.createConsumer(des_tMomObjectInput_1, strBuild
								.toString());
				System.out.println("\ntMomObjectInput_1 message selector : "
						+ consumer_tMomObjectInput_1.getMessageSelector());

				System.out
						.println("We will consume messages while they continue to be delivered ");
				while ((message_tMomObjectInput_1 = consumer_tMomObjectInput_1
						.receive()) != null) {

					javax.jms.ObjectMessage objMsg_tMomObjectInput_1 = (javax.jms.ObjectMessage) message_tMomObjectInput_1;
					String msg_tMomObjectInput_1 = "";
					Object object = objMsg_tMomObjectInput_1.getObject();
					System.out.println("\ntMomObjectInput_1 Station : "
							+ objMsg_tMomObjectInput_1
									.getStringProperty("Station"));// DEBUG
					String station = objMsg_tMomObjectInput_1
							.getStringProperty("Station");
					// initialisation des champs récupérés dans le message
					String title = null;
					String sendUrl = null;
					String fromUrl = null;
					Date sendedDate = null;
					Object attachement = null;

					if (object instanceof org.opendas.modele.ServerRequest) {
						org.opendas.modele.ServerRequest serverRequest = (org.opendas.modele.ServerRequest) object;

						// champs qui serviront à créer l'object previousRequest
						// que l'on enverra avec la réponse
						title = serverRequest.getTitle();// on récupère le champ
															// "title"
						sendUrl = serverRequest.getSendUrl();// on récupère le
																// champ
																// "sendUrl"
						fromUrl = serverRequest.getFromUrl();// on récupère le
																// champ
																// "fromUrl"
						sendedDate = serverRequest.getSendedDate();// on
																	// récupère
																	// le champ
																	// "sendedDate"

						// champ contenant les paramètres de la requête XMLRPC à
						// effectuer
						attachement = serverRequest.getAttachement();

						System.out
								.println("tMomObjectInput_1 title : " + title);// DEBUG

					}

					// renseigner les champs des connexions de sortie (champs
					// pour previousRequest)
					row6.title = title;
					row6.sendUrl = sendUrl;
					row6.fromUrl = fromUrl;
					row6.sendedDate = sendedDate;
					// champ attachement fournissant les paramètres pour la
					// requête XMLRPC
					row6.attachement = attachement;
					// nom de l'expéditeur du message (la propriété "Sujet" de
					// la réponse prendra cette valeur)
					row6.station = station;

					/**
					 * [tMomObjectInput_1 begin ] stop
					 */
					/**
					 * [tMomObjectInput_1 main ] start
					 */

					currentComponent = "tMomObjectInput_1";

					tos_count_tMomObjectInput_1++;

					/**
					 * [tMomObjectInput_1 main ] stop
					 */

					/**
					 * [tMap_179 main ] start
					 */

					currentComponent = "tMap_179";

					boolean hasCasePrimitiveKeyWithNull_tMap_179 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_179 = false;
					boolean mainRowRejected_tMap_179 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables
						// ###############################
						// ###############################
						// # Output tables

						controle_de_livraison_magento = null;
						controle_de_livraison_asperpgi = null;
						pointage = null;
						tracking_asperpgi = null;
						delete_asperpgi = null;
						entree = null;
						sortie = null;
						pointage_changement_poste = null;
						pointage_changement_dossier = null;
						synchro_date_mrp_production_product_line = null;

						// # Output table : 'controle_de_livraison_magento'
						// # Filter conditions
						if (

						"controle_de_livraison_magento".equals(row6.title)

						) {
							controle_de_livraison_magento_tmp.title = row6.title;
							controle_de_livraison_magento_tmp.sendUrl = row6.sendUrl;
							controle_de_livraison_magento_tmp.fromUrl = row6.fromUrl;
							controle_de_livraison_magento_tmp.sendedDate = row6.sendedDate;
							controle_de_livraison_magento_tmp.attachement = row6.attachement;
							controle_de_livraison_magento_tmp.station = row6.station;
							controle_de_livraison_magento_tmp.title_out = row6.title_out;
							controle_de_livraison_magento_tmp.send_out = row6.send_out;
							controle_de_livraison_magento_tmp.from_out = row6.from_out;
							controle_de_livraison_magento_tmp.sendedDate_out = row6.sendedDate_out;
							controle_de_livraison_magento_tmp.attachement_out = row6.attachement_out;
							controle_de_livraison_magento_tmp.station_out = row6.station_out;
							controle_de_livraison_magento = controle_de_livraison_magento_tmp;
						} // closing filter/reject

						// # Output table : 'controle_de_livraison_asperpgi'
						// # Filter conditions
						if (

						"controle_de_livraison_asperpgi".equals(row6.title)

						) {
							controle_de_livraison_asperpgi_tmp.title = row6.title;
							controle_de_livraison_asperpgi_tmp.sendUrl = row6.sendUrl;
							controle_de_livraison_asperpgi_tmp.fromUrl = row6.fromUrl;
							controle_de_livraison_asperpgi_tmp.sendedDate = row6.sendedDate;
							controle_de_livraison_asperpgi_tmp.attachement = row6.attachement;
							controle_de_livraison_asperpgi_tmp.station = row6.station;
							controle_de_livraison_asperpgi_tmp.title_out = row6.title_out;
							controle_de_livraison_asperpgi_tmp.send_out = row6.send_out;
							controle_de_livraison_asperpgi_tmp.from_out = row6.from_out;
							controle_de_livraison_asperpgi_tmp.sendedDate_out = row6.sendedDate_out;
							controle_de_livraison_asperpgi_tmp.attachement_out = row6.attachement_out;
							controle_de_livraison_asperpgi_tmp.station_out = row6.station_out;
							controle_de_livraison_asperpgi = controle_de_livraison_asperpgi_tmp;
						} // closing filter/reject

						// # Output table : 'pointage'
						// # Filter conditions
						if (

						"pointage".equals(row6.title)

						) {
							pointage_tmp.title = row6.title;
							pointage_tmp.sendUrl = row6.sendUrl;
							pointage_tmp.fromUrl = row6.fromUrl;
							pointage_tmp.sendedDate = row6.sendedDate;
							pointage_tmp.attachement = row6.attachement;
							pointage_tmp.station = row6.station;
							pointage_tmp.title_out = row6.title_out;
							pointage_tmp.send_out = row6.send_out;
							pointage_tmp.from_out = row6.from_out;
							pointage_tmp.sendedDate_out = row6.sendedDate_out;
							pointage_tmp.attachement_out = row6.attachement_out;
							pointage_tmp.station_out = row6.station_out;
							pointage = pointage_tmp;
						} // closing filter/reject

						// # Output table : 'tracking_asperpgi'
						// # Filter conditions
						if (

						"tracking_asperpgi".equals(row6.title)

						) {
							tracking_asperpgi_tmp.title = row6.title;
							tracking_asperpgi_tmp.sendUrl = row6.sendUrl;
							tracking_asperpgi_tmp.fromUrl = row6.fromUrl;
							tracking_asperpgi_tmp.sendedDate = row6.sendedDate;
							tracking_asperpgi_tmp.attachement = row6.attachement;
							tracking_asperpgi_tmp.station = row6.station;
							tracking_asperpgi_tmp.title_out = row6.title_out;
							tracking_asperpgi_tmp.send_out = row6.send_out;
							tracking_asperpgi_tmp.from_out = row6.from_out;
							tracking_asperpgi_tmp.sendedDate_out = row6.sendedDate_out;
							tracking_asperpgi_tmp.attachement_out = row6.attachement_out;
							tracking_asperpgi_tmp.station_out = row6.station_out;
							tracking_asperpgi = tracking_asperpgi_tmp;
						} // closing filter/reject

						// # Output table : 'delete_asperpgi'
						// # Filter conditions
						if (

						"delete_asperpgi".equals(row6.title)

						) {
							delete_asperpgi_tmp.title = row6.title;
							delete_asperpgi_tmp.sendUrl = row6.sendUrl;
							delete_asperpgi_tmp.fromUrl = row6.fromUrl;
							delete_asperpgi_tmp.sendedDate = row6.sendedDate;
							delete_asperpgi_tmp.attachement = row6.attachement;
							delete_asperpgi_tmp.station = row6.station;
							delete_asperpgi_tmp.title_out = row6.title_out;
							delete_asperpgi_tmp.send_out = row6.send_out;
							delete_asperpgi_tmp.from_out = row6.from_out;
							delete_asperpgi_tmp.sendedDate_out = row6.sendedDate_out;
							delete_asperpgi_tmp.attachement_out = row6.attachement_out;
							delete_asperpgi_tmp.station_out = row6.station_out;
							delete_asperpgi = delete_asperpgi_tmp;
						} // closing filter/reject

						// # Output table : 'entree'
						// # Filter conditions
						if (

						"entree".equals(row6.title)

						) {
							entree_tmp.title = row6.title;
							entree_tmp.sendUrl = row6.sendUrl;
							entree_tmp.fromUrl = row6.fromUrl;
							entree_tmp.sendedDate = row6.sendedDate;
							entree_tmp.attachement = row6.attachement;
							entree_tmp.station = row6.station;
							entree_tmp.title_out = row6.title_out;
							entree_tmp.send_out = row6.send_out;
							entree_tmp.from_out = row6.from_out;
							entree_tmp.sendedDate_out = row6.sendedDate_out;
							entree_tmp.attachement_out = row6.attachement_out;
							entree_tmp.station_out = row6.station_out;
							entree = entree_tmp;
						} // closing filter/reject

						// # Output table : 'sortie'
						// # Filter conditions
						if (

						"sortie".equals(row6.title)

						) {
							sortie_tmp.title = row6.title;
							sortie_tmp.sendUrl = row6.sendUrl;
							sortie_tmp.fromUrl = row6.fromUrl;
							sortie_tmp.sendedDate = row6.sendedDate;
							sortie_tmp.attachement = row6.attachement;
							sortie_tmp.station = row6.station;
							sortie_tmp.title_out = row6.title_out;
							sortie_tmp.send_out = row6.send_out;
							sortie_tmp.from_out = row6.from_out;
							sortie_tmp.sendedDate_out = row6.sendedDate_out;
							sortie_tmp.attachement_out = row6.attachement_out;
							sortie_tmp.station_out = row6.station_out;
							sortie = sortie_tmp;
						} // closing filter/reject

						// # Output table : 'pointage_changement_poste'
						// # Filter conditions
						if (

						"pointage_changement_poste".equals(row6.title)

						) {
							pointage_changement_poste_tmp.title = row6.title;
							pointage_changement_poste_tmp.sendUrl = row6.sendUrl;
							pointage_changement_poste_tmp.fromUrl = row6.fromUrl;
							pointage_changement_poste_tmp.sendedDate = row6.sendedDate;
							pointage_changement_poste_tmp.attachement = row6.attachement;
							pointage_changement_poste_tmp.station = row6.station;
							pointage_changement_poste_tmp.title_out = row6.title_out;
							pointage_changement_poste_tmp.sendUrl_out = null;
							pointage_changement_poste_tmp.fromUrl_out = null;
							pointage_changement_poste_tmp.sendedDate_out = row6.sendedDate_out;
							pointage_changement_poste_tmp.attachement_out = row6.attachement_out;
							pointage_changement_poste_tmp.station_out = row6.station_out;
							pointage_changement_poste = pointage_changement_poste_tmp;
						} // closing filter/reject

						// # Output table : 'pointage_changement_dossier'
						// # Filter conditions
						if (

						"pointage_changement_dossier".equals(row6.title)

						) {
							pointage_changement_dossier_tmp.title = row6.title;
							pointage_changement_dossier_tmp.sendUrl = row6.sendUrl;
							pointage_changement_dossier_tmp.fromUrl = row6.fromUrl;
							pointage_changement_dossier_tmp.sendedDate = row6.sendedDate;
							pointage_changement_dossier_tmp.attachement = row6.attachement;
							pointage_changement_dossier_tmp.station = row6.station;
							pointage_changement_dossier_tmp.title_out = row6.title_out;
							pointage_changement_dossier_tmp.send_out = row6.send_out;
							pointage_changement_dossier_tmp.from_out = row6.from_out;
							pointage_changement_dossier_tmp.sendedDate_out = row6.sendedDate_out;
							pointage_changement_dossier_tmp.attachement_out = row6.attachement_out;
							pointage_changement_dossier_tmp.station_out = row6.station_out;
							pointage_changement_dossier = pointage_changement_dossier_tmp;
						} // closing filter/reject

						// # Output table :
						// 'synchro_date_mrp_production_product_line'
						// # Filter conditions
						if (

						"synchro_date_mrp_production_product_line"
								.equals(row6.title)

						) {
							synchro_date_mrp_production_product_line_tmp.title = row6.title;
							synchro_date_mrp_production_product_line_tmp.sendUrl = row6.sendUrl;
							synchro_date_mrp_production_product_line_tmp.fromUrl = row6.fromUrl;
							synchro_date_mrp_production_product_line_tmp.sendedDate = row6.sendedDate;
							synchro_date_mrp_production_product_line_tmp.attachement = row6.attachement;
							synchro_date_mrp_production_product_line_tmp.station = row6.station;
							synchro_date_mrp_production_product_line_tmp.title_out = row6.title_out;
							synchro_date_mrp_production_product_line_tmp.sendUrl_out = null;
							synchro_date_mrp_production_product_line_tmp.fromUrl_out = null;
							synchro_date_mrp_production_product_line_tmp.sendedDate_out = row6.sendedDate_out;
							synchro_date_mrp_production_product_line_tmp.attachement_out = row6.attachement_out;
							synchro_date_mrp_production_product_line_tmp.station_out = row6.station_out;
							synchro_date_mrp_production_product_line = synchro_date_mrp_production_product_line_tmp;
						} // closing filter/reject
							// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_179 = false;

					tos_count_tMap_179++;

					/**
					 * [tMap_179 main ] stop
					 */
					// Start of branch "controle_de_livraison_magento"
					if (controle_de_livraison_magento != null) {

						/**
						 * [tXMLRPCOpenDAS_3 main ] start
						 */

						currentComponent = "tXMLRPCOpenDAS_3";

						// DEBUG DISPLAY
						java.io.PrintStream consoleOut_tXMLRPCOpenDAS_3 = null;
						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tXMLRPCOpenDAS_3 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tXMLRPCOpenDAS_3 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tXMLRPCOpenDAS_3);
						}

						consoleOut_tXMLRPCOpenDAS_3.println("tXMLRPCOpenDAS_3"
								+ " received parameters : "
								+ controle_de_livraison_magento.toString());
						consoleOut_tXMLRPCOpenDAS_3.flush();

						// Retrieving input parameters (These parameters come
						// from tMomObjectInput)
						String title_tXMLRPCOpenDAS_3 = controle_de_livraison_magento.title;
						String sendUrl_tXMLRPCOpenDAS_3 = controle_de_livraison_magento.sendUrl;
						String fromUrl_tXMLRPCOpenDAS_3 = controle_de_livraison_magento.fromUrl;
						Date sendedDate_tXMLRPCOpenDAS_3 = controle_de_livraison_magento.sendedDate;
						String station_tXMLRPCOpenDAS_3 = controle_de_livraison_magento.station;
						java.util.Map checkingMap = (java.util.Map) controle_de_livraison_magento.attachement;

						Object[] tab = checkingMap.keySet().toArray();
						redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
						for (int i = 0; i < tab.length; i++) {
							if ("bl_magento".equals(tab[i])) {
								vals.put("id", checkingMap.get(tab[i]));
							}
							if ("produits_magento".equals(tab[i])) {
								vals.put("item_ids", checkingMap.get(tab[i]));
							}
						}
						// Initialization output parameters
						String title_out_tXMLRPCOpenDAS_3 = null;
						String sendUrl_out_tXMLRPCOpenDAS_3 = null;
						String fromUrl_out_tXMLRPCOpenDAS_3 = null;
						Date sendedDate_out_tXMLRPCOpenDAS_3 = null;
						String station_out_tXMLRPCOpenDAS_3 = null;
						Object attachement_out_tXMLRPCOpenDAS_3 = null;
						org.opendas.modele.DASError result = new org.opendas.modele.DASError();

						try {
							consoleOut_tXMLRPCOpenDAS_3
									.println("tXMLRPCOpenDAS_3"
											+ " Connexion Magento ");
							consoleOut_tXMLRPCOpenDAS_3.flush();
							OpenDAS_xmlrpc.Magento_connect connexiontXMLRPCOpenDAS_3 = new OpenDAS_xmlrpc.Magento_connect(
									context.username, context.pwd,
									context.host, context.port);

							java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();
							if (checkingMap.get("bl_magento") != null
									&& "=" != null) {
								context_search_tmp.add(new Object[] { "id",
										"=", checkingMap.get("bl_magento") });
							}

							Object[] context_search = new Object[context_search_tmp
									.size()];
							for (int i = 0; i < context_search_tmp.size(); ++i) {
								context_search[i] = context_search_tmp.get(i);
							}

							consoleOut_tXMLRPCOpenDAS_3
									.println("tXMLRPCOpenDAS_3" + " XMLRpc : "
											+ "opendas_shipping_order" + " "
											+ "create_shipment");
							consoleOut_tXMLRPCOpenDAS_3.flush();
							redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_3 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_3
									.exec("opendas_shipping_order",
											"create_shipment", vals,
											context_search);
							if (responsetXMLRPCOpenDAS_3 != null) {
								System.out
										.println("responsetXMLRPCOpenDAS_3 : "
												+ responsetXMLRPCOpenDAS_3);
								result.setCode(responsetXMLRPCOpenDAS_3
										.getInteger("code"));
								result.setString(responsetXMLRPCOpenDAS_3
										.getString("string"));
								java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

								redstone.xmlrpc.XmlRpcArray res_array = null;
								res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_3
										.get("object");

								Object retour = null;
								for (int i = 0; i < res_array.size(); ++i) {
									org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
									redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
									tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
											.get(i);
									tmp_generic
											.setInfos(connexiontXMLRPCOpenDAS_3
													.convert(tmp_dict));
									listgen.add(tmp_generic);
								}
								result.setObject(listgen);
							} else {
								System.out.println("ERROR : On ext response");

								result.setCode(1);

								result.setString("ERROR : On ext response");

							}

						} catch (redstone.xmlrpc.XmlRpcException e) {
							System.out
									.println("ERROR XMLRPC : " + e.toString());
							result.setCode(2);
							result.setString("ERROR XMLRPC : " + e.toString());
						} catch (Exception e) {
							System.out.println("ERROR : " + e.toString());
							result.setCode(3);
							result.setString("ERROR : " + e.toString());
						}
						System.out.println("result :" + result);

						// Transmission of parameters to tMomObjectOutput
						// component ( none output here)
						Object[] results_tXMLRPCOpenDAS_3 = {
								title_tXMLRPCOpenDAS_3,
								sendUrl_tXMLRPCOpenDAS_3,
								fromUrl_tXMLRPCOpenDAS_3,
								sendedDate_tXMLRPCOpenDAS_3,
								controle_de_livraison_magento.attachement,
								station_tXMLRPCOpenDAS_3,
								title_out_tXMLRPCOpenDAS_3,
								sendUrl_out_tXMLRPCOpenDAS_3,
								fromUrl_out_tXMLRPCOpenDAS_3,
								sendedDate_out_tXMLRPCOpenDAS_3, result,
								station_out_tXMLRPCOpenDAS_3 };

						for (int i_tXMLRPCOpenDAS_3 = 0; i_tXMLRPCOpenDAS_3 < results_tXMLRPCOpenDAS_3.length; i_tXMLRPCOpenDAS_3++) {

							// for output

							// We set the results in the output connections
							if (0 < results_tXMLRPCOpenDAS_3.length
									&& results_tXMLRPCOpenDAS_3[0] != null) {
								row17.title = (String) results_tXMLRPCOpenDAS_3[0];

							} else {
								row17.title = null;
							}

							// We set the results in the output connections
							if (1 < results_tXMLRPCOpenDAS_3.length
									&& results_tXMLRPCOpenDAS_3[1] != null) {
								row17.sendUrl = (String) results_tXMLRPCOpenDAS_3[1];

							} else {
								row17.sendUrl = null;
							}

							// We set the results in the output connections
							if (2 < results_tXMLRPCOpenDAS_3.length
									&& results_tXMLRPCOpenDAS_3[2] != null) {
								row17.fromUrl = (String) results_tXMLRPCOpenDAS_3[2];

							} else {
								row17.fromUrl = null;
							}

							// We set the results in the output connections
							if (3 < results_tXMLRPCOpenDAS_3.length
									&& results_tXMLRPCOpenDAS_3[3] != null) {
								row17.sendedDate = (Date) results_tXMLRPCOpenDAS_3[3];

							} else {
								row17.sendedDate = null;
							}

							// We set the results in the output connections
							if (4 < results_tXMLRPCOpenDAS_3.length
									&& results_tXMLRPCOpenDAS_3[4] != null) {
								row17.attachement = (Object) results_tXMLRPCOpenDAS_3[4];

							} else {
								row17.attachement = null;
							}

							// We set the results in the output connections
							if (5 < results_tXMLRPCOpenDAS_3.length
									&& results_tXMLRPCOpenDAS_3[5] != null) {
								row17.station = (String) results_tXMLRPCOpenDAS_3[5];

							} else {
								row17.station = null;
							}

							// We set the results in the output connections
							if (6 < results_tXMLRPCOpenDAS_3.length
									&& results_tXMLRPCOpenDAS_3[6] != null) {
								row17.title_out = (String) results_tXMLRPCOpenDAS_3[6];

							} else {
								row17.title_out = null;
							}

							// We set the results in the output connections
							if (7 < results_tXMLRPCOpenDAS_3.length
									&& results_tXMLRPCOpenDAS_3[7] != null) {
								row17.sendUrl_out = (String) results_tXMLRPCOpenDAS_3[7];

							} else {
								row17.sendUrl_out = null;
							}

							// We set the results in the output connections
							if (8 < results_tXMLRPCOpenDAS_3.length
									&& results_tXMLRPCOpenDAS_3[8] != null) {
								row17.fromUrl_out = (String) results_tXMLRPCOpenDAS_3[8];

							} else {
								row17.fromUrl_out = null;
							}

							// We set the results in the output connections
							if (9 < results_tXMLRPCOpenDAS_3.length
									&& results_tXMLRPCOpenDAS_3[9] != null) {
								row17.sendedDate_out = (Date) results_tXMLRPCOpenDAS_3[9];

							} else {
								row17.sendedDate_out = null;
							}

							// We set the results in the output connections
							if (10 < results_tXMLRPCOpenDAS_3.length
									&& results_tXMLRPCOpenDAS_3[10] != null) {
								row17.attachement_out = (Object) results_tXMLRPCOpenDAS_3[10];

							} else {
								row17.attachement_out = null;
							}

							// We set the results in the output connections
							if (11 < results_tXMLRPCOpenDAS_3.length
									&& results_tXMLRPCOpenDAS_3[11] != null) {
								row17.station_out = (String) results_tXMLRPCOpenDAS_3[11];

							} else {
								row17.station_out = null;
							}

						}

						tos_count_tXMLRPCOpenDAS_3++;

						/**
						 * [tXMLRPCOpenDAS_3 main ] stop
						 */
						// Start of branch "row17"
						if (row17 != null) {

							/**
							 * [tMomObjectOutput_40 main ] start
							 */

							currentComponent = "tMomObjectOutput_40";

							System.out.println("attachement :"
									+ row17.attachement);

							// on reconstitue le message d'origine
							org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
							previousRequest.setTitle(row17.title);
							previousRequest.setSendUrl(row17.sendUrl);
							previousRequest.setFromUrl(row17.fromUrl);
							previousRequest.setSendedDate(row17.sendedDate);
							previousRequest
									.setAttachement((java.io.Serializable) row17.attachement);

							// on crée le message de réponse
							org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
									previousRequest);
							response.setTitle(row17.title_out);
							response.setSendedDate(row17.sendedDate_out);
							response.setAttachement((java.io.Serializable) row17.attachement_out);

							javax.jms.ObjectMessage message_tMomObjectOutput_40 = session_tMomObjectOutput_40
									.createObjectMessage();// On crée
															// l'ObjectMessage
							message_tMomObjectOutput_40.setObject(response);
							message_tMomObjectOutput_40.setStringProperty(
									"Sujet", row17.station);

							System.out.println("----------------------------");
							System.out.println(response);
							System.out.println("----------------------------");

							des_tMomObjectOutput_40 = session_tMomObjectOutput_40
									.createQueue(response.getSendUrl());
							producer_tMomObjectOutput_40 = session_tMomObjectOutput_40
									.createProducer(des_tMomObjectOutput_40);
							producer_tMomObjectOutput_40
									.send(message_tMomObjectOutput_40);

							tos_count_tMomObjectOutput_40++;

							/**
							 * [tMomObjectOutput_40 main ] stop
							 */

						} // End of branch "row17"

					} // End of branch "controle_de_livraison_magento"

					// Start of branch "controle_de_livraison_asperpgi"
					if (controle_de_livraison_asperpgi != null) {

						/**
						 * [tXMLRPCOpenDAS_1 main ] start
						 */

						currentComponent = "tXMLRPCOpenDAS_1";

						// DEBUG DISPLAY
						java.io.PrintStream consoleOut_tXMLRPCOpenDAS_1 = null;
						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tXMLRPCOpenDAS_1 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tXMLRPCOpenDAS_1 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tXMLRPCOpenDAS_1);
						}

						consoleOut_tXMLRPCOpenDAS_1.println("tXMLRPCOpenDAS_1"
								+ " received parameters : "
								+ controle_de_livraison_asperpgi.toString());
						consoleOut_tXMLRPCOpenDAS_1.flush();

						// Retrieving input parameters (These parameters come
						// from tMomObjectInput)
						String title_tXMLRPCOpenDAS_1 = controle_de_livraison_asperpgi.title;
						String sendUrl_tXMLRPCOpenDAS_1 = controle_de_livraison_asperpgi.sendUrl;
						String fromUrl_tXMLRPCOpenDAS_1 = controle_de_livraison_asperpgi.fromUrl;
						Date sendedDate_tXMLRPCOpenDAS_1 = controle_de_livraison_asperpgi.sendedDate;
						String station_tXMLRPCOpenDAS_1 = controle_de_livraison_asperpgi.station;
						java.util.Map checkingMap = (java.util.Map) controle_de_livraison_asperpgi.attachement;

						Object[] tab = checkingMap.keySet().toArray();
						redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
						for (int i = 0; i < tab.length; i++) {
							if ("produits_asperpgi".equals(tab[i])) {
								vals.put("move_id", checkingMap.get(tab[i]));
							}
							if ("colis_asperpgi".equals(tab[i])) {
								vals.put("packaging_ids", checkingMap
										.get(tab[i]));
							}
							if ("bl_asperpgi".equals(tab[i])) {
								vals.put("picking_id", checkingMap.get(tab[i]));
							}
						}
						// Initialization output parameters
						String title_out_tXMLRPCOpenDAS_1 = null;
						String sendUrl_out_tXMLRPCOpenDAS_1 = null;
						String fromUrl_out_tXMLRPCOpenDAS_1 = null;
						Date sendedDate_out_tXMLRPCOpenDAS_1 = null;
						String station_out_tXMLRPCOpenDAS_1 = null;
						Object attachement_out_tXMLRPCOpenDAS_1 = null;
						org.opendas.modele.DASError result = new org.opendas.modele.DASError();

						try {
							consoleOut_tXMLRPCOpenDAS_1
									.println("tXMLRPCOpenDAS_1"
											+ " Connexion ASPerpgi ");
							consoleOut_tXMLRPCOpenDAS_1.flush();
							OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_1 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
									context.dbnameASPerpgi,
									context.usernameASPerpgi,
									context.pwdASPerpgi, context.hostASPerpgi,
									context.portASPerpgi);

							java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

							context_search_tmp.add(new Object[] { "state", "=",
									"follow" });

							Object[] context_search = new Object[context_search_tmp
									.size()];
							for (int i = 0; i < context_search_tmp.size(); ++i) {
								context_search[i] = context_search_tmp.get(i);
							}

							consoleOut_tXMLRPCOpenDAS_1
									.println("tXMLRPCOpenDAS_1" + " XMLRpc : "
											+ "stock.picking" + " "
											+ "talend_controle_de_livraison");
							consoleOut_tXMLRPCOpenDAS_1.flush();
							redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_1 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_1
									.exec("stock.picking",
											"talend_controle_de_livraison",
											vals, context_search);
							if (responsetXMLRPCOpenDAS_1 != null) {
								System.out
										.println("responsetXMLRPCOpenDAS_1 : "
												+ responsetXMLRPCOpenDAS_1);
								result.setCode(responsetXMLRPCOpenDAS_1
										.getInteger("code"));
								result.setString(responsetXMLRPCOpenDAS_1
										.getString("string"));
								java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

								redstone.xmlrpc.XmlRpcArray res_array = null;
								res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_1
										.get("object");

								Object retour = null;
								for (int i = 0; i < res_array.size(); ++i) {
									org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
									redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
									tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
											.get(i);
									tmp_generic
											.setInfos(connexiontXMLRPCOpenDAS_1
													.convert(tmp_dict));
									listgen.add(tmp_generic);
								}
								result.setObject(listgen);
							} else {
								System.out.println("ERROR : On ext response");

								result.setCode(1);

								result.setString("ERROR : On ext response");

							}

						} catch (redstone.xmlrpc.XmlRpcException e) {
							System.out
									.println("ERROR XMLRPC : " + e.toString());
							result.setCode(2);
							result.setString("ERROR XMLRPC : " + e.toString());
						} catch (Exception e) {
							System.out.println("ERROR : " + e.toString());
							result.setCode(3);
							result.setString("ERROR : " + e.toString());
						}
						System.out.println("result :" + result);

						// Transmission of parameters to tMomObjectOutput
						// component ( none output here)
						Object[] results_tXMLRPCOpenDAS_1 = {
								title_tXMLRPCOpenDAS_1,
								sendUrl_tXMLRPCOpenDAS_1,
								fromUrl_tXMLRPCOpenDAS_1,
								sendedDate_tXMLRPCOpenDAS_1,
								controle_de_livraison_asperpgi.attachement,
								station_tXMLRPCOpenDAS_1,
								title_out_tXMLRPCOpenDAS_1,
								sendUrl_out_tXMLRPCOpenDAS_1,
								fromUrl_out_tXMLRPCOpenDAS_1,
								sendedDate_out_tXMLRPCOpenDAS_1, result,
								station_out_tXMLRPCOpenDAS_1 };

						for (int i_tXMLRPCOpenDAS_1 = 0; i_tXMLRPCOpenDAS_1 < results_tXMLRPCOpenDAS_1.length; i_tXMLRPCOpenDAS_1++) {

							// for output

							// We set the results in the output connections
							if (0 < results_tXMLRPCOpenDAS_1.length
									&& results_tXMLRPCOpenDAS_1[0] != null) {
								row9.title = (String) results_tXMLRPCOpenDAS_1[0];

							} else {
								row9.title = null;
							}

							// We set the results in the output connections
							if (1 < results_tXMLRPCOpenDAS_1.length
									&& results_tXMLRPCOpenDAS_1[1] != null) {
								row9.sendUrl = (String) results_tXMLRPCOpenDAS_1[1];

							} else {
								row9.sendUrl = null;
							}

							// We set the results in the output connections
							if (2 < results_tXMLRPCOpenDAS_1.length
									&& results_tXMLRPCOpenDAS_1[2] != null) {
								row9.fromUrl = (String) results_tXMLRPCOpenDAS_1[2];

							} else {
								row9.fromUrl = null;
							}

							// We set the results in the output connections
							if (3 < results_tXMLRPCOpenDAS_1.length
									&& results_tXMLRPCOpenDAS_1[3] != null) {
								row9.sendedDate = (Date) results_tXMLRPCOpenDAS_1[3];

							} else {
								row9.sendedDate = null;
							}

							// We set the results in the output connections
							if (4 < results_tXMLRPCOpenDAS_1.length
									&& results_tXMLRPCOpenDAS_1[4] != null) {
								row9.attachement = (Object) results_tXMLRPCOpenDAS_1[4];

							} else {
								row9.attachement = null;
							}

							// We set the results in the output connections
							if (5 < results_tXMLRPCOpenDAS_1.length
									&& results_tXMLRPCOpenDAS_1[5] != null) {
								row9.station = (String) results_tXMLRPCOpenDAS_1[5];

							} else {
								row9.station = null;
							}

							// We set the results in the output connections
							if (6 < results_tXMLRPCOpenDAS_1.length
									&& results_tXMLRPCOpenDAS_1[6] != null) {
								row9.title_out = (String) results_tXMLRPCOpenDAS_1[6];

							} else {
								row9.title_out = null;
							}

							// We set the results in the output connections
							if (7 < results_tXMLRPCOpenDAS_1.length
									&& results_tXMLRPCOpenDAS_1[7] != null) {
								row9.send_out = (String) results_tXMLRPCOpenDAS_1[7];

							} else {
								row9.send_out = null;
							}

							// We set the results in the output connections
							if (8 < results_tXMLRPCOpenDAS_1.length
									&& results_tXMLRPCOpenDAS_1[8] != null) {
								row9.from_out = (String) results_tXMLRPCOpenDAS_1[8];

							} else {
								row9.from_out = null;
							}

							// We set the results in the output connections
							if (9 < results_tXMLRPCOpenDAS_1.length
									&& results_tXMLRPCOpenDAS_1[9] != null) {
								row9.sendedDate_out = (Date) results_tXMLRPCOpenDAS_1[9];

							} else {
								row9.sendedDate_out = null;
							}

							// We set the results in the output connections
							if (10 < results_tXMLRPCOpenDAS_1.length
									&& results_tXMLRPCOpenDAS_1[10] != null) {
								row9.attachement_out = (Object) results_tXMLRPCOpenDAS_1[10];

							} else {
								row9.attachement_out = null;
							}

							// We set the results in the output connections
							if (11 < results_tXMLRPCOpenDAS_1.length
									&& results_tXMLRPCOpenDAS_1[11] != null) {
								row9.station_out = (String) results_tXMLRPCOpenDAS_1[11];

							} else {
								row9.station_out = null;
							}

						}

						tos_count_tXMLRPCOpenDAS_1++;

						/**
						 * [tXMLRPCOpenDAS_1 main ] stop
						 */
						// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tMomObjectOutput_63 main ] start
							 */

							currentComponent = "tMomObjectOutput_63";

							System.out.println("attachement :"
									+ row9.attachement);

							// on reconstitue le message d'origine
							org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
							previousRequest.setTitle(row9.title);
							previousRequest.setSendUrl(row9.sendUrl);
							previousRequest.setFromUrl(row9.fromUrl);
							previousRequest.setSendedDate(row9.sendedDate);
							previousRequest
									.setAttachement((java.io.Serializable) row9.attachement);

							// on crée le message de réponse
							org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
									previousRequest);
							response.setTitle(row9.title_out);
							response.setSendedDate(row9.sendedDate_out);
							response.setAttachement((java.io.Serializable) row9.attachement_out);

							javax.jms.ObjectMessage message_tMomObjectOutput_63 = session_tMomObjectOutput_63
									.createObjectMessage();// On crée
															// l'ObjectMessage
							message_tMomObjectOutput_63.setObject(response);
							message_tMomObjectOutput_63.setStringProperty(
									"Sujet", row9.station);

							System.out.println("----------------------------");
							System.out.println(response);
							System.out.println("----------------------------");

							des_tMomObjectOutput_63 = session_tMomObjectOutput_63
									.createQueue(response.getSendUrl());
							producer_tMomObjectOutput_63 = session_tMomObjectOutput_63
									.createProducer(des_tMomObjectOutput_63);
							producer_tMomObjectOutput_63
									.send(message_tMomObjectOutput_63);

							tos_count_tMomObjectOutput_63++;

							/**
							 * [tMomObjectOutput_63 main ] stop
							 */

						} // End of branch "row9"

					} // End of branch "controle_de_livraison_asperpgi"

					// Start of branch "pointage"
					if (pointage != null) {

						/**
						 * [tXMLRPCOpenDAS_5 main ] start
						 */

						currentComponent = "tXMLRPCOpenDAS_5";

						// DEBUG DISPLAY
						java.io.PrintStream consoleOut_tXMLRPCOpenDAS_5 = null;
						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tXMLRPCOpenDAS_5 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tXMLRPCOpenDAS_5 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tXMLRPCOpenDAS_5);
						}

						consoleOut_tXMLRPCOpenDAS_5.println("tXMLRPCOpenDAS_5"
								+ " received parameters : "
								+ pointage.toString());
						consoleOut_tXMLRPCOpenDAS_5.flush();

						// Retrieving input parameters (These parameters come
						// from tMomObjectInput)
						String title_tXMLRPCOpenDAS_5 = pointage.title;
						String sendUrl_tXMLRPCOpenDAS_5 = pointage.sendUrl;
						String fromUrl_tXMLRPCOpenDAS_5 = pointage.fromUrl;
						Date sendedDate_tXMLRPCOpenDAS_5 = pointage.sendedDate;
						String station_tXMLRPCOpenDAS_5 = pointage.station;
						java.util.Map checkingMap = (java.util.Map) pointage.attachement;

						Object[] tab = checkingMap.keySet().toArray();
						redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
						for (int i = 0; i < tab.length; i++) {
							if ("perso".equals(tab[i])) {
								vals.put("employee", checkingMap.get(tab[i]));
							}
						}
						// Initialization output parameters
						String title_out_tXMLRPCOpenDAS_5 = null;
						String sendUrl_out_tXMLRPCOpenDAS_5 = null;
						String fromUrl_out_tXMLRPCOpenDAS_5 = null;
						Date sendedDate_out_tXMLRPCOpenDAS_5 = null;
						String station_out_tXMLRPCOpenDAS_5 = null;
						Object attachement_out_tXMLRPCOpenDAS_5 = null;
						org.opendas.modele.DASError result = new org.opendas.modele.DASError();

						try {
							consoleOut_tXMLRPCOpenDAS_5
									.println("tXMLRPCOpenDAS_5"
											+ " Connexion ASPerpgi ");
							consoleOut_tXMLRPCOpenDAS_5.flush();
							OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_5 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
									context.dbnameASPerpgi,
									context.usernameASPerpgi,
									context.pwdASPerpgi, context.hostASPerpgi,
									context.portASPerpgi);

							java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

							Object[] context_search = new Object[context_search_tmp
									.size()];
							for (int i = 0; i < context_search_tmp.size(); ++i) {
								context_search[i] = context_search_tmp.get(i);
							}

							consoleOut_tXMLRPCOpenDAS_5
									.println("tXMLRPCOpenDAS_5" + " XMLRpc : "
											+ "hr.employee" + " "
											+ "talend_in_out_barre");
							consoleOut_tXMLRPCOpenDAS_5.flush();
							redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_5 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_5
									.exec("hr.employee", "talend_in_out_barre",
											vals, context_search);
							if (responsetXMLRPCOpenDAS_5 != null) {
								System.out
										.println("responsetXMLRPCOpenDAS_5 : "
												+ responsetXMLRPCOpenDAS_5);
								result.setCode(responsetXMLRPCOpenDAS_5
										.getInteger("code"));
								result.setString(responsetXMLRPCOpenDAS_5
										.getString("string"));
								java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

								redstone.xmlrpc.XmlRpcArray res_array = null;
								res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_5
										.get("object");

								Object retour = null;
								for (int i = 0; i < res_array.size(); ++i) {
									org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
									redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
									tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
											.get(i);
									tmp_generic
											.setInfos(connexiontXMLRPCOpenDAS_5
													.convert(tmp_dict));
									listgen.add(tmp_generic);
								}
								result.setObject(listgen);
							} else {
								System.out.println("ERROR : On ext response");

								result.setCode(1);

								result.setString("ERROR : On ext response");

							}

						} catch (redstone.xmlrpc.XmlRpcException e) {
							System.out
									.println("ERROR XMLRPC : " + e.toString());
							result.setCode(2);
							result.setString("ERROR XMLRPC : " + e.toString());
						} catch (Exception e) {
							System.out.println("ERROR : " + e.toString());
							result.setCode(3);
							result.setString("ERROR : " + e.toString());
						}
						System.out.println("result :" + result);

						// Transmission of parameters to tMomObjectOutput
						// component ( none output here)
						Object[] results_tXMLRPCOpenDAS_5 = {
								title_tXMLRPCOpenDAS_5,
								sendUrl_tXMLRPCOpenDAS_5,
								fromUrl_tXMLRPCOpenDAS_5,
								sendedDate_tXMLRPCOpenDAS_5,
								pointage.attachement, station_tXMLRPCOpenDAS_5,
								title_out_tXMLRPCOpenDAS_5,
								sendUrl_out_tXMLRPCOpenDAS_5,
								fromUrl_out_tXMLRPCOpenDAS_5,
								sendedDate_out_tXMLRPCOpenDAS_5, result,
								station_out_tXMLRPCOpenDAS_5 };

						for (int i_tXMLRPCOpenDAS_5 = 0; i_tXMLRPCOpenDAS_5 < results_tXMLRPCOpenDAS_5.length; i_tXMLRPCOpenDAS_5++) {

							// for output

							// We set the results in the output connections
							if (0 < results_tXMLRPCOpenDAS_5.length
									&& results_tXMLRPCOpenDAS_5[0] != null) {
								row2.title = (String) results_tXMLRPCOpenDAS_5[0];

							} else {
								row2.title = null;
							}

							// We set the results in the output connections
							if (1 < results_tXMLRPCOpenDAS_5.length
									&& results_tXMLRPCOpenDAS_5[1] != null) {
								row2.sendUrl = (String) results_tXMLRPCOpenDAS_5[1];

							} else {
								row2.sendUrl = null;
							}

							// We set the results in the output connections
							if (2 < results_tXMLRPCOpenDAS_5.length
									&& results_tXMLRPCOpenDAS_5[2] != null) {
								row2.fromUrl = (String) results_tXMLRPCOpenDAS_5[2];

							} else {
								row2.fromUrl = null;
							}

							// We set the results in the output connections
							if (3 < results_tXMLRPCOpenDAS_5.length
									&& results_tXMLRPCOpenDAS_5[3] != null) {
								row2.sendedDate = (Date) results_tXMLRPCOpenDAS_5[3];

							} else {
								row2.sendedDate = null;
							}

							// We set the results in the output connections
							if (4 < results_tXMLRPCOpenDAS_5.length
									&& results_tXMLRPCOpenDAS_5[4] != null) {
								row2.attachement = (Object) results_tXMLRPCOpenDAS_5[4];

							} else {
								row2.attachement = null;
							}

							// We set the results in the output connections
							if (5 < results_tXMLRPCOpenDAS_5.length
									&& results_tXMLRPCOpenDAS_5[5] != null) {
								row2.station = (String) results_tXMLRPCOpenDAS_5[5];

							} else {
								row2.station = null;
							}

							// We set the results in the output connections
							if (6 < results_tXMLRPCOpenDAS_5.length
									&& results_tXMLRPCOpenDAS_5[6] != null) {
								row2.title_out = (String) results_tXMLRPCOpenDAS_5[6];

							} else {
								row2.title_out = null;
							}

							// We set the results in the output connections
							if (7 < results_tXMLRPCOpenDAS_5.length
									&& results_tXMLRPCOpenDAS_5[7] != null) {
								row2.send_out = (String) results_tXMLRPCOpenDAS_5[7];

							} else {
								row2.send_out = null;
							}

							// We set the results in the output connections
							if (8 < results_tXMLRPCOpenDAS_5.length
									&& results_tXMLRPCOpenDAS_5[8] != null) {
								row2.from_out = (String) results_tXMLRPCOpenDAS_5[8];

							} else {
								row2.from_out = null;
							}

							// We set the results in the output connections
							if (9 < results_tXMLRPCOpenDAS_5.length
									&& results_tXMLRPCOpenDAS_5[9] != null) {
								row2.sendedDate_out = (Date) results_tXMLRPCOpenDAS_5[9];

							} else {
								row2.sendedDate_out = null;
							}

							// We set the results in the output connections
							if (10 < results_tXMLRPCOpenDAS_5.length
									&& results_tXMLRPCOpenDAS_5[10] != null) {
								row2.attachement_out = (Object) results_tXMLRPCOpenDAS_5[10];

							} else {
								row2.attachement_out = null;
							}

							// We set the results in the output connections
							if (11 < results_tXMLRPCOpenDAS_5.length
									&& results_tXMLRPCOpenDAS_5[11] != null) {
								row2.station_out = (String) results_tXMLRPCOpenDAS_5[11];

							} else {
								row2.station_out = null;
							}

						}

						tos_count_tXMLRPCOpenDAS_5++;

						/**
						 * [tXMLRPCOpenDAS_5 main ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tMomObjectOutput_11 main ] start
							 */

							currentComponent = "tMomObjectOutput_11";

							System.out.println("attachement :"
									+ row2.attachement);

							// on reconstitue le message d'origine
							org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
							previousRequest.setTitle(row2.title);
							previousRequest.setSendUrl(row2.sendUrl);
							previousRequest.setFromUrl(row2.fromUrl);
							previousRequest.setSendedDate(row2.sendedDate);
							previousRequest
									.setAttachement((java.io.Serializable) row2.attachement);

							// on crée le message de réponse
							org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
									previousRequest);
							response.setTitle(row2.title_out);
							response.setSendedDate(row2.sendedDate_out);
							response.setAttachement((java.io.Serializable) row2.attachement_out);

							javax.jms.ObjectMessage message_tMomObjectOutput_11 = session_tMomObjectOutput_11
									.createObjectMessage();// On crée
															// l'ObjectMessage
							message_tMomObjectOutput_11.setObject(response);
							message_tMomObjectOutput_11.setStringProperty(
									"Sujet", row2.station);

							System.out.println("----------------------------");
							System.out.println(response);
							System.out.println("----------------------------");

							des_tMomObjectOutput_11 = session_tMomObjectOutput_11
									.createQueue(response.getSendUrl());
							producer_tMomObjectOutput_11 = session_tMomObjectOutput_11
									.createProducer(des_tMomObjectOutput_11);
							producer_tMomObjectOutput_11
									.send(message_tMomObjectOutput_11);

							tos_count_tMomObjectOutput_11++;

							/**
							 * [tMomObjectOutput_11 main ] stop
							 */

						} // End of branch "row2"

					} // End of branch "pointage"

					// Start of branch "tracking_asperpgi"
					if (tracking_asperpgi != null) {

						/**
						 * [tXMLRPCOpenDAS_6 main ] start
						 */

						currentComponent = "tXMLRPCOpenDAS_6";

						// DEBUG DISPLAY
						java.io.PrintStream consoleOut_tXMLRPCOpenDAS_6 = null;
						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tXMLRPCOpenDAS_6 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tXMLRPCOpenDAS_6 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tXMLRPCOpenDAS_6);
						}

						consoleOut_tXMLRPCOpenDAS_6.println("tXMLRPCOpenDAS_6"
								+ " received parameters : "
								+ tracking_asperpgi.toString());
						consoleOut_tXMLRPCOpenDAS_6.flush();

						// Retrieving input parameters (These parameters come
						// from tMomObjectInput)
						String title_tXMLRPCOpenDAS_6 = tracking_asperpgi.title;
						String sendUrl_tXMLRPCOpenDAS_6 = tracking_asperpgi.sendUrl;
						String fromUrl_tXMLRPCOpenDAS_6 = tracking_asperpgi.fromUrl;
						Date sendedDate_tXMLRPCOpenDAS_6 = tracking_asperpgi.sendedDate;
						String station_tXMLRPCOpenDAS_6 = tracking_asperpgi.station;
						java.util.Map checkingMap = (java.util.Map) tracking_asperpgi.attachement;

						Object[] tab = checkingMap.keySet().toArray();
						redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
						for (int i = 0; i < tab.length; i++) {
							if ("etiquettes".equals(tab[i])) {
								vals.put("package", checkingMap.get(tab[i]));
							}
						}
						// Initialization output parameters
						String title_out_tXMLRPCOpenDAS_6 = null;
						String sendUrl_out_tXMLRPCOpenDAS_6 = null;
						String fromUrl_out_tXMLRPCOpenDAS_6 = null;
						Date sendedDate_out_tXMLRPCOpenDAS_6 = null;
						String station_out_tXMLRPCOpenDAS_6 = null;
						Object attachement_out_tXMLRPCOpenDAS_6 = null;
						org.opendas.modele.DASError result = new org.opendas.modele.DASError();

						try {
							consoleOut_tXMLRPCOpenDAS_6
									.println("tXMLRPCOpenDAS_6"
											+ " Connexion ASPerpgi ");
							consoleOut_tXMLRPCOpenDAS_6.flush();
							OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_6 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
									context.dbnameASPerpgi,
									context.usernameASPerpgi,
									context.pwdASPerpgi, context.hostASPerpgi,
									context.portASPerpgi);

							java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

							Object[] context_search = new Object[context_search_tmp
									.size()];
							for (int i = 0; i < context_search_tmp.size(); ++i) {
								context_search[i] = context_search_tmp.get(i);
							}

							consoleOut_tXMLRPCOpenDAS_6
									.println("tXMLRPCOpenDAS_6" + " XMLRpc : "
											+ "stock.move.packaging" + " "
											+ "talend_tracking_asperpgi");
							consoleOut_tXMLRPCOpenDAS_6.flush();
							redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_6 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_6
									.exec("stock.move.packaging",
											"talend_tracking_asperpgi", vals,
											context_search);
							if (responsetXMLRPCOpenDAS_6 != null) {
								System.out
										.println("responsetXMLRPCOpenDAS_6 : "
												+ responsetXMLRPCOpenDAS_6);
								result.setCode(responsetXMLRPCOpenDAS_6
										.getInteger("code"));
								result.setString(responsetXMLRPCOpenDAS_6
										.getString("string"));
								java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

								redstone.xmlrpc.XmlRpcArray res_array = null;
								res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_6
										.get("object");

								Object retour = null;
								for (int i = 0; i < res_array.size(); ++i) {
									org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
									redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
									tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
											.get(i);
									tmp_generic
											.setInfos(connexiontXMLRPCOpenDAS_6
													.convert(tmp_dict));
									listgen.add(tmp_generic);
								}
								result.setObject(listgen);
							} else {
								System.out.println("ERROR : On ext response");

								result.setCode(1);

								result.setString("ERROR : On ext response");

							}

						} catch (redstone.xmlrpc.XmlRpcException e) {
							System.out
									.println("ERROR XMLRPC : " + e.toString());
							result.setCode(2);
							result.setString("ERROR XMLRPC : " + e.toString());
						} catch (Exception e) {
							System.out.println("ERROR : " + e.toString());
							result.setCode(3);
							result.setString("ERROR : " + e.toString());
						}
						System.out.println("result :" + result);

						// Transmission of parameters to tMomObjectOutput
						// component ( none output here)
						Object[] results_tXMLRPCOpenDAS_6 = {
								title_tXMLRPCOpenDAS_6,
								sendUrl_tXMLRPCOpenDAS_6,
								fromUrl_tXMLRPCOpenDAS_6,
								sendedDate_tXMLRPCOpenDAS_6,
								tracking_asperpgi.attachement,
								station_tXMLRPCOpenDAS_6,
								title_out_tXMLRPCOpenDAS_6,
								sendUrl_out_tXMLRPCOpenDAS_6,
								fromUrl_out_tXMLRPCOpenDAS_6,
								sendedDate_out_tXMLRPCOpenDAS_6, result,
								station_out_tXMLRPCOpenDAS_6 };

						for (int i_tXMLRPCOpenDAS_6 = 0; i_tXMLRPCOpenDAS_6 < results_tXMLRPCOpenDAS_6.length; i_tXMLRPCOpenDAS_6++) {

							// for output

							// We set the results in the output connections
							if (0 < results_tXMLRPCOpenDAS_6.length
									&& results_tXMLRPCOpenDAS_6[0] != null) {
								row3.title = (String) results_tXMLRPCOpenDAS_6[0];

							} else {
								row3.title = null;
							}

							// We set the results in the output connections
							if (1 < results_tXMLRPCOpenDAS_6.length
									&& results_tXMLRPCOpenDAS_6[1] != null) {
								row3.sendUrl = (String) results_tXMLRPCOpenDAS_6[1];

							} else {
								row3.sendUrl = null;
							}

							// We set the results in the output connections
							if (2 < results_tXMLRPCOpenDAS_6.length
									&& results_tXMLRPCOpenDAS_6[2] != null) {
								row3.fromUrl = (String) results_tXMLRPCOpenDAS_6[2];

							} else {
								row3.fromUrl = null;
							}

							// We set the results in the output connections
							if (3 < results_tXMLRPCOpenDAS_6.length
									&& results_tXMLRPCOpenDAS_6[3] != null) {
								row3.sendedDate = (Date) results_tXMLRPCOpenDAS_6[3];

							} else {
								row3.sendedDate = null;
							}

							// We set the results in the output connections
							if (4 < results_tXMLRPCOpenDAS_6.length
									&& results_tXMLRPCOpenDAS_6[4] != null) {
								row3.attachement = (Object) results_tXMLRPCOpenDAS_6[4];

							} else {
								row3.attachement = null;
							}

							// We set the results in the output connections
							if (5 < results_tXMLRPCOpenDAS_6.length
									&& results_tXMLRPCOpenDAS_6[5] != null) {
								row3.station = (String) results_tXMLRPCOpenDAS_6[5];

							} else {
								row3.station = null;
							}

							// We set the results in the output connections
							if (6 < results_tXMLRPCOpenDAS_6.length
									&& results_tXMLRPCOpenDAS_6[6] != null) {
								row3.title_out = (String) results_tXMLRPCOpenDAS_6[6];

							} else {
								row3.title_out = null;
							}

							// We set the results in the output connections
							if (7 < results_tXMLRPCOpenDAS_6.length
									&& results_tXMLRPCOpenDAS_6[7] != null) {
								row3.sendUrl_out = (String) results_tXMLRPCOpenDAS_6[7];

							} else {
								row3.sendUrl_out = null;
							}

							// We set the results in the output connections
							if (8 < results_tXMLRPCOpenDAS_6.length
									&& results_tXMLRPCOpenDAS_6[8] != null) {
								row3.fromUrl_out = (String) results_tXMLRPCOpenDAS_6[8];

							} else {
								row3.fromUrl_out = null;
							}

							// We set the results in the output connections
							if (9 < results_tXMLRPCOpenDAS_6.length
									&& results_tXMLRPCOpenDAS_6[9] != null) {
								row3.sendedDate_out = (Date) results_tXMLRPCOpenDAS_6[9];

							} else {
								row3.sendedDate_out = null;
							}

							// We set the results in the output connections
							if (10 < results_tXMLRPCOpenDAS_6.length
									&& results_tXMLRPCOpenDAS_6[10] != null) {
								row3.attachement_out = (Object) results_tXMLRPCOpenDAS_6[10];

							} else {
								row3.attachement_out = null;
							}

							// We set the results in the output connections
							if (11 < results_tXMLRPCOpenDAS_6.length
									&& results_tXMLRPCOpenDAS_6[11] != null) {
								row3.station_out = (String) results_tXMLRPCOpenDAS_6[11];

							} else {
								row3.station_out = null;
							}

						}

						tos_count_tXMLRPCOpenDAS_6++;

						/**
						 * [tXMLRPCOpenDAS_6 main ] stop
						 */
						// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tMomObjectOutput_7 main ] start
							 */

							currentComponent = "tMomObjectOutput_7";

							System.out.println("attachement :"
									+ row3.attachement);

							// on reconstitue le message d'origine
							org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
							previousRequest.setTitle(row3.title);
							previousRequest.setSendUrl(row3.sendUrl);
							previousRequest.setFromUrl(row3.fromUrl);
							previousRequest.setSendedDate(row3.sendedDate);
							previousRequest
									.setAttachement((java.io.Serializable) row3.attachement);

							// on crée le message de réponse
							org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
									previousRequest);
							response.setTitle(row3.title_out);
							response.setSendedDate(row3.sendedDate_out);
							response.setAttachement((java.io.Serializable) row3.attachement_out);

							javax.jms.ObjectMessage message_tMomObjectOutput_7 = session_tMomObjectOutput_7
									.createObjectMessage();// On crée
															// l'ObjectMessage
							message_tMomObjectOutput_7.setObject(response);
							message_tMomObjectOutput_7.setStringProperty(
									"Sujet", row3.station);

							System.out.println("----------------------------");
							System.out.println(response);
							System.out.println("----------------------------");

							des_tMomObjectOutput_7 = session_tMomObjectOutput_7
									.createQueue(response.getSendUrl());
							producer_tMomObjectOutput_7 = session_tMomObjectOutput_7
									.createProducer(des_tMomObjectOutput_7);
							producer_tMomObjectOutput_7
									.send(message_tMomObjectOutput_7);

							tos_count_tMomObjectOutput_7++;

							/**
							 * [tMomObjectOutput_7 main ] stop
							 */

						} // End of branch "row3"

					} // End of branch "tracking_asperpgi"

					// Start of branch "delete_asperpgi"
					if (delete_asperpgi != null) {

						/**
						 * [tXMLRPCOpenDAS_7 main ] start
						 */

						currentComponent = "tXMLRPCOpenDAS_7";

						// DEBUG DISPLAY
						java.io.PrintStream consoleOut_tXMLRPCOpenDAS_7 = null;
						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tXMLRPCOpenDAS_7 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tXMLRPCOpenDAS_7 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tXMLRPCOpenDAS_7);
						}

						consoleOut_tXMLRPCOpenDAS_7.println("tXMLRPCOpenDAS_7"
								+ " received parameters : "
								+ delete_asperpgi.toString());
						consoleOut_tXMLRPCOpenDAS_7.flush();

						// Retrieving input parameters (These parameters come
						// from tMomObjectInput)
						String title_tXMLRPCOpenDAS_7 = delete_asperpgi.title;
						String sendUrl_tXMLRPCOpenDAS_7 = delete_asperpgi.sendUrl;
						String fromUrl_tXMLRPCOpenDAS_7 = delete_asperpgi.fromUrl;
						Date sendedDate_tXMLRPCOpenDAS_7 = delete_asperpgi.sendedDate;
						String station_tXMLRPCOpenDAS_7 = delete_asperpgi.station;
						java.util.Map checkingMap = (java.util.Map) delete_asperpgi.attachement;

						Object[] tab = checkingMap.keySet().toArray();
						redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
						for (int i = 0; i < tab.length; i++) {
							if ("etiquettes".equals(tab[i])) {
								vals.put("package", checkingMap.get(tab[i]));
							}
						}
						// Initialization output parameters
						String title_out_tXMLRPCOpenDAS_7 = null;
						String sendUrl_out_tXMLRPCOpenDAS_7 = null;
						String fromUrl_out_tXMLRPCOpenDAS_7 = null;
						Date sendedDate_out_tXMLRPCOpenDAS_7 = null;
						String station_out_tXMLRPCOpenDAS_7 = null;
						Object attachement_out_tXMLRPCOpenDAS_7 = null;
						org.opendas.modele.DASError result = new org.opendas.modele.DASError();

						try {
							consoleOut_tXMLRPCOpenDAS_7
									.println("tXMLRPCOpenDAS_7"
											+ " Connexion ASPerpgi ");
							consoleOut_tXMLRPCOpenDAS_7.flush();
							OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_7 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
									context.dbnameASPerpgi,
									context.usernameASPerpgi,
									context.pwdASPerpgi, context.hostASPerpgi,
									context.portASPerpgi);

							java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

							Object[] context_search = new Object[context_search_tmp
									.size()];
							for (int i = 0; i < context_search_tmp.size(); ++i) {
								context_search[i] = context_search_tmp.get(i);
							}

							consoleOut_tXMLRPCOpenDAS_7
									.println("tXMLRPCOpenDAS_7" + " XMLRpc : "
											+ "stock.move.packaging" + " "
											+ "talend_delete_asperpgi");
							consoleOut_tXMLRPCOpenDAS_7.flush();
							redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_7 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_7
									.exec("stock.move.packaging",
											"talend_delete_asperpgi", vals,
											context_search);
							if (responsetXMLRPCOpenDAS_7 != null) {
								System.out
										.println("responsetXMLRPCOpenDAS_7 : "
												+ responsetXMLRPCOpenDAS_7);
								result.setCode(responsetXMLRPCOpenDAS_7
										.getInteger("code"));
								result.setString(responsetXMLRPCOpenDAS_7
										.getString("string"));
								java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

								redstone.xmlrpc.XmlRpcArray res_array = null;
								res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_7
										.get("object");

								Object retour = null;
								for (int i = 0; i < res_array.size(); ++i) {
									org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
									redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
									tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
											.get(i);
									tmp_generic
											.setInfos(connexiontXMLRPCOpenDAS_7
													.convert(tmp_dict));
									listgen.add(tmp_generic);
								}
								result.setObject(listgen);
							} else {
								System.out.println("ERROR : On ext response");

								result.setCode(1);

								result.setString("ERROR : On ext response");

							}

						} catch (redstone.xmlrpc.XmlRpcException e) {
							System.out
									.println("ERROR XMLRPC : " + e.toString());
							result.setCode(2);
							result.setString("ERROR XMLRPC : " + e.toString());
						} catch (Exception e) {
							System.out.println("ERROR : " + e.toString());
							result.setCode(3);
							result.setString("ERROR : " + e.toString());
						}
						System.out.println("result :" + result);

						// Transmission of parameters to tMomObjectOutput
						// component ( none output here)
						Object[] results_tXMLRPCOpenDAS_7 = {
								title_tXMLRPCOpenDAS_7,
								sendUrl_tXMLRPCOpenDAS_7,
								fromUrl_tXMLRPCOpenDAS_7,
								sendedDate_tXMLRPCOpenDAS_7,
								delete_asperpgi.attachement,
								station_tXMLRPCOpenDAS_7,
								title_out_tXMLRPCOpenDAS_7,
								sendUrl_out_tXMLRPCOpenDAS_7,
								fromUrl_out_tXMLRPCOpenDAS_7,
								sendedDate_out_tXMLRPCOpenDAS_7, result,
								station_out_tXMLRPCOpenDAS_7 };

						for (int i_tXMLRPCOpenDAS_7 = 0; i_tXMLRPCOpenDAS_7 < results_tXMLRPCOpenDAS_7.length; i_tXMLRPCOpenDAS_7++) {

							// for output

							// We set the results in the output connections
							if (0 < results_tXMLRPCOpenDAS_7.length
									&& results_tXMLRPCOpenDAS_7[0] != null) {
								row4.title = (String) results_tXMLRPCOpenDAS_7[0];

							} else {
								row4.title = null;
							}

							// We set the results in the output connections
							if (1 < results_tXMLRPCOpenDAS_7.length
									&& results_tXMLRPCOpenDAS_7[1] != null) {
								row4.sendUrl = (String) results_tXMLRPCOpenDAS_7[1];

							} else {
								row4.sendUrl = null;
							}

							// We set the results in the output connections
							if (2 < results_tXMLRPCOpenDAS_7.length
									&& results_tXMLRPCOpenDAS_7[2] != null) {
								row4.fromUrl = (String) results_tXMLRPCOpenDAS_7[2];

							} else {
								row4.fromUrl = null;
							}

							// We set the results in the output connections
							if (3 < results_tXMLRPCOpenDAS_7.length
									&& results_tXMLRPCOpenDAS_7[3] != null) {
								row4.sendedDate = (Date) results_tXMLRPCOpenDAS_7[3];

							} else {
								row4.sendedDate = null;
							}

							// We set the results in the output connections
							if (4 < results_tXMLRPCOpenDAS_7.length
									&& results_tXMLRPCOpenDAS_7[4] != null) {
								row4.attachement = (Object) results_tXMLRPCOpenDAS_7[4];

							} else {
								row4.attachement = null;
							}

							// We set the results in the output connections
							if (5 < results_tXMLRPCOpenDAS_7.length
									&& results_tXMLRPCOpenDAS_7[5] != null) {
								row4.station = (String) results_tXMLRPCOpenDAS_7[5];

							} else {
								row4.station = null;
							}

							// We set the results in the output connections
							if (6 < results_tXMLRPCOpenDAS_7.length
									&& results_tXMLRPCOpenDAS_7[6] != null) {
								row4.title_out = (String) results_tXMLRPCOpenDAS_7[6];

							} else {
								row4.title_out = null;
							}

							// We set the results in the output connections
							if (7 < results_tXMLRPCOpenDAS_7.length
									&& results_tXMLRPCOpenDAS_7[7] != null) {
								row4.sendUrl_out = (String) results_tXMLRPCOpenDAS_7[7];

							} else {
								row4.sendUrl_out = null;
							}

							// We set the results in the output connections
							if (8 < results_tXMLRPCOpenDAS_7.length
									&& results_tXMLRPCOpenDAS_7[8] != null) {
								row4.fromUrl_out = (String) results_tXMLRPCOpenDAS_7[8];

							} else {
								row4.fromUrl_out = null;
							}

							// We set the results in the output connections
							if (9 < results_tXMLRPCOpenDAS_7.length
									&& results_tXMLRPCOpenDAS_7[9] != null) {
								row4.sendedDate_out = (Date) results_tXMLRPCOpenDAS_7[9];

							} else {
								row4.sendedDate_out = null;
							}

							// We set the results in the output connections
							if (10 < results_tXMLRPCOpenDAS_7.length
									&& results_tXMLRPCOpenDAS_7[10] != null) {
								row4.attachement_out = (Object) results_tXMLRPCOpenDAS_7[10];

							} else {
								row4.attachement_out = null;
							}

							// We set the results in the output connections
							if (11 < results_tXMLRPCOpenDAS_7.length
									&& results_tXMLRPCOpenDAS_7[11] != null) {
								row4.station_out = (String) results_tXMLRPCOpenDAS_7[11];

							} else {
								row4.station_out = null;
							}

						}

						tos_count_tXMLRPCOpenDAS_7++;

						/**
						 * [tXMLRPCOpenDAS_7 main ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tMomObjectOutput_8 main ] start
							 */

							currentComponent = "tMomObjectOutput_8";

							System.out.println("attachement :"
									+ row4.attachement);

							// on reconstitue le message d'origine
							org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
							previousRequest.setTitle(row4.title);
							previousRequest.setSendUrl(row4.sendUrl);
							previousRequest.setFromUrl(row4.fromUrl);
							previousRequest.setSendedDate(row4.sendedDate);
							previousRequest
									.setAttachement((java.io.Serializable) row4.attachement);

							// on crée le message de réponse
							org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
									previousRequest);
							response.setTitle(row4.title_out);
							response.setSendedDate(row4.sendedDate_out);
							response.setAttachement((java.io.Serializable) row4.attachement_out);

							javax.jms.ObjectMessage message_tMomObjectOutput_8 = session_tMomObjectOutput_8
									.createObjectMessage();// On crée
															// l'ObjectMessage
							message_tMomObjectOutput_8.setObject(response);
							message_tMomObjectOutput_8.setStringProperty(
									"Sujet", row4.station);

							System.out.println("----------------------------");
							System.out.println(response);
							System.out.println("----------------------------");

							des_tMomObjectOutput_8 = session_tMomObjectOutput_8
									.createQueue(response.getSendUrl());
							producer_tMomObjectOutput_8 = session_tMomObjectOutput_8
									.createProducer(des_tMomObjectOutput_8);
							producer_tMomObjectOutput_8
									.send(message_tMomObjectOutput_8);

							tos_count_tMomObjectOutput_8++;

							/**
							 * [tMomObjectOutput_8 main ] stop
							 */

						} // End of branch "row4"

					} // End of branch "delete_asperpgi"

					// Start of branch "entree"
					if (entree != null) {

						/**
						 * [tXMLRPCOpenDAS_8 main ] start
						 */

						currentComponent = "tXMLRPCOpenDAS_8";

						// DEBUG DISPLAY
						java.io.PrintStream consoleOut_tXMLRPCOpenDAS_8 = null;
						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tXMLRPCOpenDAS_8 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tXMLRPCOpenDAS_8 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tXMLRPCOpenDAS_8);
						}

						consoleOut_tXMLRPCOpenDAS_8
								.println("tXMLRPCOpenDAS_8"
										+ " received parameters : "
										+ entree.toString());
						consoleOut_tXMLRPCOpenDAS_8.flush();

						// Retrieving input parameters (These parameters come
						// from tMomObjectInput)
						String title_tXMLRPCOpenDAS_8 = entree.title;
						String sendUrl_tXMLRPCOpenDAS_8 = entree.sendUrl;
						String fromUrl_tXMLRPCOpenDAS_8 = entree.fromUrl;
						Date sendedDate_tXMLRPCOpenDAS_8 = entree.sendedDate;
						String station_tXMLRPCOpenDAS_8 = entree.station;
						java.util.Map checkingMap = (java.util.Map) entree.attachement;

						Object[] tab = checkingMap.keySet().toArray();
						redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
						for (int i = 0; i < tab.length; i++) {
							if ("persoout".equals(tab[i])) {
								vals.put("employee", checkingMap.get(tab[i]));
							}
							if ("_workstation".equals(tab[i])) {
								vals.put("workcenter_ext", checkingMap
										.get(tab[i]));
							}
						}
						// Initialization output parameters
						String title_out_tXMLRPCOpenDAS_8 = null;
						String sendUrl_out_tXMLRPCOpenDAS_8 = null;
						String fromUrl_out_tXMLRPCOpenDAS_8 = null;
						Date sendedDate_out_tXMLRPCOpenDAS_8 = null;
						String station_out_tXMLRPCOpenDAS_8 = null;
						Object attachement_out_tXMLRPCOpenDAS_8 = null;
						org.opendas.modele.DASError result = new org.opendas.modele.DASError();

						try {
							consoleOut_tXMLRPCOpenDAS_8
									.println("tXMLRPCOpenDAS_8"
											+ " Connexion ASPerpgi ");
							consoleOut_tXMLRPCOpenDAS_8.flush();
							OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_8 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
									context.dbnameASPerpgi,
									context.usernameASPerpgi,
									context.pwdASPerpgi, context.hostASPerpgi,
									context.portASPerpgi);

							java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

							Object[] context_search = new Object[context_search_tmp
									.size()];
							for (int i = 0; i < context_search_tmp.size(); ++i) {
								context_search[i] = context_search_tmp.get(i);
							}

							consoleOut_tXMLRPCOpenDAS_8
									.println("tXMLRPCOpenDAS_8" + " XMLRpc : "
											+ "hr.employee" + " "
											+ "talend_login_workcenter_barre");
							consoleOut_tXMLRPCOpenDAS_8.flush();
							redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_8 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_8
									.exec("hr.employee",
											"talend_login_workcenter_barre",
											vals, context_search);
							if (responsetXMLRPCOpenDAS_8 != null) {
								System.out
										.println("responsetXMLRPCOpenDAS_8 : "
												+ responsetXMLRPCOpenDAS_8);
								result.setCode(responsetXMLRPCOpenDAS_8
										.getInteger("code"));
								result.setString(responsetXMLRPCOpenDAS_8
										.getString("string"));
								java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

								redstone.xmlrpc.XmlRpcArray res_array = null;
								res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_8
										.get("object");

								Object retour = null;
								for (int i = 0; i < res_array.size(); ++i) {
									org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
									redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
									tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
											.get(i);
									tmp_generic
											.setInfos(connexiontXMLRPCOpenDAS_8
													.convert(tmp_dict));
									listgen.add(tmp_generic);
								}
								result.setObject(listgen);
							} else {
								System.out.println("ERROR : On ext response");

								result.setCode(1);

								result.setString("ERROR : On ext response");

							}

						} catch (redstone.xmlrpc.XmlRpcException e) {
							System.out
									.println("ERROR XMLRPC : " + e.toString());
							result.setCode(2);
							result.setString("ERROR XMLRPC : " + e.toString());
						} catch (Exception e) {
							System.out.println("ERROR : " + e.toString());
							result.setCode(3);
							result.setString("ERROR : " + e.toString());
						}
						System.out.println("result :" + result);

						// Transmission of parameters to tMomObjectOutput
						// component ( none output here)
						Object[] results_tXMLRPCOpenDAS_8 = {
								title_tXMLRPCOpenDAS_8,
								sendUrl_tXMLRPCOpenDAS_8,
								fromUrl_tXMLRPCOpenDAS_8,
								sendedDate_tXMLRPCOpenDAS_8,
								entree.attachement, station_tXMLRPCOpenDAS_8,
								title_out_tXMLRPCOpenDAS_8,
								sendUrl_out_tXMLRPCOpenDAS_8,
								fromUrl_out_tXMLRPCOpenDAS_8,
								sendedDate_out_tXMLRPCOpenDAS_8, result,
								station_out_tXMLRPCOpenDAS_8 };

						for (int i_tXMLRPCOpenDAS_8 = 0; i_tXMLRPCOpenDAS_8 < results_tXMLRPCOpenDAS_8.length; i_tXMLRPCOpenDAS_8++) {

							// for output

							// We set the results in the output connections
							if (0 < results_tXMLRPCOpenDAS_8.length
									&& results_tXMLRPCOpenDAS_8[0] != null) {
								row5.title = (String) results_tXMLRPCOpenDAS_8[0];

							} else {
								row5.title = null;
							}

							// We set the results in the output connections
							if (1 < results_tXMLRPCOpenDAS_8.length
									&& results_tXMLRPCOpenDAS_8[1] != null) {
								row5.sendUrl = (String) results_tXMLRPCOpenDAS_8[1];

							} else {
								row5.sendUrl = null;
							}

							// We set the results in the output connections
							if (2 < results_tXMLRPCOpenDAS_8.length
									&& results_tXMLRPCOpenDAS_8[2] != null) {
								row5.fromUrl = (String) results_tXMLRPCOpenDAS_8[2];

							} else {
								row5.fromUrl = null;
							}

							// We set the results in the output connections
							if (3 < results_tXMLRPCOpenDAS_8.length
									&& results_tXMLRPCOpenDAS_8[3] != null) {
								row5.sendedDate = (Date) results_tXMLRPCOpenDAS_8[3];

							} else {
								row5.sendedDate = null;
							}

							// We set the results in the output connections
							if (4 < results_tXMLRPCOpenDAS_8.length
									&& results_tXMLRPCOpenDAS_8[4] != null) {
								row5.attachement = (Object) results_tXMLRPCOpenDAS_8[4];

							} else {
								row5.attachement = null;
							}

							// We set the results in the output connections
							if (5 < results_tXMLRPCOpenDAS_8.length
									&& results_tXMLRPCOpenDAS_8[5] != null) {
								row5.station = (String) results_tXMLRPCOpenDAS_8[5];

							} else {
								row5.station = null;
							}

							// We set the results in the output connections
							if (6 < results_tXMLRPCOpenDAS_8.length
									&& results_tXMLRPCOpenDAS_8[6] != null) {
								row5.title_out = (String) results_tXMLRPCOpenDAS_8[6];

							} else {
								row5.title_out = null;
							}

							// We set the results in the output connections
							if (7 < results_tXMLRPCOpenDAS_8.length
									&& results_tXMLRPCOpenDAS_8[7] != null) {
								row5.sendUrl_out = (String) results_tXMLRPCOpenDAS_8[7];

							} else {
								row5.sendUrl_out = null;
							}

							// We set the results in the output connections
							if (8 < results_tXMLRPCOpenDAS_8.length
									&& results_tXMLRPCOpenDAS_8[8] != null) {
								row5.fromUrl_out = (String) results_tXMLRPCOpenDAS_8[8];

							} else {
								row5.fromUrl_out = null;
							}

							// We set the results in the output connections
							if (9 < results_tXMLRPCOpenDAS_8.length
									&& results_tXMLRPCOpenDAS_8[9] != null) {
								row5.sendedDate_out = (Date) results_tXMLRPCOpenDAS_8[9];

							} else {
								row5.sendedDate_out = null;
							}

							// We set the results in the output connections
							if (10 < results_tXMLRPCOpenDAS_8.length
									&& results_tXMLRPCOpenDAS_8[10] != null) {
								row5.attachement_out = (Object) results_tXMLRPCOpenDAS_8[10];

							} else {
								row5.attachement_out = null;
							}

							// We set the results in the output connections
							if (11 < results_tXMLRPCOpenDAS_8.length
									&& results_tXMLRPCOpenDAS_8[11] != null) {
								row5.station_out = (String) results_tXMLRPCOpenDAS_8[11];

							} else {
								row5.station_out = null;
							}

						}

						tos_count_tXMLRPCOpenDAS_8++;

						/**
						 * [tXMLRPCOpenDAS_8 main ] stop
						 */
						// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tMomObjectOutput_5 main ] start
							 */

							currentComponent = "tMomObjectOutput_5";

							System.out.println("attachement :"
									+ row5.attachement);

							// on reconstitue le message d'origine
							org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
							previousRequest.setTitle(row5.title);
							previousRequest.setSendUrl(row5.sendUrl);
							previousRequest.setFromUrl(row5.fromUrl);
							previousRequest.setSendedDate(row5.sendedDate);
							previousRequest
									.setAttachement((java.io.Serializable) row5.attachement);

							// on crée le message de réponse
							org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
									previousRequest);
							response.setTitle(row5.title_out);
							response.setSendedDate(row5.sendedDate_out);
							response.setAttachement((java.io.Serializable) row5.attachement_out);

							javax.jms.ObjectMessage message_tMomObjectOutput_5 = session_tMomObjectOutput_5
									.createObjectMessage();// On crée
															// l'ObjectMessage
							message_tMomObjectOutput_5.setObject(response);
							message_tMomObjectOutput_5.setStringProperty(
									"Sujet", row5.station);

							System.out.println("----------------------------");
							System.out.println(response);
							System.out.println("----------------------------");

							des_tMomObjectOutput_5 = session_tMomObjectOutput_5
									.createQueue(response.getSendUrl());
							producer_tMomObjectOutput_5 = session_tMomObjectOutput_5
									.createProducer(des_tMomObjectOutput_5);
							producer_tMomObjectOutput_5
									.send(message_tMomObjectOutput_5);

							tos_count_tMomObjectOutput_5++;

							/**
							 * [tMomObjectOutput_5 main ] stop
							 */

						} // End of branch "row5"

					} // End of branch "entree"

					// Start of branch "sortie"
					if (sortie != null) {

						/**
						 * [tXMLRPCOpenDAS_9 main ] start
						 */

						currentComponent = "tXMLRPCOpenDAS_9";

						// DEBUG DISPLAY
						java.io.PrintStream consoleOut_tXMLRPCOpenDAS_9 = null;
						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tXMLRPCOpenDAS_9 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tXMLRPCOpenDAS_9 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tXMLRPCOpenDAS_9);
						}

						consoleOut_tXMLRPCOpenDAS_9
								.println("tXMLRPCOpenDAS_9"
										+ " received parameters : "
										+ sortie.toString());
						consoleOut_tXMLRPCOpenDAS_9.flush();

						// Retrieving input parameters (These parameters come
						// from tMomObjectInput)
						String title_tXMLRPCOpenDAS_9 = sortie.title;
						String sendUrl_tXMLRPCOpenDAS_9 = sortie.sendUrl;
						String fromUrl_tXMLRPCOpenDAS_9 = sortie.fromUrl;
						Date sendedDate_tXMLRPCOpenDAS_9 = sortie.sendedDate;
						String station_tXMLRPCOpenDAS_9 = sortie.station;
						java.util.Map checkingMap = (java.util.Map) sortie.attachement;

						Object[] tab = checkingMap.keySet().toArray();
						redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
						for (int i = 0; i < tab.length; i++) {
							if ("persoin".equals(tab[i])) {
								vals.put("employee", checkingMap.get(tab[i]));
							}
							if ("_workstation".equals(tab[i])) {
								vals.put("workcenter_ext", checkingMap
										.get(tab[i]));
							}
						}
						// Initialization output parameters
						String title_out_tXMLRPCOpenDAS_9 = null;
						String sendUrl_out_tXMLRPCOpenDAS_9 = null;
						String fromUrl_out_tXMLRPCOpenDAS_9 = null;
						Date sendedDate_out_tXMLRPCOpenDAS_9 = null;
						String station_out_tXMLRPCOpenDAS_9 = null;
						Object attachement_out_tXMLRPCOpenDAS_9 = null;
						org.opendas.modele.DASError result = new org.opendas.modele.DASError();

						try {
							consoleOut_tXMLRPCOpenDAS_9
									.println("tXMLRPCOpenDAS_9"
											+ " Connexion ASPerpgi ");
							consoleOut_tXMLRPCOpenDAS_9.flush();
							OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_9 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
									context.dbnameASPerpgi,
									context.usernameASPerpgi,
									context.pwdASPerpgi, context.hostASPerpgi,
									context.portASPerpgi);

							java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

							Object[] context_search = new Object[context_search_tmp
									.size()];
							for (int i = 0; i < context_search_tmp.size(); ++i) {
								context_search[i] = context_search_tmp.get(i);
							}

							consoleOut_tXMLRPCOpenDAS_9
									.println("tXMLRPCOpenDAS_9" + " XMLRpc : "
											+ "hr.employee" + " "
											+ "talend_login_workcenter_barre");
							consoleOut_tXMLRPCOpenDAS_9.flush();
							redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_9 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_9
									.exec("hr.employee",
											"talend_login_workcenter_barre",
											vals, context_search);
							if (responsetXMLRPCOpenDAS_9 != null) {
								System.out
										.println("responsetXMLRPCOpenDAS_9 : "
												+ responsetXMLRPCOpenDAS_9);
								result.setCode(responsetXMLRPCOpenDAS_9
										.getInteger("code"));
								result.setString(responsetXMLRPCOpenDAS_9
										.getString("string"));
								java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

								redstone.xmlrpc.XmlRpcArray res_array = null;
								res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_9
										.get("object");

								Object retour = null;
								for (int i = 0; i < res_array.size(); ++i) {
									org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
									redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
									tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
											.get(i);
									tmp_generic
											.setInfos(connexiontXMLRPCOpenDAS_9
													.convert(tmp_dict));
									listgen.add(tmp_generic);
								}
								result.setObject(listgen);
							} else {
								System.out.println("ERROR : On ext response");

								result.setCode(1);

								result.setString("ERROR : On ext response");

							}

						} catch (redstone.xmlrpc.XmlRpcException e) {
							System.out
									.println("ERROR XMLRPC : " + e.toString());
							result.setCode(2);
							result.setString("ERROR XMLRPC : " + e.toString());
						} catch (Exception e) {
							System.out.println("ERROR : " + e.toString());
							result.setCode(3);
							result.setString("ERROR : " + e.toString());
						}
						System.out.println("result :" + result);

						// Transmission of parameters to tMomObjectOutput
						// component ( none output here)
						Object[] results_tXMLRPCOpenDAS_9 = {
								title_tXMLRPCOpenDAS_9,
								sendUrl_tXMLRPCOpenDAS_9,
								fromUrl_tXMLRPCOpenDAS_9,
								sendedDate_tXMLRPCOpenDAS_9,
								sortie.attachement, station_tXMLRPCOpenDAS_9,
								title_out_tXMLRPCOpenDAS_9,
								sendUrl_out_tXMLRPCOpenDAS_9,
								fromUrl_out_tXMLRPCOpenDAS_9,
								sendedDate_out_tXMLRPCOpenDAS_9, result,
								station_out_tXMLRPCOpenDAS_9 };

						for (int i_tXMLRPCOpenDAS_9 = 0; i_tXMLRPCOpenDAS_9 < results_tXMLRPCOpenDAS_9.length; i_tXMLRPCOpenDAS_9++) {

							// for output

							// We set the results in the output connections
							if (0 < results_tXMLRPCOpenDAS_9.length
									&& results_tXMLRPCOpenDAS_9[0] != null) {
								row7.title = (String) results_tXMLRPCOpenDAS_9[0];

							} else {
								row7.title = null;
							}

							// We set the results in the output connections
							if (1 < results_tXMLRPCOpenDAS_9.length
									&& results_tXMLRPCOpenDAS_9[1] != null) {
								row7.sendUrl = (String) results_tXMLRPCOpenDAS_9[1];

							} else {
								row7.sendUrl = null;
							}

							// We set the results in the output connections
							if (2 < results_tXMLRPCOpenDAS_9.length
									&& results_tXMLRPCOpenDAS_9[2] != null) {
								row7.fromUrl = (String) results_tXMLRPCOpenDAS_9[2];

							} else {
								row7.fromUrl = null;
							}

							// We set the results in the output connections
							if (3 < results_tXMLRPCOpenDAS_9.length
									&& results_tXMLRPCOpenDAS_9[3] != null) {
								row7.sendedDate = (Date) results_tXMLRPCOpenDAS_9[3];

							} else {
								row7.sendedDate = null;
							}

							// We set the results in the output connections
							if (4 < results_tXMLRPCOpenDAS_9.length
									&& results_tXMLRPCOpenDAS_9[4] != null) {
								row7.attachement = (Object) results_tXMLRPCOpenDAS_9[4];

							} else {
								row7.attachement = null;
							}

							// We set the results in the output connections
							if (5 < results_tXMLRPCOpenDAS_9.length
									&& results_tXMLRPCOpenDAS_9[5] != null) {
								row7.station = (String) results_tXMLRPCOpenDAS_9[5];

							} else {
								row7.station = null;
							}

							// We set the results in the output connections
							if (6 < results_tXMLRPCOpenDAS_9.length
									&& results_tXMLRPCOpenDAS_9[6] != null) {
								row7.title_out = (String) results_tXMLRPCOpenDAS_9[6];

							} else {
								row7.title_out = null;
							}

							// We set the results in the output connections
							if (7 < results_tXMLRPCOpenDAS_9.length
									&& results_tXMLRPCOpenDAS_9[7] != null) {
								row7.sendUrl_out = (String) results_tXMLRPCOpenDAS_9[7];

							} else {
								row7.sendUrl_out = null;
							}

							// We set the results in the output connections
							if (8 < results_tXMLRPCOpenDAS_9.length
									&& results_tXMLRPCOpenDAS_9[8] != null) {
								row7.fromUrl_out = (String) results_tXMLRPCOpenDAS_9[8];

							} else {
								row7.fromUrl_out = null;
							}

							// We set the results in the output connections
							if (9 < results_tXMLRPCOpenDAS_9.length
									&& results_tXMLRPCOpenDAS_9[9] != null) {
								row7.sendedDate_out = (Date) results_tXMLRPCOpenDAS_9[9];

							} else {
								row7.sendedDate_out = null;
							}

							// We set the results in the output connections
							if (10 < results_tXMLRPCOpenDAS_9.length
									&& results_tXMLRPCOpenDAS_9[10] != null) {
								row7.attachement_out = (Object) results_tXMLRPCOpenDAS_9[10];

							} else {
								row7.attachement_out = null;
							}

							// We set the results in the output connections
							if (11 < results_tXMLRPCOpenDAS_9.length
									&& results_tXMLRPCOpenDAS_9[11] != null) {
								row7.station_out = (String) results_tXMLRPCOpenDAS_9[11];

							} else {
								row7.station_out = null;
							}

						}

						tos_count_tXMLRPCOpenDAS_9++;

						/**
						 * [tXMLRPCOpenDAS_9 main ] stop
						 */
						// Start of branch "row7"
						if (row7 != null) {

							/**
							 * [tMomObjectOutput_6 main ] start
							 */

							currentComponent = "tMomObjectOutput_6";

							System.out.println("attachement :"
									+ row7.attachement);

							// on reconstitue le message d'origine
							org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
							previousRequest.setTitle(row7.title);
							previousRequest.setSendUrl(row7.sendUrl);
							previousRequest.setFromUrl(row7.fromUrl);
							previousRequest.setSendedDate(row7.sendedDate);
							previousRequest
									.setAttachement((java.io.Serializable) row7.attachement);

							// on crée le message de réponse
							org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
									previousRequest);
							response.setTitle(row7.title_out);
							response.setSendedDate(row7.sendedDate_out);
							response.setAttachement((java.io.Serializable) row7.attachement_out);

							javax.jms.ObjectMessage message_tMomObjectOutput_6 = session_tMomObjectOutput_6
									.createObjectMessage();// On crée
															// l'ObjectMessage
							message_tMomObjectOutput_6.setObject(response);
							message_tMomObjectOutput_6.setStringProperty(
									"Sujet", row7.station);

							System.out.println("----------------------------");
							System.out.println(response);
							System.out.println("----------------------------");

							des_tMomObjectOutput_6 = session_tMomObjectOutput_6
									.createQueue(response.getSendUrl());
							producer_tMomObjectOutput_6 = session_tMomObjectOutput_6
									.createProducer(des_tMomObjectOutput_6);
							producer_tMomObjectOutput_6
									.send(message_tMomObjectOutput_6);

							tos_count_tMomObjectOutput_6++;

							/**
							 * [tMomObjectOutput_6 main ] stop
							 */

						} // End of branch "row7"

					} // End of branch "sortie"

					// Start of branch "pointage_changement_poste"
					if (pointage_changement_poste != null) {

						/**
						 * [tXMLRPCOpenDAS_10 main ] start
						 */

						currentComponent = "tXMLRPCOpenDAS_10";

						// DEBUG DISPLAY
						java.io.PrintStream consoleOut_tXMLRPCOpenDAS_10 = null;
						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tXMLRPCOpenDAS_10 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tXMLRPCOpenDAS_10 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tXMLRPCOpenDAS_10);
						}

						consoleOut_tXMLRPCOpenDAS_10
								.println("tXMLRPCOpenDAS_10"
										+ " received parameters : "
										+ pointage_changement_poste.toString());
						consoleOut_tXMLRPCOpenDAS_10.flush();

						// Retrieving input parameters (These parameters come
						// from tMomObjectInput)
						String title_tXMLRPCOpenDAS_10 = pointage_changement_poste.title;
						String sendUrl_tXMLRPCOpenDAS_10 = pointage_changement_poste.sendUrl;
						String fromUrl_tXMLRPCOpenDAS_10 = pointage_changement_poste.fromUrl;
						Date sendedDate_tXMLRPCOpenDAS_10 = pointage_changement_poste.sendedDate;
						String station_tXMLRPCOpenDAS_10 = pointage_changement_poste.station;
						java.util.Map checkingMap = (java.util.Map) pointage_changement_poste.attachement;

						Object[] tab = checkingMap.keySet().toArray();
						redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
						for (int i = 0; i < tab.length; i++) {
							if ("perso".equals(tab[i])) {
								vals.put("employee", checkingMap.get(tab[i]));
							}
							if ("poste".equals(tab[i])) {
								vals.put("workcenter", checkingMap.get(tab[i]));
							}
						}
						// Initialization output parameters
						String title_out_tXMLRPCOpenDAS_10 = null;
						String sendUrl_out_tXMLRPCOpenDAS_10 = null;
						String fromUrl_out_tXMLRPCOpenDAS_10 = null;
						Date sendedDate_out_tXMLRPCOpenDAS_10 = null;
						String station_out_tXMLRPCOpenDAS_10 = null;
						Object attachement_out_tXMLRPCOpenDAS_10 = null;
						org.opendas.modele.DASError result = new org.opendas.modele.DASError();

						try {
							consoleOut_tXMLRPCOpenDAS_10
									.println("tXMLRPCOpenDAS_10"
											+ " Connexion ASPerpgi ");
							consoleOut_tXMLRPCOpenDAS_10.flush();
							OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_10 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
									context.dbnameASPerpgi,
									context.usernameASPerpgi,
									context.pwdASPerpgi, context.hostASPerpgi,
									context.portASPerpgi);

							java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

							Object[] context_search = new Object[context_search_tmp
									.size()];
							for (int i = 0; i < context_search_tmp.size(); ++i) {
								context_search[i] = context_search_tmp.get(i);
							}

							consoleOut_tXMLRPCOpenDAS_10
									.println("tXMLRPCOpenDAS_10" + " XMLRpc : "
											+ "hr.employee" + " "
											+ "talend_change_workcenter_barre");
							consoleOut_tXMLRPCOpenDAS_10.flush();
							redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_10 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_10
									.exec("hr.employee",
											"talend_change_workcenter_barre",
											vals, context_search);
							if (responsetXMLRPCOpenDAS_10 != null) {
								System.out
										.println("responsetXMLRPCOpenDAS_10 : "
												+ responsetXMLRPCOpenDAS_10);
								result.setCode(responsetXMLRPCOpenDAS_10
										.getInteger("code"));
								result.setString(responsetXMLRPCOpenDAS_10
										.getString("string"));
								java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

								redstone.xmlrpc.XmlRpcArray res_array = null;
								res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_10
										.get("object");

								Object retour = null;
								for (int i = 0; i < res_array.size(); ++i) {
									org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
									redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
									tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
											.get(i);
									tmp_generic
											.setInfos(connexiontXMLRPCOpenDAS_10
													.convert(tmp_dict));
									listgen.add(tmp_generic);
								}
								result.setObject(listgen);
							} else {
								System.out.println("ERROR : On ext response");

								result.setCode(1);

								result.setString("ERROR : On ext response");

							}

						} catch (redstone.xmlrpc.XmlRpcException e) {
							System.out
									.println("ERROR XMLRPC : " + e.toString());
							result.setCode(2);
							result.setString("ERROR XMLRPC : " + e.toString());
						} catch (Exception e) {
							System.out.println("ERROR : " + e.toString());
							result.setCode(3);
							result.setString("ERROR : " + e.toString());
						}
						System.out.println("result :" + result);

						// Transmission of parameters to tMomObjectOutput
						// component ( none output here)
						Object[] results_tXMLRPCOpenDAS_10 = {
								title_tXMLRPCOpenDAS_10,
								sendUrl_tXMLRPCOpenDAS_10,
								fromUrl_tXMLRPCOpenDAS_10,
								sendedDate_tXMLRPCOpenDAS_10,
								pointage_changement_poste.attachement,
								station_tXMLRPCOpenDAS_10,
								title_out_tXMLRPCOpenDAS_10,
								sendUrl_out_tXMLRPCOpenDAS_10,
								fromUrl_out_tXMLRPCOpenDAS_10,
								sendedDate_out_tXMLRPCOpenDAS_10, result,
								station_out_tXMLRPCOpenDAS_10 };

						for (int i_tXMLRPCOpenDAS_10 = 0; i_tXMLRPCOpenDAS_10 < results_tXMLRPCOpenDAS_10.length; i_tXMLRPCOpenDAS_10++) {

							// for output

							// We set the results in the output connections
							if (0 < results_tXMLRPCOpenDAS_10.length
									&& results_tXMLRPCOpenDAS_10[0] != null) {
								row8.title = (String) results_tXMLRPCOpenDAS_10[0];

							} else {
								row8.title = null;
							}

							// We set the results in the output connections
							if (1 < results_tXMLRPCOpenDAS_10.length
									&& results_tXMLRPCOpenDAS_10[1] != null) {
								row8.sendUrl = (String) results_tXMLRPCOpenDAS_10[1];

							} else {
								row8.sendUrl = null;
							}

							// We set the results in the output connections
							if (2 < results_tXMLRPCOpenDAS_10.length
									&& results_tXMLRPCOpenDAS_10[2] != null) {
								row8.fromUrl = (String) results_tXMLRPCOpenDAS_10[2];

							} else {
								row8.fromUrl = null;
							}

							// We set the results in the output connections
							if (3 < results_tXMLRPCOpenDAS_10.length
									&& results_tXMLRPCOpenDAS_10[3] != null) {
								row8.sendedDate = (Date) results_tXMLRPCOpenDAS_10[3];

							} else {
								row8.sendedDate = null;
							}

							// We set the results in the output connections
							if (4 < results_tXMLRPCOpenDAS_10.length
									&& results_tXMLRPCOpenDAS_10[4] != null) {
								row8.attachement = (Object) results_tXMLRPCOpenDAS_10[4];

							} else {
								row8.attachement = null;
							}

							// We set the results in the output connections
							if (5 < results_tXMLRPCOpenDAS_10.length
									&& results_tXMLRPCOpenDAS_10[5] != null) {
								row8.station = (String) results_tXMLRPCOpenDAS_10[5];

							} else {
								row8.station = null;
							}

							// We set the results in the output connections
							if (6 < results_tXMLRPCOpenDAS_10.length
									&& results_tXMLRPCOpenDAS_10[6] != null) {
								row8.title_out = (String) results_tXMLRPCOpenDAS_10[6];

							} else {
								row8.title_out = null;
							}

							// We set the results in the output connections
							if (7 < results_tXMLRPCOpenDAS_10.length
									&& results_tXMLRPCOpenDAS_10[7] != null) {
								row8.sendUrl_out = (String) results_tXMLRPCOpenDAS_10[7];

							} else {
								row8.sendUrl_out = null;
							}

							// We set the results in the output connections
							if (8 < results_tXMLRPCOpenDAS_10.length
									&& results_tXMLRPCOpenDAS_10[8] != null) {
								row8.fromUrl_out = (String) results_tXMLRPCOpenDAS_10[8];

							} else {
								row8.fromUrl_out = null;
							}

							// We set the results in the output connections
							if (9 < results_tXMLRPCOpenDAS_10.length
									&& results_tXMLRPCOpenDAS_10[9] != null) {
								row8.sendedDate_out = (Date) results_tXMLRPCOpenDAS_10[9];

							} else {
								row8.sendedDate_out = null;
							}

							// We set the results in the output connections
							if (10 < results_tXMLRPCOpenDAS_10.length
									&& results_tXMLRPCOpenDAS_10[10] != null) {
								row8.attachement_out = (Object) results_tXMLRPCOpenDAS_10[10];

							} else {
								row8.attachement_out = null;
							}

							// We set the results in the output connections
							if (11 < results_tXMLRPCOpenDAS_10.length
									&& results_tXMLRPCOpenDAS_10[11] != null) {
								row8.station_out = (String) results_tXMLRPCOpenDAS_10[11];

							} else {
								row8.station_out = null;
							}

						}

						tos_count_tXMLRPCOpenDAS_10++;

						/**
						 * [tXMLRPCOpenDAS_10 main ] stop
						 */
						// Start of branch "row8"
						if (row8 != null) {

							/**
							 * [tMomObjectOutput_9 main ] start
							 */

							currentComponent = "tMomObjectOutput_9";

							System.out.println("attachement :"
									+ row8.attachement);

							// on reconstitue le message d'origine
							org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
							previousRequest.setTitle(row8.title);
							previousRequest.setSendUrl(row8.sendUrl);
							previousRequest.setFromUrl(row8.fromUrl);
							previousRequest.setSendedDate(row8.sendedDate);
							previousRequest
									.setAttachement((java.io.Serializable) row8.attachement);

							// on crée le message de réponse
							org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
									previousRequest);
							response.setTitle(row8.title_out);
							response.setSendedDate(row8.sendedDate_out);
							response.setAttachement((java.io.Serializable) row8.attachement_out);

							javax.jms.ObjectMessage message_tMomObjectOutput_9 = session_tMomObjectOutput_9
									.createObjectMessage();// On crée
															// l'ObjectMessage
							message_tMomObjectOutput_9.setObject(response);
							message_tMomObjectOutput_9.setStringProperty(
									"Sujet", row8.station);

							System.out.println("----------------------------");
							System.out.println(response);
							System.out.println("----------------------------");

							des_tMomObjectOutput_9 = session_tMomObjectOutput_9
									.createQueue(response.getSendUrl());
							producer_tMomObjectOutput_9 = session_tMomObjectOutput_9
									.createProducer(des_tMomObjectOutput_9);
							producer_tMomObjectOutput_9
									.send(message_tMomObjectOutput_9);

							tos_count_tMomObjectOutput_9++;

							/**
							 * [tMomObjectOutput_9 main ] stop
							 */

						} // End of branch "row8"

					} // End of branch "pointage_changement_poste"

					// Start of branch "pointage_changement_dossier"
					if (pointage_changement_dossier != null) {

						/**
						 * [tXMLRPCOpenDAS_12 main ] start
						 */

						currentComponent = "tXMLRPCOpenDAS_12";

						// DEBUG DISPLAY
						java.io.PrintStream consoleOut_tXMLRPCOpenDAS_12 = null;
						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tXMLRPCOpenDAS_12 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tXMLRPCOpenDAS_12 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tXMLRPCOpenDAS_12);
						}

						consoleOut_tXMLRPCOpenDAS_12
								.println("tXMLRPCOpenDAS_12"
										+ " received parameters : "
										+ pointage_changement_dossier
												.toString());
						consoleOut_tXMLRPCOpenDAS_12.flush();

						// Retrieving input parameters (These parameters come
						// from tMomObjectInput)
						String title_tXMLRPCOpenDAS_12 = pointage_changement_dossier.title;
						String sendUrl_tXMLRPCOpenDAS_12 = pointage_changement_dossier.sendUrl;
						String fromUrl_tXMLRPCOpenDAS_12 = pointage_changement_dossier.fromUrl;
						Date sendedDate_tXMLRPCOpenDAS_12 = pointage_changement_dossier.sendedDate;
						String station_tXMLRPCOpenDAS_12 = pointage_changement_dossier.station;
						java.util.Map checkingMap = (java.util.Map) pointage_changement_dossier.attachement;

						Object[] tab = checkingMap.keySet().toArray();
						redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
						for (int i = 0; i < tab.length; i++) {
							if ("perso".equals(tab[i])) {
								vals.put("employee", checkingMap.get(tab[i]));
							}
							if ("poste".equals(tab[i])) {
								vals.put("workcenter", checkingMap.get(tab[i]));
							}
							if ("dossier".equals(tab[i])) {
								vals.put("production", checkingMap.get(tab[i]));
							}
							if ("reglage".equals(tab[i])) {
								vals.put("adjustment", checkingMap.get(tab[i]));
							}
						}
						// Initialization output parameters
						String title_out_tXMLRPCOpenDAS_12 = null;
						String sendUrl_out_tXMLRPCOpenDAS_12 = null;
						String fromUrl_out_tXMLRPCOpenDAS_12 = null;
						Date sendedDate_out_tXMLRPCOpenDAS_12 = null;
						String station_out_tXMLRPCOpenDAS_12 = null;
						Object attachement_out_tXMLRPCOpenDAS_12 = null;
						org.opendas.modele.DASError result = new org.opendas.modele.DASError();

						try {
							consoleOut_tXMLRPCOpenDAS_12
									.println("tXMLRPCOpenDAS_12"
											+ " Connexion ASPerpgi ");
							consoleOut_tXMLRPCOpenDAS_12.flush();
							OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_12 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
									context.dbnameASPerpgi,
									context.usernameASPerpgi,
									context.pwdASPerpgi, context.hostASPerpgi,
									context.portASPerpgi);

							java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

							Object[] context_search = new Object[context_search_tmp
									.size()];
							for (int i = 0; i < context_search_tmp.size(); ++i) {
								context_search[i] = context_search_tmp.get(i);
							}

							consoleOut_tXMLRPCOpenDAS_12
									.println("tXMLRPCOpenDAS_12"
											+ " XMLRpc : "
											+ "hr.employee"
											+ " "
											+ "talend_change_workcenter_line_barre");
							consoleOut_tXMLRPCOpenDAS_12.flush();
							redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_12 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_12
									.exec(
											"hr.employee",
											"talend_change_workcenter_line_barre",
											vals, context_search);
							if (responsetXMLRPCOpenDAS_12 != null) {
								System.out
										.println("responsetXMLRPCOpenDAS_12 : "
												+ responsetXMLRPCOpenDAS_12);
								result.setCode(responsetXMLRPCOpenDAS_12
										.getInteger("code"));
								result.setString(responsetXMLRPCOpenDAS_12
										.getString("string"));
								java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

								redstone.xmlrpc.XmlRpcArray res_array = null;
								res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_12
										.get("object");

								Object retour = null;
								for (int i = 0; i < res_array.size(); ++i) {
									org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
									redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
									tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
											.get(i);
									tmp_generic
											.setInfos(connexiontXMLRPCOpenDAS_12
													.convert(tmp_dict));
									listgen.add(tmp_generic);
								}
								result.setObject(listgen);
							} else {
								System.out.println("ERROR : On ext response");

								result.setCode(1);

								result.setString("ERROR : On ext response");

							}

						} catch (redstone.xmlrpc.XmlRpcException e) {
							System.out
									.println("ERROR XMLRPC : " + e.toString());
							result.setCode(2);
							result.setString("ERROR XMLRPC : " + e.toString());
						} catch (Exception e) {
							System.out.println("ERROR : " + e.toString());
							result.setCode(3);
							result.setString("ERROR : " + e.toString());
						}
						System.out.println("result :" + result);

						// Transmission of parameters to tMomObjectOutput
						// component ( none output here)
						Object[] results_tXMLRPCOpenDAS_12 = {
								title_tXMLRPCOpenDAS_12,
								sendUrl_tXMLRPCOpenDAS_12,
								fromUrl_tXMLRPCOpenDAS_12,
								sendedDate_tXMLRPCOpenDAS_12,
								pointage_changement_dossier.attachement,
								station_tXMLRPCOpenDAS_12,
								title_out_tXMLRPCOpenDAS_12,
								sendUrl_out_tXMLRPCOpenDAS_12,
								fromUrl_out_tXMLRPCOpenDAS_12,
								sendedDate_out_tXMLRPCOpenDAS_12, result,
								station_out_tXMLRPCOpenDAS_12 };

						for (int i_tXMLRPCOpenDAS_12 = 0; i_tXMLRPCOpenDAS_12 < results_tXMLRPCOpenDAS_12.length; i_tXMLRPCOpenDAS_12++) {

							// for output

							// We set the results in the output connections
							if (0 < results_tXMLRPCOpenDAS_12.length
									&& results_tXMLRPCOpenDAS_12[0] != null) {
								row10.title = (String) results_tXMLRPCOpenDAS_12[0];

							} else {
								row10.title = null;
							}

							// We set the results in the output connections
							if (1 < results_tXMLRPCOpenDAS_12.length
									&& results_tXMLRPCOpenDAS_12[1] != null) {
								row10.sendUrl = (String) results_tXMLRPCOpenDAS_12[1];

							} else {
								row10.sendUrl = null;
							}

							// We set the results in the output connections
							if (2 < results_tXMLRPCOpenDAS_12.length
									&& results_tXMLRPCOpenDAS_12[2] != null) {
								row10.fromUrl = (String) results_tXMLRPCOpenDAS_12[2];

							} else {
								row10.fromUrl = null;
							}

							// We set the results in the output connections
							if (3 < results_tXMLRPCOpenDAS_12.length
									&& results_tXMLRPCOpenDAS_12[3] != null) {
								row10.sendedDate = (Date) results_tXMLRPCOpenDAS_12[3];

							} else {
								row10.sendedDate = null;
							}

							// We set the results in the output connections
							if (4 < results_tXMLRPCOpenDAS_12.length
									&& results_tXMLRPCOpenDAS_12[4] != null) {
								row10.attachement = (Object) results_tXMLRPCOpenDAS_12[4];

							} else {
								row10.attachement = null;
							}

							// We set the results in the output connections
							if (5 < results_tXMLRPCOpenDAS_12.length
									&& results_tXMLRPCOpenDAS_12[5] != null) {
								row10.station = (String) results_tXMLRPCOpenDAS_12[5];

							} else {
								row10.station = null;
							}

							// We set the results in the output connections
							if (6 < results_tXMLRPCOpenDAS_12.length
									&& results_tXMLRPCOpenDAS_12[6] != null) {
								row10.title_out = (String) results_tXMLRPCOpenDAS_12[6];

							} else {
								row10.title_out = null;
							}

							// We set the results in the output connections
							if (7 < results_tXMLRPCOpenDAS_12.length
									&& results_tXMLRPCOpenDAS_12[7] != null) {
								row10.sendUrl_out = (String) results_tXMLRPCOpenDAS_12[7];

							} else {
								row10.sendUrl_out = null;
							}

							// We set the results in the output connections
							if (8 < results_tXMLRPCOpenDAS_12.length
									&& results_tXMLRPCOpenDAS_12[8] != null) {
								row10.fromUrl_out = (String) results_tXMLRPCOpenDAS_12[8];

							} else {
								row10.fromUrl_out = null;
							}

							// We set the results in the output connections
							if (9 < results_tXMLRPCOpenDAS_12.length
									&& results_tXMLRPCOpenDAS_12[9] != null) {
								row10.sendedDate_out = (Date) results_tXMLRPCOpenDAS_12[9];

							} else {
								row10.sendedDate_out = null;
							}

							// We set the results in the output connections
							if (10 < results_tXMLRPCOpenDAS_12.length
									&& results_tXMLRPCOpenDAS_12[10] != null) {
								row10.attachement_out = (Object) results_tXMLRPCOpenDAS_12[10];

							} else {
								row10.attachement_out = null;
							}

							// We set the results in the output connections
							if (11 < results_tXMLRPCOpenDAS_12.length
									&& results_tXMLRPCOpenDAS_12[11] != null) {
								row10.station_out = (String) results_tXMLRPCOpenDAS_12[11];

							} else {
								row10.station_out = null;
							}

						}

						tos_count_tXMLRPCOpenDAS_12++;

						/**
						 * [tXMLRPCOpenDAS_12 main ] stop
						 */
						// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tMomObjectOutput_10 main ] start
							 */

							currentComponent = "tMomObjectOutput_10";

							System.out.println("attachement :"
									+ row10.attachement);

							// on reconstitue le message d'origine
							org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
							previousRequest.setTitle(row10.title);
							previousRequest.setSendUrl(row10.sendUrl);
							previousRequest.setFromUrl(row10.fromUrl);
							previousRequest.setSendedDate(row10.sendedDate);
							previousRequest
									.setAttachement((java.io.Serializable) row10.attachement);

							// on crée le message de réponse
							org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
									previousRequest);
							response.setTitle(row10.title_out);
							response.setSendedDate(row10.sendedDate_out);
							response.setAttachement((java.io.Serializable) row10.attachement_out);

							javax.jms.ObjectMessage message_tMomObjectOutput_10 = session_tMomObjectOutput_10
									.createObjectMessage();// On crée
															// l'ObjectMessage
							message_tMomObjectOutput_10.setObject(response);
							message_tMomObjectOutput_10.setStringProperty(
									"Sujet", row10.station);

							System.out.println("----------------------------");
							System.out.println(response);
							System.out.println("----------------------------");

							des_tMomObjectOutput_10 = session_tMomObjectOutput_10
									.createQueue(response.getSendUrl());
							producer_tMomObjectOutput_10 = session_tMomObjectOutput_10
									.createProducer(des_tMomObjectOutput_10);
							producer_tMomObjectOutput_10
									.send(message_tMomObjectOutput_10);

							tos_count_tMomObjectOutput_10++;

							/**
							 * [tMomObjectOutput_10 main ] stop
							 */

						} // End of branch "row10"

					} // End of branch "pointage_changement_dossier"

					// Start of branch
					// "synchro_date_mrp_production_product_line"
					if (synchro_date_mrp_production_product_line != null) {

						/**
						 * [tXMLRPCOpenDAS_14 main ] start
						 */

						currentComponent = "tXMLRPCOpenDAS_14";

						// DEBUG DISPLAY
						java.io.PrintStream consoleOut_tXMLRPCOpenDAS_14 = null;
						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tXMLRPCOpenDAS_14 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tXMLRPCOpenDAS_14 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tXMLRPCOpenDAS_14);
						}

						consoleOut_tXMLRPCOpenDAS_14
								.println("tXMLRPCOpenDAS_14"
										+ " received parameters : "
										+ synchro_date_mrp_production_product_line
												.toString());
						consoleOut_tXMLRPCOpenDAS_14.flush();

						// Retrieving input parameters (These parameters come
						// from tMomObjectInput)
						String title_tXMLRPCOpenDAS_14 = synchro_date_mrp_production_product_line.title;
						String sendUrl_tXMLRPCOpenDAS_14 = synchro_date_mrp_production_product_line.sendUrl;
						String fromUrl_tXMLRPCOpenDAS_14 = synchro_date_mrp_production_product_line.fromUrl;
						Date sendedDate_tXMLRPCOpenDAS_14 = synchro_date_mrp_production_product_line.sendedDate;
						String station_tXMLRPCOpenDAS_14 = synchro_date_mrp_production_product_line.station;
						java.util.Map checkingMap = (java.util.Map) synchro_date_mrp_production_product_line.attachement;

						Object[] tab = checkingMap.keySet().toArray();
						redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
						for (int i = 0; i < tab.length; i++) {
							if ("model".equals(tab[i])) {
								vals.put("model", checkingMap.get(tab[i]));
							}
							if ("init_min_date_full".equals(tab[i])) {
								vals.put("init_min_date_full", checkingMap
										.get(tab[i]));
							}
							if ("init_max_date_full".equals(tab[i])) {
								vals.put("init_max_date_full", checkingMap
										.get(tab[i]));
							}
							if ("min_date".equals(tab[i])) {
								vals.put("min_date", checkingMap.get(tab[i]));
							}
							if ("max_date".equals(tab[i])) {
								vals.put("max_date", checkingMap.get(tab[i]));
							}
							if ("min_date_full".equals(tab[i])) {
								vals.put("min_date_full", checkingMap
										.get(tab[i]));
							}
							if ("max_date_full".equals(tab[i])) {
								vals.put("max_date_full", checkingMap
										.get(tab[i]));
							}
							if ("workstation_code".equals(tab[i])) {
								vals.put("workstation_code", checkingMap
										.get(tab[i]));
							}
							if ("name".equals(tab[i])) {
								vals.put("name", checkingMap.get(tab[i]));
							}
							if ("override".equals(tab[i])) {
								vals.put("override", checkingMap.get(tab[i]));
							}
							if ("delete".equals(tab[i])) {
								vals.put("delete", checkingMap.get(tab[i]));
							}
							if ("id".equals(tab[i])) {
								vals.put("id", checkingMap.get(tab[i]));
							}
							if ("init_name".equals(tab[i])) {
								vals.put("init_name", checkingMap.get(tab[i]));
							}
						}
						// Initialization output parameters
						String title_out_tXMLRPCOpenDAS_14 = null;
						String sendUrl_out_tXMLRPCOpenDAS_14 = null;
						String fromUrl_out_tXMLRPCOpenDAS_14 = null;
						Date sendedDate_out_tXMLRPCOpenDAS_14 = null;
						String station_out_tXMLRPCOpenDAS_14 = null;
						Object attachement_out_tXMLRPCOpenDAS_14 = null;
						org.opendas.modele.DASError result = new org.opendas.modele.DASError();

						try {
							consoleOut_tXMLRPCOpenDAS_14
									.println("tXMLRPCOpenDAS_14"
											+ " Connexion ASPerpgi ");
							consoleOut_tXMLRPCOpenDAS_14.flush();
							OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_14 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
									context.dbnameASPerpgi,
									context.usernameASPerpgi,
									context.pwdASPerpgi, context.hostASPerpgi,
									context.portASPerpgi);

							java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

							Object[] context_search = new Object[context_search_tmp
									.size()];
							for (int i = 0; i < context_search_tmp.size(); ++i) {
								context_search[i] = context_search_tmp.get(i);
							}

							consoleOut_tXMLRPCOpenDAS_14
									.println("tXMLRPCOpenDAS_14"
											+ " XMLRpc : "
											+ "mrp.production.product.line"
											+ " "
											+ "talend_synchro_mrp_production_product_line");
							consoleOut_tXMLRPCOpenDAS_14.flush();
							redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_14 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_14
									.exec(
											"mrp.production.product.line",
											"talend_synchro_mrp_production_product_line",
											vals, context_search);
							if (responsetXMLRPCOpenDAS_14 != null) {
								System.out
										.println("responsetXMLRPCOpenDAS_14 : "
												+ responsetXMLRPCOpenDAS_14);
								result.setCode(responsetXMLRPCOpenDAS_14
										.getInteger("code"));
								result.setString(responsetXMLRPCOpenDAS_14
										.getString("string"));
								java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

								redstone.xmlrpc.XmlRpcArray res_array = null;
								res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_14
										.get("object");

								Object retour = null;
								for (int i = 0; i < res_array.size(); ++i) {
									org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
									redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
									tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
											.get(i);
									tmp_generic
											.setInfos(connexiontXMLRPCOpenDAS_14
													.convert(tmp_dict));
									listgen.add(tmp_generic);
								}
								result.setObject(listgen);
							} else {
								System.out.println("ERROR : On ext response");

								result.setCode(1);

								result.setString("ERROR : On ext response");

							}

						} catch (redstone.xmlrpc.XmlRpcException e) {
							System.out
									.println("ERROR XMLRPC : " + e.toString());
							result.setCode(2);
							result.setString("ERROR XMLRPC : " + e.toString());
						} catch (Exception e) {
							System.out.println("ERROR : " + e.toString());
							result.setCode(3);
							result.setString("ERROR : " + e.toString());
						}
						System.out.println("result :" + result);

						// Transmission of parameters to tMomObjectOutput
						// component ( none output here)
						Object[] results_tXMLRPCOpenDAS_14 = {
								title_tXMLRPCOpenDAS_14,
								sendUrl_tXMLRPCOpenDAS_14,
								fromUrl_tXMLRPCOpenDAS_14,
								sendedDate_tXMLRPCOpenDAS_14,
								synchro_date_mrp_production_product_line.attachement,
								station_tXMLRPCOpenDAS_14,
								title_out_tXMLRPCOpenDAS_14,
								sendUrl_out_tXMLRPCOpenDAS_14,
								fromUrl_out_tXMLRPCOpenDAS_14,
								sendedDate_out_tXMLRPCOpenDAS_14, result,
								station_out_tXMLRPCOpenDAS_14 };

						for (int i_tXMLRPCOpenDAS_14 = 0; i_tXMLRPCOpenDAS_14 < results_tXMLRPCOpenDAS_14.length; i_tXMLRPCOpenDAS_14++) {

							// for output

							// We set the results in the output connections
							if (0 < results_tXMLRPCOpenDAS_14.length
									&& results_tXMLRPCOpenDAS_14[0] != null) {
								row11.title = (String) results_tXMLRPCOpenDAS_14[0];

							} else {
								row11.title = null;
							}

							// We set the results in the output connections
							if (1 < results_tXMLRPCOpenDAS_14.length
									&& results_tXMLRPCOpenDAS_14[1] != null) {
								row11.sendUrl = (String) results_tXMLRPCOpenDAS_14[1];

							} else {
								row11.sendUrl = null;
							}

							// We set the results in the output connections
							if (2 < results_tXMLRPCOpenDAS_14.length
									&& results_tXMLRPCOpenDAS_14[2] != null) {
								row11.fromUrl = (String) results_tXMLRPCOpenDAS_14[2];

							} else {
								row11.fromUrl = null;
							}

							// We set the results in the output connections
							if (3 < results_tXMLRPCOpenDAS_14.length
									&& results_tXMLRPCOpenDAS_14[3] != null) {
								row11.sendedDate = (Date) results_tXMLRPCOpenDAS_14[3];

							} else {
								row11.sendedDate = null;
							}

							// We set the results in the output connections
							if (4 < results_tXMLRPCOpenDAS_14.length
									&& results_tXMLRPCOpenDAS_14[4] != null) {
								row11.attachement = (Object) results_tXMLRPCOpenDAS_14[4];

							} else {
								row11.attachement = null;
							}

							// We set the results in the output connections
							if (5 < results_tXMLRPCOpenDAS_14.length
									&& results_tXMLRPCOpenDAS_14[5] != null) {
								row11.station = (String) results_tXMLRPCOpenDAS_14[5];

							} else {
								row11.station = null;
							}

							// We set the results in the output connections
							if (6 < results_tXMLRPCOpenDAS_14.length
									&& results_tXMLRPCOpenDAS_14[6] != null) {
								row11.title_out = (String) results_tXMLRPCOpenDAS_14[6];

							} else {
								row11.title_out = null;
							}

							// We set the results in the output connections
							if (7 < results_tXMLRPCOpenDAS_14.length
									&& results_tXMLRPCOpenDAS_14[7] != null) {
								row11.sendUrl_out = (String) results_tXMLRPCOpenDAS_14[7];

							} else {
								row11.sendUrl_out = null;
							}

							// We set the results in the output connections
							if (8 < results_tXMLRPCOpenDAS_14.length
									&& results_tXMLRPCOpenDAS_14[8] != null) {
								row11.fromUrl_out = (String) results_tXMLRPCOpenDAS_14[8];

							} else {
								row11.fromUrl_out = null;
							}

							// We set the results in the output connections
							if (9 < results_tXMLRPCOpenDAS_14.length
									&& results_tXMLRPCOpenDAS_14[9] != null) {
								row11.sendedDate_out = (Date) results_tXMLRPCOpenDAS_14[9];

							} else {
								row11.sendedDate_out = null;
							}

							// We set the results in the output connections
							if (10 < results_tXMLRPCOpenDAS_14.length
									&& results_tXMLRPCOpenDAS_14[10] != null) {
								row11.attachement_out = (Object) results_tXMLRPCOpenDAS_14[10];

							} else {
								row11.attachement_out = null;
							}

							// We set the results in the output connections
							if (11 < results_tXMLRPCOpenDAS_14.length
									&& results_tXMLRPCOpenDAS_14[11] != null) {
								row11.station_out = (String) results_tXMLRPCOpenDAS_14[11];

							} else {
								row11.station_out = null;
							}

						}

						tos_count_tXMLRPCOpenDAS_14++;

						/**
						 * [tXMLRPCOpenDAS_14 main ] stop
						 */
						// Start of branch "row11"
						if (row11 != null) {

							/**
							 * [tMomObjectOutput_12 main ] start
							 */

							currentComponent = "tMomObjectOutput_12";

							System.out.println("attachement :"
									+ row11.attachement);

							// on reconstitue le message d'origine
							org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
							previousRequest.setTitle(row11.title);
							previousRequest.setSendUrl(row11.sendUrl);
							previousRequest.setFromUrl(row11.fromUrl);
							previousRequest.setSendedDate(row11.sendedDate);
							previousRequest
									.setAttachement((java.io.Serializable) row11.attachement);

							// on crée le message de réponse
							org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
									previousRequest);
							response.setTitle(row11.title_out);
							response.setSendedDate(row11.sendedDate_out);
							response.setAttachement((java.io.Serializable) row11.attachement_out);

							javax.jms.ObjectMessage message_tMomObjectOutput_12 = session_tMomObjectOutput_12
									.createObjectMessage();// On crée
															// l'ObjectMessage
							message_tMomObjectOutput_12.setObject(response);
							message_tMomObjectOutput_12.setStringProperty(
									"Sujet", row11.station);

							System.out.println("----------------------------");
							System.out.println(response);
							System.out.println("----------------------------");

							des_tMomObjectOutput_12 = session_tMomObjectOutput_12
									.createQueue(response.getSendUrl());
							producer_tMomObjectOutput_12 = session_tMomObjectOutput_12
									.createProducer(des_tMomObjectOutput_12);
							producer_tMomObjectOutput_12
									.send(message_tMomObjectOutput_12);

							tos_count_tMomObjectOutput_12++;

							/**
							 * [tMomObjectOutput_12 main ] stop
							 */

						} // End of branch "row11"

					} // End of branch
						// "synchro_date_mrp_production_product_line"

					/**
					 * [tMomObjectInput_1 end ] start
					 */

					currentComponent = "tMomObjectInput_1";

				}
				System.out.println("Closing connection");
				consumer_tMomObjectInput_1.close();
				session_tMomObjectInput_1.close();
				connection_tMomObjectInput_1.close();

				ok_Hash.put("tMomObjectInput_1", true);
				end_Hash.put("tMomObjectInput_1", System.currentTimeMillis());

				/**
				 * [tMomObjectInput_1 end ] stop
				 */

				/**
				 * [tMap_179 end ] start
				 */

				currentComponent = "tMap_179";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_179", true);
				end_Hash.put("tMap_179", System.currentTimeMillis());

				/**
				 * [tMap_179 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_3 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_3";

				ok_Hash.put("tXMLRPCOpenDAS_3", true);
				end_Hash.put("tXMLRPCOpenDAS_3", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_3 end ] stop
				 */

				/**
				 * [tMomObjectOutput_40 end ] start
				 */

				currentComponent = "tMomObjectOutput_40";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_40.close();
				session_tMomObjectOutput_40.close();
				connection_tMomObjectOutput_40.close();

				ok_Hash.put("tMomObjectOutput_40", true);
				end_Hash.put("tMomObjectOutput_40", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_40 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_1 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_1";

				ok_Hash.put("tXMLRPCOpenDAS_1", true);
				end_Hash.put("tXMLRPCOpenDAS_1", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_1 end ] stop
				 */

				/**
				 * [tMomObjectOutput_63 end ] start
				 */

				currentComponent = "tMomObjectOutput_63";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_63.close();
				session_tMomObjectOutput_63.close();
				connection_tMomObjectOutput_63.close();

				ok_Hash.put("tMomObjectOutput_63", true);
				end_Hash.put("tMomObjectOutput_63", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_63 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_5 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_5";

				ok_Hash.put("tXMLRPCOpenDAS_5", true);
				end_Hash.put("tXMLRPCOpenDAS_5", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_5 end ] stop
				 */

				/**
				 * [tMomObjectOutput_11 end ] start
				 */

				currentComponent = "tMomObjectOutput_11";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_11.close();
				session_tMomObjectOutput_11.close();
				connection_tMomObjectOutput_11.close();

				ok_Hash.put("tMomObjectOutput_11", true);
				end_Hash.put("tMomObjectOutput_11", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_11 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_6 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_6";

				ok_Hash.put("tXMLRPCOpenDAS_6", true);
				end_Hash.put("tXMLRPCOpenDAS_6", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_6 end ] stop
				 */

				/**
				 * [tMomObjectOutput_7 end ] start
				 */

				currentComponent = "tMomObjectOutput_7";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_7.close();
				session_tMomObjectOutput_7.close();
				connection_tMomObjectOutput_7.close();

				ok_Hash.put("tMomObjectOutput_7", true);
				end_Hash.put("tMomObjectOutput_7", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_7 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_7 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_7";

				ok_Hash.put("tXMLRPCOpenDAS_7", true);
				end_Hash.put("tXMLRPCOpenDAS_7", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_7 end ] stop
				 */

				/**
				 * [tMomObjectOutput_8 end ] start
				 */

				currentComponent = "tMomObjectOutput_8";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_8.close();
				session_tMomObjectOutput_8.close();
				connection_tMomObjectOutput_8.close();

				ok_Hash.put("tMomObjectOutput_8", true);
				end_Hash.put("tMomObjectOutput_8", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_8 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_8 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_8";

				ok_Hash.put("tXMLRPCOpenDAS_8", true);
				end_Hash.put("tXMLRPCOpenDAS_8", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_8 end ] stop
				 */

				/**
				 * [tMomObjectOutput_5 end ] start
				 */

				currentComponent = "tMomObjectOutput_5";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_5.close();
				session_tMomObjectOutput_5.close();
				connection_tMomObjectOutput_5.close();

				ok_Hash.put("tMomObjectOutput_5", true);
				end_Hash.put("tMomObjectOutput_5", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_5 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_9 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_9";

				ok_Hash.put("tXMLRPCOpenDAS_9", true);
				end_Hash.put("tXMLRPCOpenDAS_9", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_9 end ] stop
				 */

				/**
				 * [tMomObjectOutput_6 end ] start
				 */

				currentComponent = "tMomObjectOutput_6";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_6.close();
				session_tMomObjectOutput_6.close();
				connection_tMomObjectOutput_6.close();

				ok_Hash.put("tMomObjectOutput_6", true);
				end_Hash.put("tMomObjectOutput_6", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_6 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_10 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_10";

				ok_Hash.put("tXMLRPCOpenDAS_10", true);
				end_Hash.put("tXMLRPCOpenDAS_10", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_10 end ] stop
				 */

				/**
				 * [tMomObjectOutput_9 end ] start
				 */

				currentComponent = "tMomObjectOutput_9";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_9.close();
				session_tMomObjectOutput_9.close();
				connection_tMomObjectOutput_9.close();

				ok_Hash.put("tMomObjectOutput_9", true);
				end_Hash.put("tMomObjectOutput_9", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_9 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_12 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_12";

				ok_Hash.put("tXMLRPCOpenDAS_12", true);
				end_Hash.put("tXMLRPCOpenDAS_12", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_12 end ] stop
				 */

				/**
				 * [tMomObjectOutput_10 end ] start
				 */

				currentComponent = "tMomObjectOutput_10";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_10.close();
				session_tMomObjectOutput_10.close();
				connection_tMomObjectOutput_10.close();

				ok_Hash.put("tMomObjectOutput_10", true);
				end_Hash.put("tMomObjectOutput_10", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_10 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_14 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_14";

				ok_Hash.put("tXMLRPCOpenDAS_14", true);
				end_Hash.put("tXMLRPCOpenDAS_14", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_14 end ] stop
				 */

				/**
				 * [tMomObjectOutput_12 end ] start
				 */

				currentComponent = "tMomObjectOutput_12";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_12.close();
				session_tMomObjectOutput_12.close();
				connection_tMomObjectOutput_12.close();

				ok_Hash.put("tMomObjectOutput_12", true);
				end_Hash.put("tMomObjectOutput_12", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_12 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (Error error) {

			throw new Error(error);

		}

		globalMap.put("tMomObjectInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal threadLocal = new ThreadLocal();
	{
		java.util.Map threadRunResultMap = new java.util.HashMap();
		threadRunResultMap.put("errorCode", null);
		threadRunResultMap.put("status", "");
		threadLocal.set(threadRunResultMap);
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final SET SETClass = new SET();

		int exitCode = SETClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = SET.class.getClassLoader()
					.getResourceAsStream(
							"opendas/set_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

			context.adresseOpenERP = (String) context
					.getProperty("adresseOpenERP");

			context.MAGdbname = (String) context.getProperty("MAGdbname");

			context.MAGhost = (String) context.getProperty("MAGhost");

			context.MAGport = (String) context.getProperty("MAGport");

			context.MAGpwd = (String) context.getProperty("MAGpwd");

			context.MAGuid = (String) context.getProperty("MAGuid");

			context.MAGusername = (String) context.getProperty("MAGusername");

			context.adresseActiveMQ = (String) context
					.getProperty("adresseActiveMQ");

			context.dbname = (String) context.getProperty("dbname");

			context.dbnameASPerpgi = (String) context
					.getProperty("dbnameASPerpgi");

			context.destinataireClientActiveMQ = (String) context
					.getProperty("destinataireClientActiveMQ");

			context.destinataireServeurActiveMQ = (String) context
					.getProperty("destinataireServeurActiveMQ");

			context.expediteurActiveMQ = (String) context
					.getProperty("expediteurActiveMQ");

			context.host = (String) context.getProperty("host");

			context.hostASPerpgi = (String) context.getProperty("hostASPerpgi");

			context.port = (String) context.getProperty("port");

			context.portActiveMQ = (String) context.getProperty("portActiveMQ");

			context.portASPerpgi = (String) context.getProperty("portASPerpgi");

			context.pwd = (String) context.getProperty("pwd");

			context.pwdASPerpgi = (String) context.getProperty("pwdASPerpgi");

			context.station = (String) context.getProperty("station");

			context.uid = (String) context.getProperty("uid");

			context.username = (String) context.getProperty("username");

			context.usernameASPerpgi = (String) context
					.getProperty("usernameASPerpgi");

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("adresseOpenERP")) {
				context.adresseOpenERP = (String) parentContextMap
						.get("adresseOpenERP");
			}
			if (parentContextMap.containsKey("MAGdbname")) {
				context.MAGdbname = (String) parentContextMap.get("MAGdbname");
			}
			if (parentContextMap.containsKey("MAGhost")) {
				context.MAGhost = (String) parentContextMap.get("MAGhost");
			}
			if (parentContextMap.containsKey("MAGport")) {
				context.MAGport = (String) parentContextMap.get("MAGport");
			}
			if (parentContextMap.containsKey("MAGpwd")) {
				context.MAGpwd = (String) parentContextMap.get("MAGpwd");
			}
			if (parentContextMap.containsKey("MAGuid")) {
				context.MAGuid = (String) parentContextMap.get("MAGuid");
			}
			if (parentContextMap.containsKey("MAGusername")) {
				context.MAGusername = (String) parentContextMap
						.get("MAGusername");
			}
			if (parentContextMap.containsKey("adresseActiveMQ")) {
				context.adresseActiveMQ = (String) parentContextMap
						.get("adresseActiveMQ");
			}
			if (parentContextMap.containsKey("dbname")) {
				context.dbname = (String) parentContextMap.get("dbname");
			}
			if (parentContextMap.containsKey("dbnameASPerpgi")) {
				context.dbnameASPerpgi = (String) parentContextMap
						.get("dbnameASPerpgi");
			}
			if (parentContextMap.containsKey("destinataireClientActiveMQ")) {
				context.destinataireClientActiveMQ = (String) parentContextMap
						.get("destinataireClientActiveMQ");
			}
			if (parentContextMap.containsKey("destinataireServeurActiveMQ")) {
				context.destinataireServeurActiveMQ = (String) parentContextMap
						.get("destinataireServeurActiveMQ");
			}
			if (parentContextMap.containsKey("expediteurActiveMQ")) {
				context.expediteurActiveMQ = (String) parentContextMap
						.get("expediteurActiveMQ");
			}
			if (parentContextMap.containsKey("host")) {
				context.host = (String) parentContextMap.get("host");
			}
			if (parentContextMap.containsKey("hostASPerpgi")) {
				context.hostASPerpgi = (String) parentContextMap
						.get("hostASPerpgi");
			}
			if (parentContextMap.containsKey("port")) {
				context.port = (String) parentContextMap.get("port");
			}
			if (parentContextMap.containsKey("portActiveMQ")) {
				context.portActiveMQ = (String) parentContextMap
						.get("portActiveMQ");
			}
			if (parentContextMap.containsKey("portASPerpgi")) {
				context.portASPerpgi = (String) parentContextMap
						.get("portASPerpgi");
			}
			if (parentContextMap.containsKey("pwd")) {
				context.pwd = (String) parentContextMap.get("pwd");
			}
			if (parentContextMap.containsKey("pwdASPerpgi")) {
				context.pwdASPerpgi = (String) parentContextMap
						.get("pwdASPerpgi");
			}
			if (parentContextMap.containsKey("station")) {
				context.station = (String) parentContextMap.get("station");
			}
			if (parentContextMap.containsKey("uid")) {
				context.uid = (String) parentContextMap.get("uid");
			}
			if (parentContextMap.containsKey("username")) {
				context.username = (String) parentContextMap.get("username");
			}
			if (parentContextMap.containsKey("usernameASPerpgi")) {
				context.usernameASPerpgi = (String) parentContextMap
						.get("usernameASPerpgi");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			status = "end";
		} catch (TalendException e_tFileInputDelimited_1) {
			status = "failure";
			e_tFileInputDelimited_1.printStackTrace();
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

		} finally {
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : SET");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				context_param.put(keyValue.substring(0, index), keyValue
						.substring(index + 1));
			}
		}

	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 333295 characters generated by Talend Open Studio on the 26 août 2014
 * 14:46:05 CEST
 ************************************************************************************************/
