// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package opendas.get_dev_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDataGenerator;
import routines.TalendDate;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tLibraryLoad_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: GET_DEV Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.5.1.r118616
 * @status DEV
 */
public class GET_DEV implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (host != null) {

				this.setProperty("host", host.toString());

			}

			if (port != null) {

				this.setProperty("port", port.toString());

			}

			if (pwd != null) {

				this.setProperty("pwd", pwd.toString());

			}

			if (username != null) {

				this.setProperty("username", username.toString());

			}

			if (addressActiveMQ != null) {

				this.setProperty("addressActiveMQ", addressActiveMQ.toString());

			}

			if (dbnameOdoo != null) {

				this.setProperty("dbnameOdoo", dbnameOdoo.toString());

			}

			if (hostOdoo != null) {

				this.setProperty("hostOdoo", hostOdoo.toString());

			}

			if (portActiveMQ != null) {

				this.setProperty("portActiveMQ", portActiveMQ.toString());

			}

			if (portOdoo != null) {

				this.setProperty("portOdoo", portOdoo.toString());

			}

			if (pwdOdoo != null) {

				this.setProperty("pwdOdoo", pwdOdoo.toString());

			}

			if (receiverClientActiveMQ != null) {

				this.setProperty("receiverClientActiveMQ",
						receiverClientActiveMQ.toString());

			}

			if (receiverServerActiveMQ != null) {

				this.setProperty("receiverServerActiveMQ",
						receiverServerActiveMQ.toString());

			}

			if (senderActiveMQ != null) {

				this.setProperty("senderActiveMQ", senderActiveMQ.toString());

			}

			if (station != null) {

				this.setProperty("station", station.toString());

			}

			if (uid != null) {

				this.setProperty("uid", uid.toString());

			}

			if (usernameOdoo != null) {

				this.setProperty("usernameOdoo", usernameOdoo.toString());

			}

		}

		public String host;

		public String getHost() {
			return this.host;
		}

		public String port;

		public String getPort() {
			return this.port;
		}

		public String pwd;

		public String getPwd() {
			return this.pwd;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String addressActiveMQ;

		public String getAddressActiveMQ() {
			return this.addressActiveMQ;
		}

		public String dbnameOdoo;

		public String getDbnameOdoo() {
			return this.dbnameOdoo;
		}

		public String hostOdoo;

		public String getHostOdoo() {
			return this.hostOdoo;
		}

		public String portActiveMQ;

		public String getPortActiveMQ() {
			return this.portActiveMQ;
		}

		public String portOdoo;

		public String getPortOdoo() {
			return this.portOdoo;
		}

		public String pwdOdoo;

		public String getPwdOdoo() {
			return this.pwdOdoo;
		}

		public String receiverClientActiveMQ;

		public String getReceiverClientActiveMQ() {
			return this.receiverClientActiveMQ;
		}

		public String receiverServerActiveMQ;

		public String getReceiverServerActiveMQ() {
			return this.receiverServerActiveMQ;
		}

		public String senderActiveMQ;

		public String getSenderActiveMQ() {
			return this.senderActiveMQ;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String uid;

		public String getUid() {
			return this.uid;
		}

		public String usernameOdoo;

		public String getUsernameOdoo() {
			return this.usernameOdoo;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "GET_DEV";
	private final String projectName = "OPENDAS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					GET_DEV.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(GET_DEV.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tContextLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMomObjectOutput_SubjectList_1_error(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectOutput_SubjectList_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMomObjectInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLRPCOpenDAS_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMomObjectOutput_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLRPCOpenDAS_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMomObjectOutput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLRPCOpenDAS_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMomObjectOutput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLRPCOpenDAS_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMomObjectOutput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLRPCOpenDAS_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMomObjectOutput_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLRPCOpenDAS_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMomObjectOutput_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLRPCOpenDAS_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMomObjectOutput_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLRPCOpenDAS_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMomObjectOutput_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLRPCOpenDAS_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMomObjectOutput_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLRPCOpenDAS_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMomObjectOutput_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLRPCOpenDAS_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMomObjectOutput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLRPCOpenDAS_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMomObjectOutput_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLRPCOpenDAS_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMomObjectOutput_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLRPCOpenDAS_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMomObjectOutput_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMomObjectInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMomObjectOutput_SubjectList_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMomObjectInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tContextLoad_1 begin ] start
				 */

				ok_Hash.put("tContextLoad_1", false);
				start_Hash.put("tContextLoad_1", System.currentTimeMillis());

				currentComponent = "tContextLoad_1";

				int tos_count_tContextLoad_1 = 0;

				java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_1 = 0;

				/**
				 * [tContextLoad_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = "/home/opendas/workspace/opendas/talend/Jobs/config/GET.conf";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {

							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"/home/opendas/workspace/opendas/talend/Jobs/config/GET.conf",
								"ISO-8859-15", ";", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.key = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.value = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tContextLoad_1 main ] start
							 */

							currentComponent = "tContextLoad_1";

							// ////////////////////////
							String tmp_key_tContextLoad_1 = null;

							String key_tContextLoad_1 = null;
							if (row1.key != null) {
								tmp_key_tContextLoad_1 = row1.key.trim();
								if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1
										.startsWith("!"))) {
									tmp_key_tContextLoad_1 = null;
								} else {
									row1.key = tmp_key_tContextLoad_1;
								}
							}
							if (row1.key != null) {

								key_tContextLoad_1 =

								row1.key;

							}

							String value_tContextLoad_1 = null;
							if (row1.value != null) {

								value_tContextLoad_1 =

								row1.value;

							}

							if (tmp_key_tContextLoad_1 != null) {
								try {
									if (key_tContextLoad_1 != null
											&& "host"
													.equals(key_tContextLoad_1)) {
										context.host = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "port"
													.equals(key_tContextLoad_1)) {
										context.port = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "pwd".equals(key_tContextLoad_1)) {
										context.pwd = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "username"
													.equals(key_tContextLoad_1)) {
										context.username = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "addressActiveMQ"
													.equals(key_tContextLoad_1)) {
										context.addressActiveMQ = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "dbnameOdoo"
													.equals(key_tContextLoad_1)) {
										context.dbnameOdoo = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "hostOdoo"
													.equals(key_tContextLoad_1)) {
										context.hostOdoo = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "portActiveMQ"
													.equals(key_tContextLoad_1)) {
										context.portActiveMQ = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "portOdoo"
													.equals(key_tContextLoad_1)) {
										context.portOdoo = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "pwdOdoo"
													.equals(key_tContextLoad_1)) {
										context.pwdOdoo = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "receiverClientActiveMQ"
													.equals(key_tContextLoad_1)) {
										context.receiverClientActiveMQ = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "receiverServerActiveMQ"
													.equals(key_tContextLoad_1)) {
										context.receiverServerActiveMQ = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "senderActiveMQ"
													.equals(key_tContextLoad_1)) {
										context.senderActiveMQ = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "station"
													.equals(key_tContextLoad_1)) {
										context.station = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "uid".equals(key_tContextLoad_1)) {
										context.uid = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "usernameOdoo"
													.equals(key_tContextLoad_1)) {
										context.usernameOdoo = value_tContextLoad_1;
									}

									if (context.getProperty(key_tContextLoad_1) != null) {
										assignList_tContextLoad_1
												.add(key_tContextLoad_1);
									} else {
										newPropertyList_tContextLoad_1
												.add(key_tContextLoad_1);
									}
									context.setProperty(key_tContextLoad_1,
											value_tContextLoad_1);
								} catch (java.lang.Exception e) {

									System.err
											.println("Setting a value for the key \""
													+ key_tContextLoad_1
													+ "\" has failed. Error message: "
													+ e.getMessage());
								}
								nb_line_tContextLoad_1++;

							}
							// ////////////////////////

							tos_count_tContextLoad_1++;

							/**
							 * [tContextLoad_1 main ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("/home/opendas/workspace/opendas/talend/Jobs/config/GET.conf") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tContextLoad_1 end ] start
				 */

				currentComponent = "tContextLoad_1";

				java.util.Enumeration<?> enu_tContextLoad_1 = context
						.propertyNames();
				while (enu_tContextLoad_1.hasMoreElements()) {
					String key_tContextLoad_1 = (String) enu_tContextLoad_1
							.nextElement();
					if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
							&& !newPropertyList_tContextLoad_1
									.contains(key_tContextLoad_1)) {
						noAssignList_tContextLoad_1.add(key_tContextLoad_1);
					}
				}

				String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1
						.toString();
				String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1
						.substring(1,
								newPropertyStr_tContextLoad_1.length() - 1);

				String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1
						.toString();
				String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1
						.substring(1, noAssignStr_tContextLoad_1.length() - 1);

				globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT",
						newProperty_tContextLoad_1);
				globalMap.put("tContextLoad_1_KEY_NOT_LOADED",
						noAssign_tContextLoad_1);

				globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

				resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread
						.currentThread().getId() + "", "", "", "", "",
						resumeUtil.convertToJsonText(context));

				ok_Hash.put("tContextLoad_1", true);
				end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				tMomObjectOutput_SubjectList_1Process(globalMap);

				/**
				 * [tContextLoad_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tContextLoad_1 finally ] start
				 */

				currentComponent = "tContextLoad_1";

				/**
				 * [tContextLoad_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tMomObjectOutput_SubjectList_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMomObjectOutput_SubjectList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMomObjectOutput_SubjectList_1 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_SubjectList_1", false);
				start_Hash.put("tMomObjectOutput_SubjectList_1",
						System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_SubjectList_1";

				int tos_count_tMomObjectOutput_SubjectList_1 = 0;

				java.util.Hashtable props_tMomObjectOutput_SubjectList_1 = new java.util.Hashtable();
				String url_tMomObjectOutput_SubjectList_1 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_SubjectList_1);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.receiverServerActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_SubjectList_1 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_SubjectList_1);

				javax.jms.Connection connection_tMomObjectOutput_SubjectList_1 = factory_tMomObjectOutput_SubjectList_1
						.createConnection();
				connection_tMomObjectOutput_SubjectList_1.start();

				javax.jms.Session session_tMomObjectOutput_SubjectList_1 = connection_tMomObjectOutput_SubjectList_1
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_SubjectList_1;
				des_tMomObjectOutput_SubjectList_1 = session_tMomObjectOutput_SubjectList_1
						.createQueue(context.receiverServerActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_SubjectList_1 = session_tMomObjectOutput_SubjectList_1
						.createProducer(des_tMomObjectOutput_SubjectList_1);

				producer_tMomObjectOutput_SubjectList_1
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_SubjectList_1 begin ] stop
				 */
				/**
				 * [tMomObjectOutput_SubjectList_1 main ] start
				 */

				currentComponent = "tMomObjectOutput_SubjectList_1";

				// On envoie le message qui demandera la liste des sujets à
				// suivre dans la file
				org.opendas.modele.ServerRequest serverRequest = new org.opendas.modele.ServerRequest();

				serverRequest.setTitle("getSubjectList");
				serverRequest.setSendUrl(context.receiverServerActiveMQ);
				serverRequest.setFromUrl(context.senderActiveMQ);

				javax.jms.ObjectMessage message_tMomObjectOutput_SubjectList_1 = session_tMomObjectOutput_SubjectList_1
						.createObjectMessage();// On crée l'ObjectMessage

				message_tMomObjectOutput_SubjectList_1.setObject(serverRequest);

				// propriétés
				message_tMomObjectOutput_SubjectList_1.setStringProperty(
						"Sujet", "getSubjectList");
				message_tMomObjectOutput_SubjectList_1.setStringProperty(
						"Station", context.station);

				System.out
						.println("tMomObjectOutput_SubjectList_1 Envoi de la demande de liste de sujets");// DEBUG
				producer_tMomObjectOutput_SubjectList_1
						.send(message_tMomObjectOutput_SubjectList_1);

				tos_count_tMomObjectOutput_SubjectList_1++;

				/**
				 * [tMomObjectOutput_SubjectList_1 main ] stop
				 */
				/**
				 * [tMomObjectOutput_SubjectList_1 end ] start
				 */

				currentComponent = "tMomObjectOutput_SubjectList_1";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_SubjectList_1.close();
				session_tMomObjectOutput_SubjectList_1.close();
				connection_tMomObjectOutput_SubjectList_1.close();

				ok_Hash.put("tMomObjectOutput_SubjectList_1", true);
				end_Hash.put("tMomObjectOutput_SubjectList_1",
						System.currentTimeMillis());

				tMomObjectInput_1Process(globalMap);

				/**
				 * [tMomObjectOutput_SubjectList_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMomObjectOutput_SubjectList_1 finally ] start
				 */

				currentComponent = "tMomObjectOutput_SubjectList_1";

				/**
				 * [tMomObjectOutput_SubjectList_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMomObjectOutput_SubjectList_1_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.attachement_out = (Object) dis.readObject();

					this.sendedDate = readDate(dis);

					this.sendedDate_out = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.attachement_out = (Object) dis.readObject();

					this.sendedDate = readDate(dis);

					this.sendedDate_out = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.attachement_out = (Object) dis.readObject();

					this.sendedDate_out = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class mrp_production_product_lineStruct implements
			routines.system.IPersistableRow<mrp_production_product_lineStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.from_out = readString(dis);

					this.attachement_out = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// String

				writeString(this.from_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",from_out=" + from_out);
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mrp_production_product_lineStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class magento_dtStruct implements
			routines.system.IPersistableRow<magento_dtStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(magento_dtStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class odoo_parcelsStruct implements
			routines.system.IPersistableRow<odoo_parcelsStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(odoo_parcelsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class persoStruct implements
			routines.system.IPersistableRow<persoStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(persoStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class labelsStruct implements
			routines.system.IPersistableRow<labelsStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(labelsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class bl_odoo_reportStruct implements
			routines.system.IPersistableRow<bl_odoo_reportStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(bl_odoo_reportStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class jobStruct implements
			routines.system.IPersistableRow<jobStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(jobStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class folderStruct implements
			routines.system.IPersistableRow<folderStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(folderStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class odoo_dtStruct implements
			routines.system.IPersistableRow<odoo_dtStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.attachement_out = (Object) dis.readObject();

					this.sendedDate = readDate(dis);

					this.sendedDate_out = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(odoo_dtStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class mrp_productionStruct implements
			routines.system.IPersistableRow<mrp_productionStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mrp_productionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class odoo_productsStruct implements
			routines.system.IPersistableRow<odoo_productsStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.attachement_out = (Object) dis.readObject();

					this.sendedDate = readDate(dis);

					this.sendedDate_out = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(odoo_productsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class persoinStruct implements
			routines.system.IPersistableRow<persoinStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(persoinStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class persooutStruct implements
			routines.system.IPersistableRow<persooutStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(persooutStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class groupsStruct implements
			routines.system.IPersistableRow<groupsStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(groupsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class getWsGenericsExtStruct implements
			routines.system.IPersistableRow<getWsGenericsExtStruct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(getWsGenericsExtStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_OPENDAS_GET_DEV = new byte[0];
		static byte[] commonByteArray_OPENDAS_GET_DEV = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String sendUrl;

		public String getSendUrl() {
			return this.sendUrl;
		}

		public String fromUrl;

		public String getFromUrl() {
			return this.fromUrl;
		}

		public java.util.Date sendedDate;

		public java.util.Date getSendedDate() {
			return this.sendedDate;
		}

		public Object attachement;

		public Object getAttachement() {
			return this.attachement;
		}

		public String station;

		public String getStation() {
			return this.station;
		}

		public String title_out;

		public String getTitle_out() {
			return this.title_out;
		}

		public String send_out;

		public String getSend_out() {
			return this.send_out;
		}

		public String from_out;

		public String getFrom_out() {
			return this.from_out;
		}

		public java.util.Date sendedDate_out;

		public java.util.Date getSendedDate_out() {
			return this.sendedDate_out;
		}

		public Object attachement_out;

		public Object getAttachement_out() {
			return this.attachement_out;
		}

		public String station_out;

		public String getStation_out() {
			return this.station_out;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OPENDAS_GET_DEV.length) {
					if (length < 1024
							&& commonByteArray_OPENDAS_GET_DEV.length == 0) {
						commonByteArray_OPENDAS_GET_DEV = new byte[1024];
					} else {
						commonByteArray_OPENDAS_GET_DEV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OPENDAS_GET_DEV, 0, length);
				strReturn = new String(commonByteArray_OPENDAS_GET_DEV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OPENDAS_GET_DEV) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.sendUrl = readString(dis);

					this.fromUrl = readString(dis);

					this.sendedDate = readDate(dis);

					this.attachement = (Object) dis.readObject();

					this.station = readString(dis);

					this.title_out = readString(dis);

					this.send_out = readString(dis);

					this.from_out = readString(dis);

					this.sendedDate_out = readDate(dis);

					this.attachement_out = (Object) dis.readObject();

					this.station_out = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.sendUrl, dos);

				// String

				writeString(this.fromUrl, dos);

				// java.util.Date

				writeDate(this.sendedDate, dos);

				// Object

				dos.writeObject(this.attachement);

				// String

				writeString(this.station, dos);

				// String

				writeString(this.title_out, dos);

				// String

				writeString(this.send_out, dos);

				// String

				writeString(this.from_out, dos);

				// java.util.Date

				writeDate(this.sendedDate_out, dos);

				// Object

				dos.writeObject(this.attachement_out);

				// String

				writeString(this.station_out, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",sendUrl=" + sendUrl);
			sb.append(",fromUrl=" + fromUrl);
			sb.append(",sendedDate=" + String.valueOf(sendedDate));
			sb.append(",attachement=" + String.valueOf(attachement));
			sb.append(",station=" + station);
			sb.append(",title_out=" + title_out);
			sb.append(",send_out=" + send_out);
			sb.append(",from_out=" + from_out);
			sb.append(",sendedDate_out=" + String.valueOf(sendedDate_out));
			sb.append(",attachement_out=" + String.valueOf(attachement_out));
			sb.append(",station_out=" + station_out);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMomObjectInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMomObjectInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				getWsGenericsExtStruct getWsGenericsExt = new getWsGenericsExtStruct();
				mrp_production_product_lineStruct mrp_production_product_line = new mrp_production_product_lineStruct();
				row13Struct row13 = new row13Struct();
				magento_dtStruct magento_dt = new magento_dtStruct();
				row16Struct row16 = new row16Struct();
				odoo_parcelsStruct odoo_parcels = new odoo_parcelsStruct();
				row4Struct row4 = new row4Struct();
				persoStruct perso = new persoStruct();
				row5Struct row5 = new row5Struct();
				labelsStruct labels = new labelsStruct();
				row6Struct row6 = new row6Struct();
				bl_odoo_reportStruct bl_odoo_report = new bl_odoo_reportStruct();
				row9Struct row9 = new row9Struct();
				jobStruct job = new jobStruct();
				row10Struct row10 = new row10Struct();
				folderStruct folder = new folderStruct();
				row11Struct row11 = new row11Struct();
				odoo_dtStruct odoo_dt = new odoo_dtStruct();
				row14Struct row14 = new row14Struct();
				mrp_productionStruct mrp_production = new mrp_productionStruct();
				row12Struct row12 = new row12Struct();
				odoo_productsStruct odoo_products = new odoo_productsStruct();
				row3Struct row3 = new row3Struct();
				persoinStruct persoin = new persoinStruct();
				row7Struct row7 = new row7Struct();
				persooutStruct persoout = new persooutStruct();
				row8Struct row8 = new row8Struct();
				groupsStruct groups = new groupsStruct();
				row15Struct row15 = new row15Struct();

				/**
				 * [tMomObjectOutput_15 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_15", false);
				start_Hash.put("tMomObjectOutput_15",
						System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_15";

				int tos_count_tMomObjectOutput_15 = 0;

				java.util.Hashtable props_tMomObjectOutput_15 = new java.util.Hashtable();
				String url_tMomObjectOutput_15 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_15);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_15 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_15);

				javax.jms.Connection connection_tMomObjectOutput_15 = factory_tMomObjectOutput_15
						.createConnection();
				connection_tMomObjectOutput_15.start();

				javax.jms.Session session_tMomObjectOutput_15 = connection_tMomObjectOutput_15
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_15;
				des_tMomObjectOutput_15 = session_tMomObjectOutput_15
						.createQueue(context.senderActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_15 = session_tMomObjectOutput_15
						.createProducer(des_tMomObjectOutput_15);

				producer_tMomObjectOutput_15
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_15 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_17 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_17", false);
				start_Hash.put("tXMLRPCOpenDAS_17", System.currentTimeMillis());

				currentComponent = "tXMLRPCOpenDAS_17";

				int tos_count_tXMLRPCOpenDAS_17 = 0;

				/**
				 * [tXMLRPCOpenDAS_17 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_2 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_2", false);
				start_Hash
						.put("tMomObjectOutput_2", System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_2";

				int tos_count_tMomObjectOutput_2 = 0;

				java.util.Hashtable props_tMomObjectOutput_2 = new java.util.Hashtable();
				String url_tMomObjectOutput_2 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_2);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_2 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_2);

				javax.jms.Connection connection_tMomObjectOutput_2 = factory_tMomObjectOutput_2
						.createConnection();
				connection_tMomObjectOutput_2.start();

				javax.jms.Session session_tMomObjectOutput_2 = connection_tMomObjectOutput_2
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_2;
				des_tMomObjectOutput_2 = session_tMomObjectOutput_2
						.createQueue(context.senderActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_2 = session_tMomObjectOutput_2
						.createProducer(des_tMomObjectOutput_2);

				producer_tMomObjectOutput_2
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_2 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_2 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_2", false);
				start_Hash.put("tXMLRPCOpenDAS_2", System.currentTimeMillis());

				currentComponent = "tXMLRPCOpenDAS_2";

				int tos_count_tXMLRPCOpenDAS_2 = 0;

				/**
				 * [tXMLRPCOpenDAS_2 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_4 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_4", false);
				start_Hash
						.put("tMomObjectOutput_4", System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_4";

				int tos_count_tMomObjectOutput_4 = 0;

				java.util.Hashtable props_tMomObjectOutput_4 = new java.util.Hashtable();
				String url_tMomObjectOutput_4 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_4);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_4 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_4);

				javax.jms.Connection connection_tMomObjectOutput_4 = factory_tMomObjectOutput_4
						.createConnection();
				connection_tMomObjectOutput_4.start();

				javax.jms.Session session_tMomObjectOutput_4 = connection_tMomObjectOutput_4
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_4;
				des_tMomObjectOutput_4 = session_tMomObjectOutput_4
						.createQueue(context.senderActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_4 = session_tMomObjectOutput_4
						.createProducer(des_tMomObjectOutput_4);

				producer_tMomObjectOutput_4
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_4 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_6 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_6", false);
				start_Hash.put("tXMLRPCOpenDAS_6", System.currentTimeMillis());

				currentComponent = "tXMLRPCOpenDAS_6";

				int tos_count_tXMLRPCOpenDAS_6 = 0;

				/**
				 * [tXMLRPCOpenDAS_6 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_5 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_5", false);
				start_Hash
						.put("tMomObjectOutput_5", System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_5";

				int tos_count_tMomObjectOutput_5 = 0;

				java.util.Hashtable props_tMomObjectOutput_5 = new java.util.Hashtable();
				String url_tMomObjectOutput_5 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_5);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_5 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_5);

				javax.jms.Connection connection_tMomObjectOutput_5 = factory_tMomObjectOutput_5
						.createConnection();
				connection_tMomObjectOutput_5.start();

				javax.jms.Session session_tMomObjectOutput_5 = connection_tMomObjectOutput_5
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_5;
				des_tMomObjectOutput_5 = session_tMomObjectOutput_5
						.createQueue(context.senderActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_5 = session_tMomObjectOutput_5
						.createProducer(des_tMomObjectOutput_5);

				producer_tMomObjectOutput_5
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_5 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_8 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_8", false);
				start_Hash.put("tXMLRPCOpenDAS_8", System.currentTimeMillis());

				currentComponent = "tXMLRPCOpenDAS_8";

				int tos_count_tXMLRPCOpenDAS_8 = 0;

				/**
				 * [tXMLRPCOpenDAS_8 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_6 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_6", false);
				start_Hash
						.put("tMomObjectOutput_6", System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_6";

				int tos_count_tMomObjectOutput_6 = 0;

				java.util.Hashtable props_tMomObjectOutput_6 = new java.util.Hashtable();
				String url_tMomObjectOutput_6 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_6);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_6 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_6);

				javax.jms.Connection connection_tMomObjectOutput_6 = factory_tMomObjectOutput_6
						.createConnection();
				connection_tMomObjectOutput_6.start();

				javax.jms.Session session_tMomObjectOutput_6 = connection_tMomObjectOutput_6
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_6;
				des_tMomObjectOutput_6 = session_tMomObjectOutput_6
						.createQueue(context.senderActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_6 = session_tMomObjectOutput_6
						.createProducer(des_tMomObjectOutput_6);

				producer_tMomObjectOutput_6
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_6 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_9 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_9", false);
				start_Hash.put("tXMLRPCOpenDAS_9", System.currentTimeMillis());

				currentComponent = "tXMLRPCOpenDAS_9";

				int tos_count_tXMLRPCOpenDAS_9 = 0;

				/**
				 * [tXMLRPCOpenDAS_9 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_9 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_9", false);
				start_Hash
						.put("tMomObjectOutput_9", System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_9";

				int tos_count_tMomObjectOutput_9 = 0;

				java.util.Hashtable props_tMomObjectOutput_9 = new java.util.Hashtable();
				String url_tMomObjectOutput_9 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_9);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_9 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_9);

				javax.jms.Connection connection_tMomObjectOutput_9 = factory_tMomObjectOutput_9
						.createConnection();
				connection_tMomObjectOutput_9.start();

				javax.jms.Session session_tMomObjectOutput_9 = connection_tMomObjectOutput_9
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_9;
				des_tMomObjectOutput_9 = session_tMomObjectOutput_9
						.createQueue(context.senderActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_9 = session_tMomObjectOutput_9
						.createProducer(des_tMomObjectOutput_9);

				producer_tMomObjectOutput_9
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_9 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_12 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_12", false);
				start_Hash.put("tXMLRPCOpenDAS_12", System.currentTimeMillis());

				currentComponent = "tXMLRPCOpenDAS_12";

				int tos_count_tXMLRPCOpenDAS_12 = 0;

				/**
				 * [tXMLRPCOpenDAS_12 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_10 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_10", false);
				start_Hash.put("tMomObjectOutput_10",
						System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_10";

				int tos_count_tMomObjectOutput_10 = 0;

				java.util.Hashtable props_tMomObjectOutput_10 = new java.util.Hashtable();
				String url_tMomObjectOutput_10 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_10);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_10 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_10);

				javax.jms.Connection connection_tMomObjectOutput_10 = factory_tMomObjectOutput_10
						.createConnection();
				connection_tMomObjectOutput_10.start();

				javax.jms.Session session_tMomObjectOutput_10 = connection_tMomObjectOutput_10
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_10;
				des_tMomObjectOutput_10 = session_tMomObjectOutput_10
						.createQueue(context.senderActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_10 = session_tMomObjectOutput_10
						.createProducer(des_tMomObjectOutput_10);

				producer_tMomObjectOutput_10
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_10 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_14 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_14", false);
				start_Hash.put("tXMLRPCOpenDAS_14", System.currentTimeMillis());

				currentComponent = "tXMLRPCOpenDAS_14";

				int tos_count_tXMLRPCOpenDAS_14 = 0;

				/**
				 * [tXMLRPCOpenDAS_14 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_11 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_11", false);
				start_Hash.put("tMomObjectOutput_11",
						System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_11";

				int tos_count_tMomObjectOutput_11 = 0;

				java.util.Hashtable props_tMomObjectOutput_11 = new java.util.Hashtable();
				String url_tMomObjectOutput_11 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_11);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_11 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_11);

				javax.jms.Connection connection_tMomObjectOutput_11 = factory_tMomObjectOutput_11
						.createConnection();
				connection_tMomObjectOutput_11.start();

				javax.jms.Session session_tMomObjectOutput_11 = connection_tMomObjectOutput_11
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_11;
				des_tMomObjectOutput_11 = session_tMomObjectOutput_11
						.createQueue(context.senderActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_11 = session_tMomObjectOutput_11
						.createProducer(des_tMomObjectOutput_11);

				producer_tMomObjectOutput_11
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_11 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_15 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_15", false);
				start_Hash.put("tXMLRPCOpenDAS_15", System.currentTimeMillis());

				currentComponent = "tXMLRPCOpenDAS_15";

				int tos_count_tXMLRPCOpenDAS_15 = 0;

				/**
				 * [tXMLRPCOpenDAS_15 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_12 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_12", false);
				start_Hash.put("tMomObjectOutput_12",
						System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_12";

				int tos_count_tMomObjectOutput_12 = 0;

				java.util.Hashtable props_tMomObjectOutput_12 = new java.util.Hashtable();
				String url_tMomObjectOutput_12 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_12);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_12 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_12);

				javax.jms.Connection connection_tMomObjectOutput_12 = factory_tMomObjectOutput_12
						.createConnection();
				connection_tMomObjectOutput_12.start();

				javax.jms.Session session_tMomObjectOutput_12 = connection_tMomObjectOutput_12
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_12;
				des_tMomObjectOutput_12 = session_tMomObjectOutput_12
						.createQueue(context.senderActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_12 = session_tMomObjectOutput_12
						.createProducer(des_tMomObjectOutput_12);

				producer_tMomObjectOutput_12
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_12 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_4 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_4", false);
				start_Hash.put("tXMLRPCOpenDAS_4", System.currentTimeMillis());

				currentComponent = "tXMLRPCOpenDAS_4";

				int tos_count_tXMLRPCOpenDAS_4 = 0;

				/**
				 * [tXMLRPCOpenDAS_4 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_14 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_14", false);
				start_Hash.put("tMomObjectOutput_14",
						System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_14";

				int tos_count_tMomObjectOutput_14 = 0;

				java.util.Hashtable props_tMomObjectOutput_14 = new java.util.Hashtable();
				String url_tMomObjectOutput_14 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_14);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_14 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_14);

				javax.jms.Connection connection_tMomObjectOutput_14 = factory_tMomObjectOutput_14
						.createConnection();
				connection_tMomObjectOutput_14.start();

				javax.jms.Session session_tMomObjectOutput_14 = connection_tMomObjectOutput_14
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_14;
				des_tMomObjectOutput_14 = session_tMomObjectOutput_14
						.createQueue(context.senderActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_14 = session_tMomObjectOutput_14
						.createProducer(des_tMomObjectOutput_14);

				producer_tMomObjectOutput_14
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_14 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_16 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_16", false);
				start_Hash.put("tXMLRPCOpenDAS_16", System.currentTimeMillis());

				currentComponent = "tXMLRPCOpenDAS_16";

				int tos_count_tXMLRPCOpenDAS_16 = 0;

				/**
				 * [tXMLRPCOpenDAS_16 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_3 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_3", false);
				start_Hash
						.put("tMomObjectOutput_3", System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_3";

				int tos_count_tMomObjectOutput_3 = 0;

				java.util.Hashtable props_tMomObjectOutput_3 = new java.util.Hashtable();
				String url_tMomObjectOutput_3 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_3);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_3 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_3);

				javax.jms.Connection connection_tMomObjectOutput_3 = factory_tMomObjectOutput_3
						.createConnection();
				connection_tMomObjectOutput_3.start();

				javax.jms.Session session_tMomObjectOutput_3 = connection_tMomObjectOutput_3
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_3;
				des_tMomObjectOutput_3 = session_tMomObjectOutput_3
						.createQueue(context.senderActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_3 = session_tMomObjectOutput_3
						.createProducer(des_tMomObjectOutput_3);

				producer_tMomObjectOutput_3
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_3 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_5 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_5", false);
				start_Hash.put("tXMLRPCOpenDAS_5", System.currentTimeMillis());

				currentComponent = "tXMLRPCOpenDAS_5";

				int tos_count_tXMLRPCOpenDAS_5 = 0;

				/**
				 * [tXMLRPCOpenDAS_5 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_7 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_7", false);
				start_Hash
						.put("tMomObjectOutput_7", System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_7";

				int tos_count_tMomObjectOutput_7 = 0;

				java.util.Hashtable props_tMomObjectOutput_7 = new java.util.Hashtable();
				String url_tMomObjectOutput_7 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_7);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_7 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_7);

				javax.jms.Connection connection_tMomObjectOutput_7 = factory_tMomObjectOutput_7
						.createConnection();
				connection_tMomObjectOutput_7.start();

				javax.jms.Session session_tMomObjectOutput_7 = connection_tMomObjectOutput_7
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_7;
				des_tMomObjectOutput_7 = session_tMomObjectOutput_7
						.createQueue(context.senderActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_7 = session_tMomObjectOutput_7
						.createProducer(des_tMomObjectOutput_7);

				producer_tMomObjectOutput_7
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_7 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_10 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_10", false);
				start_Hash.put("tXMLRPCOpenDAS_10", System.currentTimeMillis());

				currentComponent = "tXMLRPCOpenDAS_10";

				int tos_count_tXMLRPCOpenDAS_10 = 0;

				/**
				 * [tXMLRPCOpenDAS_10 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_8 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_8", false);
				start_Hash
						.put("tMomObjectOutput_8", System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_8";

				int tos_count_tMomObjectOutput_8 = 0;

				java.util.Hashtable props_tMomObjectOutput_8 = new java.util.Hashtable();
				String url_tMomObjectOutput_8 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_8);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_8 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_8);

				javax.jms.Connection connection_tMomObjectOutput_8 = factory_tMomObjectOutput_8
						.createConnection();
				connection_tMomObjectOutput_8.start();

				javax.jms.Session session_tMomObjectOutput_8 = connection_tMomObjectOutput_8
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_8;
				des_tMomObjectOutput_8 = session_tMomObjectOutput_8
						.createQueue(context.senderActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_8 = session_tMomObjectOutput_8
						.createProducer(des_tMomObjectOutput_8);

				producer_tMomObjectOutput_8
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_8 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_11 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_11", false);
				start_Hash.put("tXMLRPCOpenDAS_11", System.currentTimeMillis());

				currentComponent = "tXMLRPCOpenDAS_11";

				int tos_count_tXMLRPCOpenDAS_11 = 0;

				/**
				 * [tXMLRPCOpenDAS_11 begin ] stop
				 */

				/**
				 * [tMomObjectOutput_13 begin ] start
				 */

				ok_Hash.put("tMomObjectOutput_13", false);
				start_Hash.put("tMomObjectOutput_13",
						System.currentTimeMillis());

				currentComponent = "tMomObjectOutput_13";

				int tos_count_tMomObjectOutput_13 = 0;

				java.util.Hashtable props_tMomObjectOutput_13 = new java.util.Hashtable();
				String url_tMomObjectOutput_13 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				System.out.println("Connecting to URL: "
						+ url_tMomObjectOutput_13);
				System.out.println("Producing " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectOutput_13 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectOutput_13);

				javax.jms.Connection connection_tMomObjectOutput_13 = factory_tMomObjectOutput_13
						.createConnection();
				connection_tMomObjectOutput_13.start();

				javax.jms.Session session_tMomObjectOutput_13 = connection_tMomObjectOutput_13
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);

				javax.jms.Destination des_tMomObjectOutput_13;
				des_tMomObjectOutput_13 = session_tMomObjectOutput_13
						.createQueue(context.senderActiveMQ);
				javax.jms.MessageProducer producer_tMomObjectOutput_13 = session_tMomObjectOutput_13
						.createProducer(des_tMomObjectOutput_13);

				producer_tMomObjectOutput_13
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				/**
				 * [tMomObjectOutput_13 begin ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_3 begin ] start
				 */

				ok_Hash.put("tXMLRPCOpenDAS_3", false);
				start_Hash.put("tXMLRPCOpenDAS_3", System.currentTimeMillis());

				currentComponent = "tXMLRPCOpenDAS_3";

				int tos_count_tXMLRPCOpenDAS_3 = 0;

				/**
				 * [tXMLRPCOpenDAS_3 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				mrp_production_product_lineStruct mrp_production_product_line_tmp = new mrp_production_product_lineStruct();
				magento_dtStruct magento_dt_tmp = new magento_dtStruct();
				odoo_parcelsStruct odoo_parcels_tmp = new odoo_parcelsStruct();
				persoStruct perso_tmp = new persoStruct();
				labelsStruct labels_tmp = new labelsStruct();
				bl_odoo_reportStruct bl_odoo_report_tmp = new bl_odoo_reportStruct();
				jobStruct job_tmp = new jobStruct();
				folderStruct folder_tmp = new folderStruct();
				odoo_dtStruct odoo_dt_tmp = new odoo_dtStruct();
				mrp_productionStruct mrp_production_tmp = new mrp_productionStruct();
				odoo_productsStruct odoo_products_tmp = new odoo_productsStruct();
				persoinStruct persoin_tmp = new persoinStruct();
				persooutStruct persoout_tmp = new persooutStruct();
				groupsStruct groups_tmp = new groupsStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				getWsGenericsExtStruct getWsGenericsExt_tmp = new getWsGenericsExtStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tMomObjectInput_1 begin ] start
				 */

				ok_Hash.put("tMomObjectInput_1", false);
				start_Hash.put("tMomObjectInput_1", System.currentTimeMillis());

				currentComponent = "tMomObjectInput_1";

				int tos_count_tMomObjectInput_1 = 0;

				String url_tMomObjectInput_1 = "tcp://"
						+ context.addressActiveMQ + ":" + context.portActiveMQ;
				long timeout_tMomObjectInput_1 = 1;

				System.out.println("Connecting to URL: "
						+ url_tMomObjectInput_1);
				System.out.println("Consuming " + (false ? "topic" : "queue")
						+ ": " + context.senderActiveMQ);

				org.apache.activemq.ActiveMQConnectionFactory factory_tMomObjectInput_1 = new org.apache.activemq.ActiveMQConnectionFactory(
						org.apache.activemq.ActiveMQConnection.DEFAULT_USER,
						org.apache.activemq.ActiveMQConnection.DEFAULT_PASSWORD,
						url_tMomObjectInput_1);

				javax.jms.Connection connection_tMomObjectInput_1 = factory_tMomObjectInput_1
						.createConnection();
				connection_tMomObjectInput_1.start();
				javax.jms.Session session_tMomObjectInput_1 = connection_tMomObjectInput_1
						.createSession(false,
								javax.jms.Session.AUTO_ACKNOWLEDGE);
				javax.jms.Destination des_tMomObjectInput_1 = null;

				des_tMomObjectInput_1 = session_tMomObjectInput_1
						.createQueue(context.senderActiveMQ);

				javax.jms.MessageProducer replyProducer_tMomObjectInput_1 = session_tMomObjectInput_1
						.createProducer(null);
				replyProducer_tMomObjectInput_1
						.setDeliveryMode(javax.jms.DeliveryMode.NON_PERSISTENT);

				javax.jms.MessageConsumer consumer_tMomObjectInput_1 = session_tMomObjectInput_1
						.createConsumer(des_tMomObjectInput_1, "Sujet = '"
								+ context.station + "'");
				System.out
						.println("tMomObjectInput_1 Attente de la liste de sujet Sujet = 'context.station'");

				javax.jms.Message message_tMomObjectInput_1;
				System.out
						.println("tMomObjectInput_1 Attente de la liste de sujets");

				// Réception de la liste de sujets à écouter

				java.util.List subjectList = null;
				// Boucle qui écoute jusqu'à ce qu'on ait retiré la liste du
				// message.
				while ((message_tMomObjectInput_1 = consumer_tMomObjectInput_1
						.receive()) != null) {

					javax.jms.ObjectMessage objMsg_tMomObjectInput_1 = (javax.jms.ObjectMessage) message_tMomObjectInput_1;
					Object object = objMsg_tMomObjectInput_1.getObject();
					if (object instanceof org.opendas.modele.ServerRequest) {
						org.opendas.modele.ServerRequest serverRequest = (org.opendas.modele.ServerRequest) object;
						subjectList = (java.util.List) serverRequest
								.getAttachement();
						System.out.println("tMomObjectInput_1 Liste reçue");
						break;
					}
				}

				// Création de la requête de sélection de sujets en fonction de
				// la liste reçue.
				StringBuilder strBuild = new StringBuilder();

				java.util.Iterator it = subjectList.iterator();
				while (it.hasNext()) {
					strBuild.append("Sujet = '");
					strBuild.append(it.next() + "'");
					if (it.hasNext())
						strBuild.append(" OR ");
				}

				// Création d'un autre MessageConsumer avec le bon
				// MessageSelector
				System.out
						.println("tMomObjectInput_1 Liste de sujets non utilisée");// DEBUG
				consumer_tMomObjectInput_1 = session_tMomObjectInput_1
						.createConsumer(des_tMomObjectInput_1,
								strBuild.toString());
				System.out.println("\ntMomObjectInput_1 message selector : "
						+ consumer_tMomObjectInput_1.getMessageSelector());

				System.out
						.println("We will consume messages while they continue to be delivered ");
				while ((message_tMomObjectInput_1 = consumer_tMomObjectInput_1
						.receive()) != null) {

					javax.jms.ObjectMessage objMsg_tMomObjectInput_1 = (javax.jms.ObjectMessage) message_tMomObjectInput_1;
					String msg_tMomObjectInput_1 = "";
					Object object = objMsg_tMomObjectInput_1.getObject();
					System.out.println("\ntMomObjectInput_1 Station : "
							+ objMsg_tMomObjectInput_1
									.getStringProperty("Station"));// DEBUG
					String station = objMsg_tMomObjectInput_1
							.getStringProperty("Station");
					// initialisation des champs récupérés dans le message
					String title = null;
					String sendUrl = null;
					String fromUrl = null;
					Date sendedDate = null;
					Object attachement = null;

					if (object instanceof org.opendas.modele.ServerRequest) {
						org.opendas.modele.ServerRequest serverRequest = (org.opendas.modele.ServerRequest) object;

						// champs qui serviront à créer l'object previousRequest
						// que l'on enverra avec la réponse
						title = serverRequest.getTitle();// on récupère le champ
															// "title"
						sendUrl = serverRequest.getSendUrl();// on récupère le
																// champ
																// "sendUrl"
						fromUrl = serverRequest.getFromUrl();// on récupère le
																// champ
																// "fromUrl"
						sendedDate = serverRequest.getSendedDate();// on
																	// récupère
																	// le champ
																	// "sendedDate"

						// champ contenant les paramètres de la requête XMLRPC à
						// effectuer
						attachement = serverRequest.getAttachement();

						System.out
								.println("tMomObjectInput_1 title : " + title);// DEBUG

					}

					// renseigner les champs des connexions de sortie (champs
					// pour previousRequest)
					row2.title = title;
					row2.sendUrl = sendUrl;
					row2.fromUrl = fromUrl;
					row2.sendedDate = sendedDate;
					// champ attachement fournissant les paramètres pour la
					// requête XMLRPC
					row2.attachement = attachement;
					// nom de l'expéditeur du message (la propriété "Sujet" de
					// la réponse prendra cette valeur)
					row2.station = station;

					/**
					 * [tMomObjectInput_1 begin ] stop
					 */
					/**
					 * [tMomObjectInput_1 main ] start
					 */

					currentComponent = "tMomObjectInput_1";

					tos_count_tMomObjectInput_1++;

					/**
					 * [tMomObjectInput_1 main ] stop
					 */

					/**
					 * [tMap_2 main ] start
					 */

					currentComponent = "tMap_2";

					boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_2 = false;
					boolean mainRowRejected_tMap_2 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
						// ###############################
						// # Output tables

						getWsGenericsExt = null;

						// # Output table : 'getWsGenericsExt'
						// # Filter conditions
						if (

						"getWsGenericsExt".equals(row2.title)

						) {
							getWsGenericsExt_tmp.title = row2.title;
							getWsGenericsExt_tmp.sendUrl = row2.sendUrl;
							getWsGenericsExt_tmp.fromUrl = row2.fromUrl;
							getWsGenericsExt_tmp.sendedDate = row2.sendedDate;
							getWsGenericsExt_tmp.attachement = row2.attachement;
							getWsGenericsExt_tmp.station = row2.station;
							getWsGenericsExt_tmp.title_out = row2.title_out;
							getWsGenericsExt_tmp.send_out = row2.send_out;
							getWsGenericsExt_tmp.from_out = row2.from_out;
							getWsGenericsExt_tmp.sendedDate_out = row2.sendedDate_out;
							getWsGenericsExt_tmp.attachement_out = row2.attachement_out;
							getWsGenericsExt_tmp.station_out = row2.station_out;
							getWsGenericsExt = getWsGenericsExt_tmp;
						} // closing filter/reject
							// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_2 = false;

					tos_count_tMap_2++;

					/**
					 * [tMap_2 main ] stop
					 */
					// Start of branch "getWsGenericsExt"
					if (getWsGenericsExt != null) {

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							mrp_production_product_line = null;
							magento_dt = null;
							odoo_parcels = null;
							perso = null;
							labels = null;
							bl_odoo_report = null;
							job = null;
							folder = null;
							odoo_dt = null;
							mrp_production = null;
							odoo_products = null;
							persoin = null;
							persoout = null;
							groups = null;

							// # Output table : 'mrp_production_product_line'
							// # Filter conditions
							if (

							"mrp_production_product_line"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								mrp_production_product_line_tmp.title = getWsGenericsExt.title;
								mrp_production_product_line_tmp.sendUrl = getWsGenericsExt.sendUrl;
								mrp_production_product_line_tmp.fromUrl = getWsGenericsExt.fromUrl;
								mrp_production_product_line_tmp.sendedDate = getWsGenericsExt.sendedDate;
								mrp_production_product_line_tmp.attachement = getWsGenericsExt.attachement;
								mrp_production_product_line_tmp.station = getWsGenericsExt.station;
								mrp_production_product_line_tmp.title_out = getWsGenericsExt.title_out;
								mrp_production_product_line_tmp.send_out = getWsGenericsExt.send_out;
								mrp_production_product_line_tmp.sendedDate_out = null;
								mrp_production_product_line_tmp.from_out = getWsGenericsExt.from_out;
								mrp_production_product_line_tmp.attachement_out = getWsGenericsExt.attachement_out;
								mrp_production_product_line = mrp_production_product_line_tmp;
							} // closing filter/reject

							// # Output table : 'magento_dt'
							// # Filter conditions
							if (

							"magento_dt"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								magento_dt_tmp.title = getWsGenericsExt.title;
								magento_dt_tmp.sendUrl = getWsGenericsExt.sendUrl;
								magento_dt_tmp.fromUrl = getWsGenericsExt.fromUrl;
								magento_dt_tmp.sendedDate = getWsGenericsExt.sendedDate;
								magento_dt_tmp.attachement = getWsGenericsExt.attachement;
								magento_dt_tmp.station = getWsGenericsExt.station;
								magento_dt_tmp.title_out = getWsGenericsExt.title_out;
								magento_dt_tmp.send_out = getWsGenericsExt.send_out;
								magento_dt_tmp.from_out = getWsGenericsExt.from_out;
								magento_dt_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								magento_dt_tmp.attachement_out = getWsGenericsExt.attachement_out;
								magento_dt = magento_dt_tmp;
							} // closing filter/reject

							// # Output table : 'odoo_parcels'
							// # Filter conditions
							if (

							"odoo_parcels"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								odoo_parcels_tmp.title = getWsGenericsExt.title;
								odoo_parcels_tmp.sendUrl = getWsGenericsExt.sendUrl;
								odoo_parcels_tmp.fromUrl = getWsGenericsExt.fromUrl;
								odoo_parcels_tmp.sendedDate = getWsGenericsExt.sendedDate;
								odoo_parcels_tmp.attachement = getWsGenericsExt.attachement;
								odoo_parcels_tmp.station = getWsGenericsExt.station;
								odoo_parcels_tmp.title_out = getWsGenericsExt.title_out;
								odoo_parcels_tmp.send_out = getWsGenericsExt.send_out;
								odoo_parcels_tmp.from_out = getWsGenericsExt.from_out;
								odoo_parcels_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								odoo_parcels_tmp.attachement_out = getWsGenericsExt.attachement_out;
								odoo_parcels = odoo_parcels_tmp;
							} // closing filter/reject

							// # Output table : 'perso'
							// # Filter conditions
							if (

							"perso".equals(((java.util.Map) getWsGenericsExt.attachement)
									.get("model"))

							) {
								perso_tmp.title = getWsGenericsExt.title;
								perso_tmp.sendUrl = getWsGenericsExt.sendUrl;
								perso_tmp.fromUrl = getWsGenericsExt.fromUrl;
								perso_tmp.sendedDate = getWsGenericsExt.sendedDate;
								perso_tmp.attachement = getWsGenericsExt.attachement;
								perso_tmp.station = getWsGenericsExt.station;
								perso_tmp.title_out = getWsGenericsExt.title_out;
								perso_tmp.send_out = getWsGenericsExt.send_out;
								perso_tmp.from_out = getWsGenericsExt.from_out;
								perso_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								perso_tmp.attachement_out = getWsGenericsExt.attachement_out;
								perso = perso_tmp;
							} // closing filter/reject

							// # Output table : 'labels'
							// # Filter conditions
							if (

							"labels".equals(((java.util.Map) getWsGenericsExt.attachement)
									.get("model"))

							) {
								labels_tmp.title = getWsGenericsExt.title;
								labels_tmp.sendUrl = getWsGenericsExt.sendUrl;
								labels_tmp.fromUrl = getWsGenericsExt.fromUrl;
								labels_tmp.sendedDate = getWsGenericsExt.sendedDate;
								labels_tmp.attachement = getWsGenericsExt.attachement;
								labels_tmp.station = getWsGenericsExt.station;
								labels_tmp.title_out = getWsGenericsExt.title_out;
								labels_tmp.send_out = getWsGenericsExt.send_out;
								labels_tmp.from_out = getWsGenericsExt.from_out;
								labels_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								labels_tmp.attachement_out = getWsGenericsExt.attachement_out;
								labels = labels_tmp;
							} // closing filter/reject

							// # Output table : 'bl_odoo_report'
							// # Filter conditions
							if (

							"bl_odoo_report"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								bl_odoo_report_tmp.title = getWsGenericsExt.title;
								bl_odoo_report_tmp.sendUrl = getWsGenericsExt.sendUrl;
								bl_odoo_report_tmp.fromUrl = getWsGenericsExt.fromUrl;
								bl_odoo_report_tmp.sendedDate = getWsGenericsExt.sendedDate;
								bl_odoo_report_tmp.attachement = getWsGenericsExt.attachement;
								bl_odoo_report_tmp.station = getWsGenericsExt.station;
								bl_odoo_report_tmp.title_out = getWsGenericsExt.title_out;
								bl_odoo_report_tmp.send_out = getWsGenericsExt.send_out;
								bl_odoo_report_tmp.from_out = getWsGenericsExt.from_out;
								bl_odoo_report_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								bl_odoo_report_tmp.attachement_out = getWsGenericsExt.attachement_out;
								bl_odoo_report = bl_odoo_report_tmp;
							} // closing filter/reject

							// # Output table : 'job'
							// # Filter conditions
							if (

							"job".equals(((java.util.Map) getWsGenericsExt.attachement)
									.get("model"))

							) {
								job_tmp.title = getWsGenericsExt.title;
								job_tmp.sendUrl = getWsGenericsExt.sendUrl;
								job_tmp.fromUrl = getWsGenericsExt.fromUrl;
								job_tmp.sendedDate = getWsGenericsExt.sendedDate;
								job_tmp.attachement = getWsGenericsExt.attachement;
								job_tmp.station = getWsGenericsExt.station;
								job_tmp.title_out = getWsGenericsExt.title_out;
								job_tmp.send_out = getWsGenericsExt.send_out;
								job_tmp.from_out = getWsGenericsExt.from_out;
								job_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								job_tmp.attachement_out = getWsGenericsExt.attachement_out;
								job = job_tmp;
							} // closing filter/reject

							// # Output table : 'folder'
							// # Filter conditions
							if (

							"folder".equals(((java.util.Map) getWsGenericsExt.attachement)
									.get("model"))

							) {
								folder_tmp.title = getWsGenericsExt.title;
								folder_tmp.sendUrl = getWsGenericsExt.sendUrl;
								folder_tmp.fromUrl = getWsGenericsExt.fromUrl;
								folder_tmp.sendedDate = getWsGenericsExt.sendedDate;
								folder_tmp.attachement = getWsGenericsExt.attachement;
								folder_tmp.station = getWsGenericsExt.station;
								folder_tmp.title_out = getWsGenericsExt.title_out;
								folder_tmp.send_out = getWsGenericsExt.send_out;
								folder_tmp.from_out = getWsGenericsExt.from_out;
								folder_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								folder_tmp.attachement_out = getWsGenericsExt.attachement_out;
								folder = folder_tmp;
							} // closing filter/reject

							// # Output table : 'odoo_dt'
							// # Filter conditions
							if (

							"odoo_dt"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								odoo_dt_tmp.title = getWsGenericsExt.title;
								odoo_dt_tmp.sendUrl = getWsGenericsExt.sendUrl;
								odoo_dt_tmp.fromUrl = getWsGenericsExt.fromUrl;
								odoo_dt_tmp.attachement = getWsGenericsExt.attachement;
								odoo_dt_tmp.station = getWsGenericsExt.station;
								odoo_dt_tmp.title_out = getWsGenericsExt.title_out;
								odoo_dt_tmp.send_out = getWsGenericsExt.send_out;
								odoo_dt_tmp.from_out = getWsGenericsExt.from_out;
								odoo_dt_tmp.attachement_out = null;
								odoo_dt_tmp.sendedDate = getWsGenericsExt.sendedDate;
								odoo_dt_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								odoo_dt = odoo_dt_tmp;
							} // closing filter/reject

							// # Output table : 'mrp_production'
							// # Filter conditions
							if (

							"mrp_production"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								mrp_production_tmp.title = getWsGenericsExt.title;
								mrp_production_tmp.sendUrl = getWsGenericsExt.sendUrl;
								mrp_production_tmp.fromUrl = getWsGenericsExt.fromUrl;
								mrp_production_tmp.sendedDate = getWsGenericsExt.sendedDate;
								mrp_production_tmp.attachement = getWsGenericsExt.attachement;
								mrp_production_tmp.station = getWsGenericsExt.station;
								mrp_production_tmp.title_out = getWsGenericsExt.title_out;
								mrp_production_tmp.send_out = getWsGenericsExt.send_out;
								mrp_production_tmp.from_out = getWsGenericsExt.from_out;
								mrp_production_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								mrp_production_tmp.attachement_out = getWsGenericsExt.attachement_out;
								mrp_production = mrp_production_tmp;
							} // closing filter/reject

							// # Output table : 'odoo_products'
							// # Filter conditions
							if (

							"mrp_production"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								odoo_products_tmp.title = getWsGenericsExt.title;
								odoo_products_tmp.sendUrl = getWsGenericsExt.sendUrl;
								odoo_products_tmp.fromUrl = getWsGenericsExt.fromUrl;
								odoo_products_tmp.attachement = getWsGenericsExt.attachement;
								odoo_products_tmp.station = getWsGenericsExt.station;
								odoo_products_tmp.title_out = getWsGenericsExt.title_out;
								odoo_products_tmp.send_out = getWsGenericsExt.send_out;
								odoo_products_tmp.from_out = getWsGenericsExt.from_out;
								odoo_products_tmp.attachement_out = getWsGenericsExt.attachement_out;
								odoo_products_tmp.sendedDate = getWsGenericsExt.sendedDate;
								odoo_products_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								odoo_products = odoo_products_tmp;
							} // closing filter/reject

							// # Output table : 'persoin'
							// # Filter conditions
							if (

							"persoin"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								persoin_tmp.title = getWsGenericsExt.title;
								persoin_tmp.sendUrl = getWsGenericsExt.sendUrl;
								persoin_tmp.fromUrl = getWsGenericsExt.fromUrl;
								persoin_tmp.sendedDate = getWsGenericsExt.sendedDate;
								persoin_tmp.attachement = getWsGenericsExt.attachement;
								persoin_tmp.station = getWsGenericsExt.station;
								persoin_tmp.title_out = getWsGenericsExt.title_out;
								persoin_tmp.send_out = getWsGenericsExt.send_out;
								persoin_tmp.from_out = getWsGenericsExt.from_out;
								persoin_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								persoin_tmp.attachement_out = getWsGenericsExt.attachement_out;
								persoin_tmp.station_out = getWsGenericsExt.station_out;
								persoin = persoin_tmp;
							} // closing filter/reject

							// # Output table : 'persoout'
							// # Filter conditions
							if (

							"persoout"
									.equals(((java.util.Map) getWsGenericsExt.attachement)
											.get("model"))

							) {
								persoout_tmp.title = getWsGenericsExt.title;
								persoout_tmp.sendUrl = getWsGenericsExt.sendUrl;
								persoout_tmp.fromUrl = getWsGenericsExt.fromUrl;
								persoout_tmp.sendedDate = getWsGenericsExt.sendedDate;
								persoout_tmp.attachement = getWsGenericsExt.attachement;
								persoout_tmp.station = getWsGenericsExt.station;
								persoout_tmp.title_out = getWsGenericsExt.title_out;
								persoout_tmp.send_out = getWsGenericsExt.send_out;
								persoout_tmp.from_out = getWsGenericsExt.from_out;
								persoout_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								persoout_tmp.attachement_out = getWsGenericsExt.attachement_out;
								persoout_tmp.station_out = getWsGenericsExt.station_out;
								persoout = persoout_tmp;
							} // closing filter/reject

							// # Output table : 'groups'
							// # Filter conditions
							if (

							"groups".equals(((java.util.Map) getWsGenericsExt.attachement)
									.get("model"))

							) {
								groups_tmp.title = getWsGenericsExt.title;
								groups_tmp.sendUrl = getWsGenericsExt.sendUrl;
								groups_tmp.fromUrl = getWsGenericsExt.fromUrl;
								groups_tmp.sendedDate = getWsGenericsExt.sendedDate;
								groups_tmp.attachement = getWsGenericsExt.attachement;
								groups_tmp.station = getWsGenericsExt.station;
								groups_tmp.title_out = getWsGenericsExt.title_out;
								groups_tmp.send_out = getWsGenericsExt.send_out;
								groups_tmp.from_out = getWsGenericsExt.from_out;
								groups_tmp.sendedDate_out = getWsGenericsExt.sendedDate_out;
								groups_tmp.attachement_out = getWsGenericsExt.attachement_out;
								groups_tmp.station_out = getWsGenericsExt.station_out;
								groups = groups_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "mrp_production_product_line"
						if (mrp_production_product_line != null) {

							/**
							 * [tXMLRPCOpenDAS_17 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_17";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_17 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_17 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_17 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_17);
							}

							consoleOut_tXMLRPCOpenDAS_17
									.println("tXMLRPCOpenDAS_17"
											+ " received parameters : "
											+ mrp_production_product_line
													.toString());
							consoleOut_tXMLRPCOpenDAS_17.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_17 = mrp_production_product_line.title;
							String sendUrl_tXMLRPCOpenDAS_17 = mrp_production_product_line.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_17 = mrp_production_product_line.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_17 = mrp_production_product_line.sendedDate;
							String station_tXMLRPCOpenDAS_17 = mrp_production_product_line.station;
							java.util.Map checkingMap = (java.util.Map) mrp_production_product_line.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_17 = null;
							String sendUrl_out_tXMLRPCOpenDAS_17 = null;
							String fromUrl_out_tXMLRPCOpenDAS_17 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_17 = null;
							String station_out_tXMLRPCOpenDAS_17 = null;
							Object attachement_out_tXMLRPCOpenDAS_17 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_17
										.println("tXMLRPCOpenDAS_17"
												+ " Connexion OpenERP_V5 ");
								consoleOut_tXMLRPCOpenDAS_17.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_17 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameOdoo,
										context.usernameOdoo, context.pwdOdoo,
										context.hostOdoo, context.portOdoo);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_17
										.println("tXMLRPCOpenDAS_17"
												+ " XMLRpc : "
												+ "mrp.production.product.line"
												+ " "
												+ "talend_get_mrp_production_product_line");
								consoleOut_tXMLRPCOpenDAS_17.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_17 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_17
										.exec("mrp.production.product.line",
												"talend_get_mrp_production_product_line",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_17 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_17 : "
													+ responsetXMLRPCOpenDAS_17);
									result.setCode(responsetXMLRPCOpenDAS_17
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_17
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_17
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_17
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("parent_id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("parent_id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("parent_id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCodeDependency((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_17 = {
									title_tXMLRPCOpenDAS_17,
									sendUrl_tXMLRPCOpenDAS_17,
									fromUrl_tXMLRPCOpenDAS_17,
									sendedDate_tXMLRPCOpenDAS_17,
									mrp_production_product_line.attachement,
									station_tXMLRPCOpenDAS_17,
									title_out_tXMLRPCOpenDAS_17,
									sendUrl_out_tXMLRPCOpenDAS_17,
									fromUrl_out_tXMLRPCOpenDAS_17,
									sendedDate_out_tXMLRPCOpenDAS_17, result,
									station_out_tXMLRPCOpenDAS_17 };

							for (int i_tXMLRPCOpenDAS_17 = 0; i_tXMLRPCOpenDAS_17 < results_tXMLRPCOpenDAS_17.length; i_tXMLRPCOpenDAS_17++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[0] != null) {
									row13.title = (String) results_tXMLRPCOpenDAS_17[0];

								} else {
									row13.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[1] != null) {
									row13.sendUrl = (String) results_tXMLRPCOpenDAS_17[1];

								} else {
									row13.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[2] != null) {
									row13.fromUrl = (String) results_tXMLRPCOpenDAS_17[2];

								} else {
									row13.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[3] != null) {
									row13.sendedDate = (Date) results_tXMLRPCOpenDAS_17[3];

								} else {
									row13.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[4] != null) {
									row13.attachement = (Object) results_tXMLRPCOpenDAS_17[4];

								} else {
									row13.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[5] != null) {
									row13.station = (String) results_tXMLRPCOpenDAS_17[5];

								} else {
									row13.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[6] != null) {
									row13.title_out = (String) results_tXMLRPCOpenDAS_17[6];

								} else {
									row13.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[7] != null) {
									row13.send_out = (String) results_tXMLRPCOpenDAS_17[7];

								} else {
									row13.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[8] != null) {
									row13.from_out = (String) results_tXMLRPCOpenDAS_17[8];

								} else {
									row13.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[9] != null) {
									row13.attachement_out = (Object) results_tXMLRPCOpenDAS_17[9];

								} else {
									row13.attachement_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_17.length
										&& results_tXMLRPCOpenDAS_17[10] != null) {
									row13.sendedDate_out = (Date) results_tXMLRPCOpenDAS_17[10];

								} else {
									row13.sendedDate_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_17++;

							/**
							 * [tXMLRPCOpenDAS_17 main ] stop
							 */
							// Start of branch "row13"
							if (row13 != null) {

								/**
								 * [tMomObjectOutput_15 main ] start
								 */

								currentComponent = "tMomObjectOutput_15";

								System.out.println("attachement :"
										+ row13.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row13.title);
								previousRequest.setSendUrl(row13.sendUrl);
								previousRequest.setFromUrl(row13.fromUrl);
								previousRequest.setSendedDate(row13.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row13.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row13.title_out);
								response.setSendedDate(row13.sendedDate_out);
								response.setAttachement((java.io.Serializable) row13.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_15 = session_tMomObjectOutput_15
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_15.setObject(response);
								message_tMomObjectOutput_15.setStringProperty(
										"Sujet", row13.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_15 = session_tMomObjectOutput_15
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_15 = session_tMomObjectOutput_15
										.createProducer(des_tMomObjectOutput_15);
								producer_tMomObjectOutput_15
										.send(message_tMomObjectOutput_15);

								tos_count_tMomObjectOutput_15++;

								/**
								 * [tMomObjectOutput_15 main ] stop
								 */

							} // End of branch "row13"

						} // End of branch "mrp_production_product_line"

						// Start of branch "magento_dt"
						if (magento_dt != null) {

							/**
							 * [tXMLRPCOpenDAS_2 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_2";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_2 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_2 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_2 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_2);
							}

							consoleOut_tXMLRPCOpenDAS_2
									.println("tXMLRPCOpenDAS_2"
											+ " received parameters : "
											+ magento_dt.toString());
							consoleOut_tXMLRPCOpenDAS_2.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_2 = magento_dt.title;
							String sendUrl_tXMLRPCOpenDAS_2 = magento_dt.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_2 = magento_dt.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_2 = magento_dt.sendedDate;
							String station_tXMLRPCOpenDAS_2 = magento_dt.station;
							java.util.Map checkingMap = (java.util.Map) magento_dt.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_2 = null;
							String sendUrl_out_tXMLRPCOpenDAS_2 = null;
							String fromUrl_out_tXMLRPCOpenDAS_2 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_2 = null;
							String station_out_tXMLRPCOpenDAS_2 = null;
							Object attachement_out_tXMLRPCOpenDAS_2 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_2
										.println("tXMLRPCOpenDAS_2"
												+ " Connexion Magento ");
								consoleOut_tXMLRPCOpenDAS_2.flush();
								OpenDAS_xmlrpc.Magento_connect connexiontXMLRPCOpenDAS_2 = new OpenDAS_xmlrpc.Magento_connect(
										context.username, context.pwd,
										context.host, context.port);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_2
										.println("tXMLRPCOpenDAS_2"
												+ " XMLRpc : "
												+ "opendas_shipping_order"
												+ " " + "items_can_ship");
								consoleOut_tXMLRPCOpenDAS_2.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_2 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_2
										.exec("opendas_shipping_order",
												"items_can_ship", vals,
												context_search);
								if (responsetXMLRPCOpenDAS_2 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_2 : "
													+ responsetXMLRPCOpenDAS_2);
									result.setCode(responsetXMLRPCOpenDAS_2
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_2
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_2
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_2
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_2 = {
									title_tXMLRPCOpenDAS_2,
									sendUrl_tXMLRPCOpenDAS_2,
									fromUrl_tXMLRPCOpenDAS_2,
									sendedDate_tXMLRPCOpenDAS_2,
									magento_dt.attachement,
									station_tXMLRPCOpenDAS_2,
									title_out_tXMLRPCOpenDAS_2,
									sendUrl_out_tXMLRPCOpenDAS_2,
									fromUrl_out_tXMLRPCOpenDAS_2,
									sendedDate_out_tXMLRPCOpenDAS_2, result,
									station_out_tXMLRPCOpenDAS_2 };

							for (int i_tXMLRPCOpenDAS_2 = 0; i_tXMLRPCOpenDAS_2 < results_tXMLRPCOpenDAS_2.length; i_tXMLRPCOpenDAS_2++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_2.length
										&& results_tXMLRPCOpenDAS_2[0] != null) {
									row16.title = (String) results_tXMLRPCOpenDAS_2[0];

								} else {
									row16.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_2.length
										&& results_tXMLRPCOpenDAS_2[1] != null) {
									row16.sendUrl = (String) results_tXMLRPCOpenDAS_2[1];

								} else {
									row16.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_2.length
										&& results_tXMLRPCOpenDAS_2[2] != null) {
									row16.fromUrl = (String) results_tXMLRPCOpenDAS_2[2];

								} else {
									row16.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_2.length
										&& results_tXMLRPCOpenDAS_2[3] != null) {
									row16.sendedDate = (Date) results_tXMLRPCOpenDAS_2[3];

								} else {
									row16.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_2.length
										&& results_tXMLRPCOpenDAS_2[4] != null) {
									row16.attachement = (Object) results_tXMLRPCOpenDAS_2[4];

								} else {
									row16.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_2.length
										&& results_tXMLRPCOpenDAS_2[5] != null) {
									row16.station = (String) results_tXMLRPCOpenDAS_2[5];

								} else {
									row16.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_2.length
										&& results_tXMLRPCOpenDAS_2[6] != null) {
									row16.title_out = (String) results_tXMLRPCOpenDAS_2[6];

								} else {
									row16.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_2.length
										&& results_tXMLRPCOpenDAS_2[7] != null) {
									row16.send_out = (String) results_tXMLRPCOpenDAS_2[7];

								} else {
									row16.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_2.length
										&& results_tXMLRPCOpenDAS_2[8] != null) {
									row16.from_out = (String) results_tXMLRPCOpenDAS_2[8];

								} else {
									row16.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_2.length
										&& results_tXMLRPCOpenDAS_2[9] != null) {
									row16.sendedDate_out = (Date) results_tXMLRPCOpenDAS_2[9];

								} else {
									row16.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_2.length
										&& results_tXMLRPCOpenDAS_2[10] != null) {
									row16.attachement_out = (Object) results_tXMLRPCOpenDAS_2[10];

								} else {
									row16.attachement_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_2++;

							/**
							 * [tXMLRPCOpenDAS_2 main ] stop
							 */
							// Start of branch "row16"
							if (row16 != null) {

								/**
								 * [tMomObjectOutput_2 main ] start
								 */

								currentComponent = "tMomObjectOutput_2";

								System.out.println("attachement :"
										+ row16.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row16.title);
								previousRequest.setSendUrl(row16.sendUrl);
								previousRequest.setFromUrl(row16.fromUrl);
								previousRequest.setSendedDate(row16.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row16.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row16.title_out);
								response.setSendedDate(row16.sendedDate_out);
								response.setAttachement((java.io.Serializable) row16.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_2 = session_tMomObjectOutput_2
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_2.setObject(response);
								message_tMomObjectOutput_2.setStringProperty(
										"Sujet", row16.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_2 = session_tMomObjectOutput_2
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_2 = session_tMomObjectOutput_2
										.createProducer(des_tMomObjectOutput_2);
								producer_tMomObjectOutput_2
										.send(message_tMomObjectOutput_2);

								tos_count_tMomObjectOutput_2++;

								/**
								 * [tMomObjectOutput_2 main ] stop
								 */

							} // End of branch "row16"

						} // End of branch "magento_dt"

						// Start of branch "odoo_parcels"
						if (odoo_parcels != null) {

							/**
							 * [tXMLRPCOpenDAS_6 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_6";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_6 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_6 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_6 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_6);
							}

							consoleOut_tXMLRPCOpenDAS_6
									.println("tXMLRPCOpenDAS_6"
											+ " received parameters : "
											+ odoo_parcels.toString());
							consoleOut_tXMLRPCOpenDAS_6.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_6 = odoo_parcels.title;
							String sendUrl_tXMLRPCOpenDAS_6 = odoo_parcels.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_6 = odoo_parcels.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_6 = odoo_parcels.sendedDate;
							String station_tXMLRPCOpenDAS_6 = odoo_parcels.station;
							java.util.Map checkingMap = (java.util.Map) odoo_parcels.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
								if ("produits_odoo".equals(tab[i])) {
									vals.put("product_id",
											checkingMap.get(tab[i]));
								}
								if ("bl_odoo".equals(tab[i])) {
									vals.put("id", checkingMap.get(tab[i]));
								}
								if ("colis_odoo".equals(tab[i])) {
									vals.put("packaging_ids",
											checkingMap.get(tab[i]));
								}
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_6 = null;
							String sendUrl_out_tXMLRPCOpenDAS_6 = null;
							String fromUrl_out_tXMLRPCOpenDAS_6 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_6 = null;
							String station_out_tXMLRPCOpenDAS_6 = null;
							Object attachement_out_tXMLRPCOpenDAS_6 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_6
										.println("tXMLRPCOpenDAS_6"
												+ " Connexion OpenERP_V5 ");
								consoleOut_tXMLRPCOpenDAS_6.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_6 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameOdoo,
										context.usernameOdoo, context.pwdOdoo,
										context.hostOdoo, context.portOdoo);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								context_search_tmp.add(new Object[] { "state",
										"=", "follow" });

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_6
										.println("tXMLRPCOpenDAS_6"
												+ " XMLRpc : "
												+ "stock.picking"
												+ " "
												+ "talend_get_packaging_by_product");
								consoleOut_tXMLRPCOpenDAS_6.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_6 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_6
										.exec("stock.picking",
												"talend_get_packaging_by_product",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_6 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_6 : "
													+ responsetXMLRPCOpenDAS_6);
									result.setCode(responsetXMLRPCOpenDAS_6
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_6
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_6
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_6
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_6 = {
									title_tXMLRPCOpenDAS_6,
									sendUrl_tXMLRPCOpenDAS_6,
									fromUrl_tXMLRPCOpenDAS_6,
									sendedDate_tXMLRPCOpenDAS_6,
									odoo_parcels.attachement,
									station_tXMLRPCOpenDAS_6,
									title_out_tXMLRPCOpenDAS_6,
									sendUrl_out_tXMLRPCOpenDAS_6,
									fromUrl_out_tXMLRPCOpenDAS_6,
									sendedDate_out_tXMLRPCOpenDAS_6, result,
									station_out_tXMLRPCOpenDAS_6 };

							for (int i_tXMLRPCOpenDAS_6 = 0; i_tXMLRPCOpenDAS_6 < results_tXMLRPCOpenDAS_6.length; i_tXMLRPCOpenDAS_6++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[0] != null) {
									row4.title = (String) results_tXMLRPCOpenDAS_6[0];

								} else {
									row4.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[1] != null) {
									row4.sendUrl = (String) results_tXMLRPCOpenDAS_6[1];

								} else {
									row4.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[2] != null) {
									row4.fromUrl = (String) results_tXMLRPCOpenDAS_6[2];

								} else {
									row4.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[3] != null) {
									row4.sendedDate = (Date) results_tXMLRPCOpenDAS_6[3];

								} else {
									row4.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[4] != null) {
									row4.attachement = (Object) results_tXMLRPCOpenDAS_6[4];

								} else {
									row4.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[5] != null) {
									row4.station = (String) results_tXMLRPCOpenDAS_6[5];

								} else {
									row4.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[6] != null) {
									row4.title_out = (String) results_tXMLRPCOpenDAS_6[6];

								} else {
									row4.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[7] != null) {
									row4.send_out = (String) results_tXMLRPCOpenDAS_6[7];

								} else {
									row4.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[8] != null) {
									row4.from_out = (String) results_tXMLRPCOpenDAS_6[8];

								} else {
									row4.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[9] != null) {
									row4.sendedDate_out = (Date) results_tXMLRPCOpenDAS_6[9];

								} else {
									row4.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_6.length
										&& results_tXMLRPCOpenDAS_6[10] != null) {
									row4.attachement_out = (Object) results_tXMLRPCOpenDAS_6[10];

								} else {
									row4.attachement_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_6++;

							/**
							 * [tXMLRPCOpenDAS_6 main ] stop
							 */
							// Start of branch "row4"
							if (row4 != null) {

								/**
								 * [tMomObjectOutput_4 main ] start
								 */

								currentComponent = "tMomObjectOutput_4";

								System.out.println("attachement :"
										+ row4.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row4.title);
								previousRequest.setSendUrl(row4.sendUrl);
								previousRequest.setFromUrl(row4.fromUrl);
								previousRequest.setSendedDate(row4.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row4.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row4.title_out);
								response.setSendedDate(row4.sendedDate_out);
								response.setAttachement((java.io.Serializable) row4.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_4 = session_tMomObjectOutput_4
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_4.setObject(response);
								message_tMomObjectOutput_4.setStringProperty(
										"Sujet", row4.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_4 = session_tMomObjectOutput_4
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_4 = session_tMomObjectOutput_4
										.createProducer(des_tMomObjectOutput_4);
								producer_tMomObjectOutput_4
										.send(message_tMomObjectOutput_4);

								tos_count_tMomObjectOutput_4++;

								/**
								 * [tMomObjectOutput_4 main ] stop
								 */

							} // End of branch "row4"

						} // End of branch "odoo_parcels"

						// Start of branch "perso"
						if (perso != null) {

							/**
							 * [tXMLRPCOpenDAS_8 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_8";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_8 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_8 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_8 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_8);
							}

							consoleOut_tXMLRPCOpenDAS_8
									.println("tXMLRPCOpenDAS_8"
											+ " received parameters : "
											+ perso.toString());
							consoleOut_tXMLRPCOpenDAS_8.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_8 = perso.title;
							String sendUrl_tXMLRPCOpenDAS_8 = perso.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_8 = perso.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_8 = perso.sendedDate;
							String station_tXMLRPCOpenDAS_8 = perso.station;
							java.util.Map checkingMap = (java.util.Map) perso.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_8 = null;
							String sendUrl_out_tXMLRPCOpenDAS_8 = null;
							String fromUrl_out_tXMLRPCOpenDAS_8 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_8 = null;
							String station_out_tXMLRPCOpenDAS_8 = null;
							Object attachement_out_tXMLRPCOpenDAS_8 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_8
										.println("tXMLRPCOpenDAS_8"
												+ " Connexion OpenERP_V5 ");
								consoleOut_tXMLRPCOpenDAS_8.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_8 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameOdoo,
										context.usernameOdoo, context.pwdOdoo,
										context.hostOdoo, context.portOdoo);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_8
										.println("tXMLRPCOpenDAS_8"
												+ " XMLRpc : " + "hr.employee"
												+ " "
												+ "talend_get_employee_barre");
								consoleOut_tXMLRPCOpenDAS_8.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_8 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_8
										.exec("hr.employee",
												"talend_get_employee_barre",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_8 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_8 : "
													+ responsetXMLRPCOpenDAS_8);
									result.setCode(responsetXMLRPCOpenDAS_8
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_8
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_8
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_8
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_8 = {
									title_tXMLRPCOpenDAS_8,
									sendUrl_tXMLRPCOpenDAS_8,
									fromUrl_tXMLRPCOpenDAS_8,
									sendedDate_tXMLRPCOpenDAS_8,
									perso.attachement,
									station_tXMLRPCOpenDAS_8,
									title_out_tXMLRPCOpenDAS_8,
									sendUrl_out_tXMLRPCOpenDAS_8,
									fromUrl_out_tXMLRPCOpenDAS_8,
									sendedDate_out_tXMLRPCOpenDAS_8, result,
									station_out_tXMLRPCOpenDAS_8 };

							for (int i_tXMLRPCOpenDAS_8 = 0; i_tXMLRPCOpenDAS_8 < results_tXMLRPCOpenDAS_8.length; i_tXMLRPCOpenDAS_8++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[0] != null) {
									row5.title = (String) results_tXMLRPCOpenDAS_8[0];

								} else {
									row5.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[1] != null) {
									row5.sendUrl = (String) results_tXMLRPCOpenDAS_8[1];

								} else {
									row5.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[2] != null) {
									row5.fromUrl = (String) results_tXMLRPCOpenDAS_8[2];

								} else {
									row5.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[3] != null) {
									row5.sendedDate = (Date) results_tXMLRPCOpenDAS_8[3];

								} else {
									row5.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[4] != null) {
									row5.attachement = (Object) results_tXMLRPCOpenDAS_8[4];

								} else {
									row5.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[5] != null) {
									row5.station = (String) results_tXMLRPCOpenDAS_8[5];

								} else {
									row5.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[6] != null) {
									row5.title_out = (String) results_tXMLRPCOpenDAS_8[6];

								} else {
									row5.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[7] != null) {
									row5.send_out = (String) results_tXMLRPCOpenDAS_8[7];

								} else {
									row5.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[8] != null) {
									row5.from_out = (String) results_tXMLRPCOpenDAS_8[8];

								} else {
									row5.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[9] != null) {
									row5.sendedDate_out = (Date) results_tXMLRPCOpenDAS_8[9];

								} else {
									row5.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_8.length
										&& results_tXMLRPCOpenDAS_8[10] != null) {
									row5.attachement_out = (Object) results_tXMLRPCOpenDAS_8[10];

								} else {
									row5.attachement_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_8++;

							/**
							 * [tXMLRPCOpenDAS_8 main ] stop
							 */
							// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tMomObjectOutput_5 main ] start
								 */

								currentComponent = "tMomObjectOutput_5";

								System.out.println("attachement :"
										+ row5.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row5.title);
								previousRequest.setSendUrl(row5.sendUrl);
								previousRequest.setFromUrl(row5.fromUrl);
								previousRequest.setSendedDate(row5.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row5.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row5.title_out);
								response.setSendedDate(row5.sendedDate_out);
								response.setAttachement((java.io.Serializable) row5.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_5 = session_tMomObjectOutput_5
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_5.setObject(response);
								message_tMomObjectOutput_5.setStringProperty(
										"Sujet", row5.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_5 = session_tMomObjectOutput_5
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_5 = session_tMomObjectOutput_5
										.createProducer(des_tMomObjectOutput_5);
								producer_tMomObjectOutput_5
										.send(message_tMomObjectOutput_5);

								tos_count_tMomObjectOutput_5++;

								/**
								 * [tMomObjectOutput_5 main ] stop
								 */

							} // End of branch "row5"

						} // End of branch "perso"

						// Start of branch "labels"
						if (labels != null) {

							/**
							 * [tXMLRPCOpenDAS_9 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_9";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_9 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_9 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_9 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_9);
							}

							consoleOut_tXMLRPCOpenDAS_9
									.println("tXMLRPCOpenDAS_9"
											+ " received parameters : "
											+ labels.toString());
							consoleOut_tXMLRPCOpenDAS_9.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_9 = labels.title;
							String sendUrl_tXMLRPCOpenDAS_9 = labels.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_9 = labels.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_9 = labels.sendedDate;
							String station_tXMLRPCOpenDAS_9 = labels.station;
							java.util.Map checkingMap = (java.util.Map) labels.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_9 = null;
							String sendUrl_out_tXMLRPCOpenDAS_9 = null;
							String fromUrl_out_tXMLRPCOpenDAS_9 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_9 = null;
							String station_out_tXMLRPCOpenDAS_9 = null;
							Object attachement_out_tXMLRPCOpenDAS_9 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_9
										.println("tXMLRPCOpenDAS_9"
												+ " Connexion OpenERP_V5 ");
								consoleOut_tXMLRPCOpenDAS_9.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_9 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameOdoo,
										context.usernameOdoo, context.pwdOdoo,
										context.hostOdoo, context.portOdoo);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_9
										.println("tXMLRPCOpenDAS_9"
												+ " XMLRpc : "
												+ "stock.move.packaging"
												+ " "
												+ "talend_get_employee_in_workcenter_barre");
								consoleOut_tXMLRPCOpenDAS_9.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_9 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_9
										.exec("stock.move.packaging",
												"talend_get_employee_in_workcenter_barre",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_9 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_9 : "
													+ responsetXMLRPCOpenDAS_9);
									result.setCode(responsetXMLRPCOpenDAS_9
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_9
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_9
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_9
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_9 = {
									title_tXMLRPCOpenDAS_9,
									sendUrl_tXMLRPCOpenDAS_9,
									fromUrl_tXMLRPCOpenDAS_9,
									sendedDate_tXMLRPCOpenDAS_9,
									labels.attachement,
									station_tXMLRPCOpenDAS_9,
									title_out_tXMLRPCOpenDAS_9,
									sendUrl_out_tXMLRPCOpenDAS_9,
									fromUrl_out_tXMLRPCOpenDAS_9,
									sendedDate_out_tXMLRPCOpenDAS_9, result,
									station_out_tXMLRPCOpenDAS_9 };

							for (int i_tXMLRPCOpenDAS_9 = 0; i_tXMLRPCOpenDAS_9 < results_tXMLRPCOpenDAS_9.length; i_tXMLRPCOpenDAS_9++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[0] != null) {
									row6.title = (String) results_tXMLRPCOpenDAS_9[0];

								} else {
									row6.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[1] != null) {
									row6.sendUrl = (String) results_tXMLRPCOpenDAS_9[1];

								} else {
									row6.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[2] != null) {
									row6.fromUrl = (String) results_tXMLRPCOpenDAS_9[2];

								} else {
									row6.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[3] != null) {
									row6.sendedDate = (Date) results_tXMLRPCOpenDAS_9[3];

								} else {
									row6.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[4] != null) {
									row6.attachement = (Object) results_tXMLRPCOpenDAS_9[4];

								} else {
									row6.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[5] != null) {
									row6.station = (String) results_tXMLRPCOpenDAS_9[5];

								} else {
									row6.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[6] != null) {
									row6.title_out = (String) results_tXMLRPCOpenDAS_9[6];

								} else {
									row6.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[7] != null) {
									row6.send_out = (String) results_tXMLRPCOpenDAS_9[7];

								} else {
									row6.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[8] != null) {
									row6.from_out = (String) results_tXMLRPCOpenDAS_9[8];

								} else {
									row6.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[9] != null) {
									row6.sendedDate_out = (Date) results_tXMLRPCOpenDAS_9[9];

								} else {
									row6.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_9.length
										&& results_tXMLRPCOpenDAS_9[10] != null) {
									row6.attachement_out = (Object) results_tXMLRPCOpenDAS_9[10];

								} else {
									row6.attachement_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_9++;

							/**
							 * [tXMLRPCOpenDAS_9 main ] stop
							 */
							// Start of branch "row6"
							if (row6 != null) {

								/**
								 * [tMomObjectOutput_6 main ] start
								 */

								currentComponent = "tMomObjectOutput_6";

								System.out.println("attachement :"
										+ row6.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row6.title);
								previousRequest.setSendUrl(row6.sendUrl);
								previousRequest.setFromUrl(row6.fromUrl);
								previousRequest.setSendedDate(row6.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row6.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row6.title_out);
								response.setSendedDate(row6.sendedDate_out);
								response.setAttachement((java.io.Serializable) row6.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_6 = session_tMomObjectOutput_6
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_6.setObject(response);
								message_tMomObjectOutput_6.setStringProperty(
										"Sujet", row6.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_6 = session_tMomObjectOutput_6
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_6 = session_tMomObjectOutput_6
										.createProducer(des_tMomObjectOutput_6);
								producer_tMomObjectOutput_6
										.send(message_tMomObjectOutput_6);

								tos_count_tMomObjectOutput_6++;

								/**
								 * [tMomObjectOutput_6 main ] stop
								 */

							} // End of branch "row6"

						} // End of branch "labels"

						// Start of branch "bl_odoo_report"
						if (bl_odoo_report != null) {

							/**
							 * [tXMLRPCOpenDAS_12 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_12";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_12 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_12 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_12 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_12);
							}

							consoleOut_tXMLRPCOpenDAS_12
									.println("tXMLRPCOpenDAS_12"
											+ " received parameters : "
											+ bl_odoo_report.toString());
							consoleOut_tXMLRPCOpenDAS_12.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_12 = bl_odoo_report.title;
							String sendUrl_tXMLRPCOpenDAS_12 = bl_odoo_report.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_12 = bl_odoo_report.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_12 = bl_odoo_report.sendedDate;
							String station_tXMLRPCOpenDAS_12 = bl_odoo_report.station;
							java.util.Map checkingMap = (java.util.Map) bl_odoo_report.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
								if ("bl_asperpgi".equals(tab[i])) {
									vals.put("picking", checkingMap.get(tab[i]));
								}
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_12 = null;
							String sendUrl_out_tXMLRPCOpenDAS_12 = null;
							String fromUrl_out_tXMLRPCOpenDAS_12 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_12 = null;
							String station_out_tXMLRPCOpenDAS_12 = null;
							Object attachement_out_tXMLRPCOpenDAS_12 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_12
										.println("tXMLRPCOpenDAS_12"
												+ " Connexion OpenERP_V5 ");
								consoleOut_tXMLRPCOpenDAS_12.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_12 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameOdoo,
										context.usernameOdoo, context.pwdOdoo,
										context.hostOdoo, context.portOdoo);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_12
										.println("tXMLRPCOpenDAS_12"
												+ " XMLRpc : "
												+ "stock.picking"
												+ " "
												+ "talend_get_report_by_picking");
								consoleOut_tXMLRPCOpenDAS_12.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_12 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_12
										.exec("stock.picking",
												"talend_get_report_by_picking",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_12 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_12 : "
													+ responsetXMLRPCOpenDAS_12);
									result.setCode(responsetXMLRPCOpenDAS_12
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_12
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_12
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_12
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_12 = {
									title_tXMLRPCOpenDAS_12,
									sendUrl_tXMLRPCOpenDAS_12,
									fromUrl_tXMLRPCOpenDAS_12,
									sendedDate_tXMLRPCOpenDAS_12,
									bl_odoo_report.attachement,
									station_tXMLRPCOpenDAS_12,
									title_out_tXMLRPCOpenDAS_12,
									sendUrl_out_tXMLRPCOpenDAS_12,
									fromUrl_out_tXMLRPCOpenDAS_12,
									sendedDate_out_tXMLRPCOpenDAS_12, result,
									station_out_tXMLRPCOpenDAS_12 };

							for (int i_tXMLRPCOpenDAS_12 = 0; i_tXMLRPCOpenDAS_12 < results_tXMLRPCOpenDAS_12.length; i_tXMLRPCOpenDAS_12++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[0] != null) {
									row9.title = (String) results_tXMLRPCOpenDAS_12[0];

								} else {
									row9.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[1] != null) {
									row9.sendUrl = (String) results_tXMLRPCOpenDAS_12[1];

								} else {
									row9.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[2] != null) {
									row9.fromUrl = (String) results_tXMLRPCOpenDAS_12[2];

								} else {
									row9.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[3] != null) {
									row9.sendedDate = (Date) results_tXMLRPCOpenDAS_12[3];

								} else {
									row9.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[4] != null) {
									row9.attachement = (Object) results_tXMLRPCOpenDAS_12[4];

								} else {
									row9.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[5] != null) {
									row9.station = (String) results_tXMLRPCOpenDAS_12[5];

								} else {
									row9.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[6] != null) {
									row9.title_out = (String) results_tXMLRPCOpenDAS_12[6];

								} else {
									row9.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[7] != null) {
									row9.send_out = (String) results_tXMLRPCOpenDAS_12[7];

								} else {
									row9.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[8] != null) {
									row9.from_out = (String) results_tXMLRPCOpenDAS_12[8];

								} else {
									row9.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[9] != null) {
									row9.sendedDate_out = (Date) results_tXMLRPCOpenDAS_12[9];

								} else {
									row9.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_12.length
										&& results_tXMLRPCOpenDAS_12[10] != null) {
									row9.attachement_out = (Object) results_tXMLRPCOpenDAS_12[10];

								} else {
									row9.attachement_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_12++;

							/**
							 * [tXMLRPCOpenDAS_12 main ] stop
							 */
							// Start of branch "row9"
							if (row9 != null) {

								/**
								 * [tMomObjectOutput_9 main ] start
								 */

								currentComponent = "tMomObjectOutput_9";

								System.out.println("attachement :"
										+ row9.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row9.title);
								previousRequest.setSendUrl(row9.sendUrl);
								previousRequest.setFromUrl(row9.fromUrl);
								previousRequest.setSendedDate(row9.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row9.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row9.title_out);
								response.setSendedDate(row9.sendedDate_out);
								response.setAttachement((java.io.Serializable) row9.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_9 = session_tMomObjectOutput_9
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_9.setObject(response);
								message_tMomObjectOutput_9.setStringProperty(
										"Sujet", row9.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_9 = session_tMomObjectOutput_9
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_9 = session_tMomObjectOutput_9
										.createProducer(des_tMomObjectOutput_9);
								producer_tMomObjectOutput_9
										.send(message_tMomObjectOutput_9);

								tos_count_tMomObjectOutput_9++;

								/**
								 * [tMomObjectOutput_9 main ] stop
								 */

							} // End of branch "row9"

						} // End of branch "bl_odoo_report"

						// Start of branch "job"
						if (job != null) {

							/**
							 * [tXMLRPCOpenDAS_14 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_14";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_14 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_14 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_14 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_14);
							}

							consoleOut_tXMLRPCOpenDAS_14
									.println("tXMLRPCOpenDAS_14"
											+ " received parameters : "
											+ job.toString());
							consoleOut_tXMLRPCOpenDAS_14.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_14 = job.title;
							String sendUrl_tXMLRPCOpenDAS_14 = job.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_14 = job.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_14 = job.sendedDate;
							String station_tXMLRPCOpenDAS_14 = job.station;
							java.util.Map checkingMap = (java.util.Map) job.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_14 = null;
							String sendUrl_out_tXMLRPCOpenDAS_14 = null;
							String fromUrl_out_tXMLRPCOpenDAS_14 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_14 = null;
							String station_out_tXMLRPCOpenDAS_14 = null;
							Object attachement_out_tXMLRPCOpenDAS_14 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_14
										.println("tXMLRPCOpenDAS_14"
												+ " Connexion OpenERP_V5 ");
								consoleOut_tXMLRPCOpenDAS_14.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_14 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameOdoo,
										context.usernameOdoo, context.pwdOdoo,
										context.hostOdoo, context.portOdoo);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_14
										.println("tXMLRPCOpenDAS_14"
												+ " XMLRpc : " + "hr.employee"
												+ " " + "talend_get_workcenter");
								consoleOut_tXMLRPCOpenDAS_14.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_14 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_14
										.exec("hr.employee",
												"talend_get_workcenter", vals,
												context_search);
								if (responsetXMLRPCOpenDAS_14 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_14 : "
													+ responsetXMLRPCOpenDAS_14);
									result.setCode(responsetXMLRPCOpenDAS_14
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_14
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_14
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_14
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_14 = {
									title_tXMLRPCOpenDAS_14,
									sendUrl_tXMLRPCOpenDAS_14,
									fromUrl_tXMLRPCOpenDAS_14,
									sendedDate_tXMLRPCOpenDAS_14,
									job.attachement, station_tXMLRPCOpenDAS_14,
									title_out_tXMLRPCOpenDAS_14,
									sendUrl_out_tXMLRPCOpenDAS_14,
									fromUrl_out_tXMLRPCOpenDAS_14,
									sendedDate_out_tXMLRPCOpenDAS_14, result,
									station_out_tXMLRPCOpenDAS_14 };

							for (int i_tXMLRPCOpenDAS_14 = 0; i_tXMLRPCOpenDAS_14 < results_tXMLRPCOpenDAS_14.length; i_tXMLRPCOpenDAS_14++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[0] != null) {
									row10.title = (String) results_tXMLRPCOpenDAS_14[0];

								} else {
									row10.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[1] != null) {
									row10.sendUrl = (String) results_tXMLRPCOpenDAS_14[1];

								} else {
									row10.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[2] != null) {
									row10.fromUrl = (String) results_tXMLRPCOpenDAS_14[2];

								} else {
									row10.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[3] != null) {
									row10.sendedDate = (Date) results_tXMLRPCOpenDAS_14[3];

								} else {
									row10.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[4] != null) {
									row10.attachement = (Object) results_tXMLRPCOpenDAS_14[4];

								} else {
									row10.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[5] != null) {
									row10.station = (String) results_tXMLRPCOpenDAS_14[5];

								} else {
									row10.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[6] != null) {
									row10.title_out = (String) results_tXMLRPCOpenDAS_14[6];

								} else {
									row10.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[7] != null) {
									row10.send_out = (String) results_tXMLRPCOpenDAS_14[7];

								} else {
									row10.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[8] != null) {
									row10.from_out = (String) results_tXMLRPCOpenDAS_14[8];

								} else {
									row10.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[9] != null) {
									row10.sendedDate_out = (Date) results_tXMLRPCOpenDAS_14[9];

								} else {
									row10.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_14.length
										&& results_tXMLRPCOpenDAS_14[10] != null) {
									row10.attachement_out = (Object) results_tXMLRPCOpenDAS_14[10];

								} else {
									row10.attachement_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_14++;

							/**
							 * [tXMLRPCOpenDAS_14 main ] stop
							 */
							// Start of branch "row10"
							if (row10 != null) {

								/**
								 * [tMomObjectOutput_10 main ] start
								 */

								currentComponent = "tMomObjectOutput_10";

								System.out.println("attachement :"
										+ row10.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row10.title);
								previousRequest.setSendUrl(row10.sendUrl);
								previousRequest.setFromUrl(row10.fromUrl);
								previousRequest.setSendedDate(row10.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row10.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row10.title_out);
								response.setSendedDate(row10.sendedDate_out);
								response.setAttachement((java.io.Serializable) row10.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_10 = session_tMomObjectOutput_10
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_10.setObject(response);
								message_tMomObjectOutput_10.setStringProperty(
										"Sujet", row10.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_10 = session_tMomObjectOutput_10
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_10 = session_tMomObjectOutput_10
										.createProducer(des_tMomObjectOutput_10);
								producer_tMomObjectOutput_10
										.send(message_tMomObjectOutput_10);

								tos_count_tMomObjectOutput_10++;

								/**
								 * [tMomObjectOutput_10 main ] stop
								 */

							} // End of branch "row10"

						} // End of branch "job"

						// Start of branch "folder"
						if (folder != null) {

							/**
							 * [tXMLRPCOpenDAS_15 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_15";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_15 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_15 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_15 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_15);
							}

							consoleOut_tXMLRPCOpenDAS_15
									.println("tXMLRPCOpenDAS_15"
											+ " received parameters : "
											+ folder.toString());
							consoleOut_tXMLRPCOpenDAS_15.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_15 = folder.title;
							String sendUrl_tXMLRPCOpenDAS_15 = folder.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_15 = folder.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_15 = folder.sendedDate;
							String station_tXMLRPCOpenDAS_15 = folder.station;
							java.util.Map checkingMap = (java.util.Map) folder.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
								if ("poste".equals(tab[i])) {
									vals.put("workcenter",
											checkingMap.get(tab[i]));
								}
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_15 = null;
							String sendUrl_out_tXMLRPCOpenDAS_15 = null;
							String fromUrl_out_tXMLRPCOpenDAS_15 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_15 = null;
							String station_out_tXMLRPCOpenDAS_15 = null;
							Object attachement_out_tXMLRPCOpenDAS_15 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_15
										.println("tXMLRPCOpenDAS_15"
												+ " Connexion OpenERP_V5 ");
								consoleOut_tXMLRPCOpenDAS_15.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_15 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameOdoo,
										context.usernameOdoo, context.pwdOdoo,
										context.hostOdoo, context.portOdoo);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_15
										.println("tXMLRPCOpenDAS_15"
												+ " XMLRpc : " + "hr.employee"
												+ " "
												+ "talend_get_workcenter_line");
								consoleOut_tXMLRPCOpenDAS_15.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_15 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_15
										.exec("hr.employee",
												"talend_get_workcenter_line",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_15 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_15 : "
													+ responsetXMLRPCOpenDAS_15);
									result.setCode(responsetXMLRPCOpenDAS_15
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_15
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_15
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_15
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("parent_id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("parent_id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("parent_id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCodeDependency((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_15 = {
									title_tXMLRPCOpenDAS_15,
									sendUrl_tXMLRPCOpenDAS_15,
									fromUrl_tXMLRPCOpenDAS_15,
									sendedDate_tXMLRPCOpenDAS_15,
									folder.attachement,
									station_tXMLRPCOpenDAS_15,
									title_out_tXMLRPCOpenDAS_15,
									sendUrl_out_tXMLRPCOpenDAS_15,
									fromUrl_out_tXMLRPCOpenDAS_15,
									sendedDate_out_tXMLRPCOpenDAS_15, result,
									station_out_tXMLRPCOpenDAS_15 };

							for (int i_tXMLRPCOpenDAS_15 = 0; i_tXMLRPCOpenDAS_15 < results_tXMLRPCOpenDAS_15.length; i_tXMLRPCOpenDAS_15++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[0] != null) {
									row11.title = (String) results_tXMLRPCOpenDAS_15[0];

								} else {
									row11.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[1] != null) {
									row11.sendUrl = (String) results_tXMLRPCOpenDAS_15[1];

								} else {
									row11.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[2] != null) {
									row11.fromUrl = (String) results_tXMLRPCOpenDAS_15[2];

								} else {
									row11.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[3] != null) {
									row11.sendedDate = (Date) results_tXMLRPCOpenDAS_15[3];

								} else {
									row11.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[4] != null) {
									row11.attachement = (Object) results_tXMLRPCOpenDAS_15[4];

								} else {
									row11.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[5] != null) {
									row11.station = (String) results_tXMLRPCOpenDAS_15[5];

								} else {
									row11.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[6] != null) {
									row11.title_out = (String) results_tXMLRPCOpenDAS_15[6];

								} else {
									row11.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[7] != null) {
									row11.send_out = (String) results_tXMLRPCOpenDAS_15[7];

								} else {
									row11.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[8] != null) {
									row11.from_out = (String) results_tXMLRPCOpenDAS_15[8];

								} else {
									row11.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[9] != null) {
									row11.sendedDate_out = (Date) results_tXMLRPCOpenDAS_15[9];

								} else {
									row11.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_15.length
										&& results_tXMLRPCOpenDAS_15[10] != null) {
									row11.attachement_out = (Object) results_tXMLRPCOpenDAS_15[10];

								} else {
									row11.attachement_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_15++;

							/**
							 * [tXMLRPCOpenDAS_15 main ] stop
							 */
							// Start of branch "row11"
							if (row11 != null) {

								/**
								 * [tMomObjectOutput_11 main ] start
								 */

								currentComponent = "tMomObjectOutput_11";

								System.out.println("attachement :"
										+ row11.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row11.title);
								previousRequest.setSendUrl(row11.sendUrl);
								previousRequest.setFromUrl(row11.fromUrl);
								previousRequest.setSendedDate(row11.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row11.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row11.title_out);
								response.setSendedDate(row11.sendedDate_out);
								response.setAttachement((java.io.Serializable) row11.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_11 = session_tMomObjectOutput_11
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_11.setObject(response);
								message_tMomObjectOutput_11.setStringProperty(
										"Sujet", row11.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_11 = session_tMomObjectOutput_11
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_11 = session_tMomObjectOutput_11
										.createProducer(des_tMomObjectOutput_11);
								producer_tMomObjectOutput_11
										.send(message_tMomObjectOutput_11);

								tos_count_tMomObjectOutput_11++;

								/**
								 * [tMomObjectOutput_11 main ] stop
								 */

							} // End of branch "row11"

						} // End of branch "folder"

						// Start of branch "odoo_dt"
						if (odoo_dt != null) {

							/**
							 * [tXMLRPCOpenDAS_4 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_4";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_4 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_4 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_4 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_4);
							}

							consoleOut_tXMLRPCOpenDAS_4
									.println("tXMLRPCOpenDAS_4"
											+ " received parameters : "
											+ odoo_dt.toString());
							consoleOut_tXMLRPCOpenDAS_4.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_4 = odoo_dt.title;
							String sendUrl_tXMLRPCOpenDAS_4 = odoo_dt.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_4 = odoo_dt.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_4 = odoo_dt.sendedDate;
							String station_tXMLRPCOpenDAS_4 = odoo_dt.station;
							java.util.Map checkingMap = (java.util.Map) odoo_dt.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_4 = null;
							String sendUrl_out_tXMLRPCOpenDAS_4 = null;
							String fromUrl_out_tXMLRPCOpenDAS_4 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_4 = null;
							String station_out_tXMLRPCOpenDAS_4 = null;
							Object attachement_out_tXMLRPCOpenDAS_4 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_4
										.println("tXMLRPCOpenDAS_4"
												+ " Connexion OpenERP_V5 ");
								consoleOut_tXMLRPCOpenDAS_4.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_4 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameOdoo,
										context.usernameOdoo, context.pwdOdoo,
										context.hostOdoo, context.portOdoo);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								context_search_tmp.add(new Object[] { "state",
										"=", "follow" });

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_4
										.println("tXMLRPCOpenDAS_4"
												+ " XMLRpc : " + "hr.employee"
												+ " " + "talend_get_picking");
								consoleOut_tXMLRPCOpenDAS_4.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_4 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_4
										.exec("hr.employee",
												"talend_get_picking", vals,
												context_search);
								if (responsetXMLRPCOpenDAS_4 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_4 : "
													+ responsetXMLRPCOpenDAS_4);
									result.setCode(responsetXMLRPCOpenDAS_4
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_4
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_4
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_4
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_4 = {
									title_tXMLRPCOpenDAS_4,
									sendUrl_tXMLRPCOpenDAS_4,
									fromUrl_tXMLRPCOpenDAS_4,
									sendedDate_tXMLRPCOpenDAS_4,
									odoo_dt.attachement,
									station_tXMLRPCOpenDAS_4,
									title_out_tXMLRPCOpenDAS_4,
									sendUrl_out_tXMLRPCOpenDAS_4,
									fromUrl_out_tXMLRPCOpenDAS_4,
									sendedDate_out_tXMLRPCOpenDAS_4, result,
									station_out_tXMLRPCOpenDAS_4 };

							for (int i_tXMLRPCOpenDAS_4 = 0; i_tXMLRPCOpenDAS_4 < results_tXMLRPCOpenDAS_4.length; i_tXMLRPCOpenDAS_4++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[0] != null) {
									row14.title = (String) results_tXMLRPCOpenDAS_4[0];

								} else {
									row14.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[1] != null) {
									row14.sendUrl = (String) results_tXMLRPCOpenDAS_4[1];

								} else {
									row14.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[2] != null) {
									row14.fromUrl = (String) results_tXMLRPCOpenDAS_4[2];

								} else {
									row14.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[3] != null) {
									row14.attachement = (Object) results_tXMLRPCOpenDAS_4[3];

								} else {
									row14.attachement = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[4] != null) {
									row14.station = (String) results_tXMLRPCOpenDAS_4[4];

								} else {
									row14.station = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[5] != null) {
									row14.title_out = (String) results_tXMLRPCOpenDAS_4[5];

								} else {
									row14.title_out = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[6] != null) {
									row14.send_out = (String) results_tXMLRPCOpenDAS_4[6];

								} else {
									row14.send_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[7] != null) {
									row14.from_out = (String) results_tXMLRPCOpenDAS_4[7];

								} else {
									row14.from_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[8] != null) {
									row14.attachement_out = (Object) results_tXMLRPCOpenDAS_4[8];

								} else {
									row14.attachement_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[9] != null) {
									row14.sendedDate = (Date) results_tXMLRPCOpenDAS_4[9];

								} else {
									row14.sendedDate = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_4.length
										&& results_tXMLRPCOpenDAS_4[10] != null) {
									row14.sendedDate_out = (Date) results_tXMLRPCOpenDAS_4[10];

								} else {
									row14.sendedDate_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_4++;

							/**
							 * [tXMLRPCOpenDAS_4 main ] stop
							 */
							// Start of branch "row14"
							if (row14 != null) {

								/**
								 * [tMomObjectOutput_12 main ] start
								 */

								currentComponent = "tMomObjectOutput_12";

								System.out.println("attachement :"
										+ row14.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row14.title);
								previousRequest.setSendUrl(row14.sendUrl);
								previousRequest.setFromUrl(row14.fromUrl);
								previousRequest.setSendedDate(row14.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row14.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row14.title_out);
								response.setSendedDate(row14.sendedDate_out);
								response.setAttachement((java.io.Serializable) row14.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_12 = session_tMomObjectOutput_12
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_12.setObject(response);
								message_tMomObjectOutput_12.setStringProperty(
										"Sujet", row14.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_12 = session_tMomObjectOutput_12
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_12 = session_tMomObjectOutput_12
										.createProducer(des_tMomObjectOutput_12);
								producer_tMomObjectOutput_12
										.send(message_tMomObjectOutput_12);

								tos_count_tMomObjectOutput_12++;

								/**
								 * [tMomObjectOutput_12 main ] stop
								 */

							} // End of branch "row14"

						} // End of branch "odoo_dt"

						// Start of branch "mrp_production"
						if (mrp_production != null) {

							/**
							 * [tXMLRPCOpenDAS_16 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_16";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_16 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_16 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_16 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_16);
							}

							consoleOut_tXMLRPCOpenDAS_16
									.println("tXMLRPCOpenDAS_16"
											+ " received parameters : "
											+ mrp_production.toString());
							consoleOut_tXMLRPCOpenDAS_16.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_16 = mrp_production.title;
							String sendUrl_tXMLRPCOpenDAS_16 = mrp_production.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_16 = mrp_production.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_16 = mrp_production.sendedDate;
							String station_tXMLRPCOpenDAS_16 = mrp_production.station;
							java.util.Map checkingMap = (java.util.Map) mrp_production.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_16 = null;
							String sendUrl_out_tXMLRPCOpenDAS_16 = null;
							String fromUrl_out_tXMLRPCOpenDAS_16 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_16 = null;
							String station_out_tXMLRPCOpenDAS_16 = null;
							Object attachement_out_tXMLRPCOpenDAS_16 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_16
										.println("tXMLRPCOpenDAS_16"
												+ " Connexion OpenERP_V5 ");
								consoleOut_tXMLRPCOpenDAS_16.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_16 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameOdoo,
										context.usernameOdoo, context.pwdOdoo,
										context.hostOdoo, context.portOdoo);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								context_search_tmp.add(new Object[] { "id",
										"<", "3300" });
								context_search_tmp.add(new Object[] { "id",
										">", "3100" });

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_16
										.println("tXMLRPCOpenDAS_16"
												+ " XMLRpc : "
												+ "mrp.production" + " "
												+ "talend_get_mrp_production");
								consoleOut_tXMLRPCOpenDAS_16.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_16 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_16
										.exec("mrp.production",
												"talend_get_mrp_production",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_16 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_16 : "
													+ responsetXMLRPCOpenDAS_16);
									result.setCode(responsetXMLRPCOpenDAS_16
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_16
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_16
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_16
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("parent_id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("parent_id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("parent_id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCodeDependency((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_16 = {
									title_tXMLRPCOpenDAS_16,
									sendUrl_tXMLRPCOpenDAS_16,
									fromUrl_tXMLRPCOpenDAS_16,
									sendedDate_tXMLRPCOpenDAS_16,
									mrp_production.attachement,
									station_tXMLRPCOpenDAS_16,
									title_out_tXMLRPCOpenDAS_16,
									sendUrl_out_tXMLRPCOpenDAS_16,
									fromUrl_out_tXMLRPCOpenDAS_16,
									sendedDate_out_tXMLRPCOpenDAS_16, result,
									station_out_tXMLRPCOpenDAS_16 };

							for (int i_tXMLRPCOpenDAS_16 = 0; i_tXMLRPCOpenDAS_16 < results_tXMLRPCOpenDAS_16.length; i_tXMLRPCOpenDAS_16++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[0] != null) {
									row12.title = (String) results_tXMLRPCOpenDAS_16[0];

								} else {
									row12.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[1] != null) {
									row12.sendUrl = (String) results_tXMLRPCOpenDAS_16[1];

								} else {
									row12.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[2] != null) {
									row12.fromUrl = (String) results_tXMLRPCOpenDAS_16[2];

								} else {
									row12.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[3] != null) {
									row12.sendedDate = (Date) results_tXMLRPCOpenDAS_16[3];

								} else {
									row12.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[4] != null) {
									row12.attachement = (Object) results_tXMLRPCOpenDAS_16[4];

								} else {
									row12.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[5] != null) {
									row12.station = (String) results_tXMLRPCOpenDAS_16[5];

								} else {
									row12.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[6] != null) {
									row12.title_out = (String) results_tXMLRPCOpenDAS_16[6];

								} else {
									row12.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[7] != null) {
									row12.send_out = (String) results_tXMLRPCOpenDAS_16[7];

								} else {
									row12.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[8] != null) {
									row12.from_out = (String) results_tXMLRPCOpenDAS_16[8];

								} else {
									row12.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[9] != null) {
									row12.sendedDate_out = (Date) results_tXMLRPCOpenDAS_16[9];

								} else {
									row12.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_16.length
										&& results_tXMLRPCOpenDAS_16[10] != null) {
									row12.attachement_out = (Object) results_tXMLRPCOpenDAS_16[10];

								} else {
									row12.attachement_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_16++;

							/**
							 * [tXMLRPCOpenDAS_16 main ] stop
							 */
							// Start of branch "row12"
							if (row12 != null) {

								/**
								 * [tMomObjectOutput_14 main ] start
								 */

								currentComponent = "tMomObjectOutput_14";

								System.out.println("attachement :"
										+ row12.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row12.title);
								previousRequest.setSendUrl(row12.sendUrl);
								previousRequest.setFromUrl(row12.fromUrl);
								previousRequest.setSendedDate(row12.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row12.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row12.title_out);
								response.setSendedDate(row12.sendedDate_out);
								response.setAttachement((java.io.Serializable) row12.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_14 = session_tMomObjectOutput_14
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_14.setObject(response);
								message_tMomObjectOutput_14.setStringProperty(
										"Sujet", row12.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_14 = session_tMomObjectOutput_14
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_14 = session_tMomObjectOutput_14
										.createProducer(des_tMomObjectOutput_14);
								producer_tMomObjectOutput_14
										.send(message_tMomObjectOutput_14);

								tos_count_tMomObjectOutput_14++;

								/**
								 * [tMomObjectOutput_14 main ] stop
								 */

							} // End of branch "row12"

						} // End of branch "mrp_production"

						// Start of branch "odoo_products"
						if (odoo_products != null) {

							/**
							 * [tXMLRPCOpenDAS_5 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_5";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_5 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_5 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_5 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_5);
							}

							consoleOut_tXMLRPCOpenDAS_5
									.println("tXMLRPCOpenDAS_5"
											+ " received parameters : "
											+ odoo_products.toString());
							consoleOut_tXMLRPCOpenDAS_5.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_5 = odoo_products.title;
							String sendUrl_tXMLRPCOpenDAS_5 = odoo_products.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_5 = odoo_products.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_5 = odoo_products.sendedDate;
							String station_tXMLRPCOpenDAS_5 = odoo_products.station;
							java.util.Map checkingMap = (java.util.Map) odoo_products.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
								if ("bl_asperpgi".equals(tab[i])) {
									vals.put("picking", checkingMap.get(tab[i]));
								}
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_5 = null;
							String sendUrl_out_tXMLRPCOpenDAS_5 = null;
							String fromUrl_out_tXMLRPCOpenDAS_5 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_5 = null;
							String station_out_tXMLRPCOpenDAS_5 = null;
							Object attachement_out_tXMLRPCOpenDAS_5 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_5
										.println("tXMLRPCOpenDAS_5"
												+ " Connexion OpenERP_V5 ");
								consoleOut_tXMLRPCOpenDAS_5.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_5 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameOdoo,
										context.usernameOdoo, context.pwdOdoo,
										context.hostOdoo, context.portOdoo);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_5
										.println("tXMLRPCOpenDAS_5"
												+ " XMLRpc : "
												+ "stock.picking"
												+ " "
												+ "talend_get_product_by_picking");
								consoleOut_tXMLRPCOpenDAS_5.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_5 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_5
										.exec("stock.picking",
												"talend_get_product_by_picking",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_5 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_5 : "
													+ responsetXMLRPCOpenDAS_5);
									result.setCode(responsetXMLRPCOpenDAS_5
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_5
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_5
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_5
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("Integer".equals("Integer")) {
											if ("Integer".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("qty"));
											} else if ("Integer"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("qty"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("Integer".equals("String")) {
											if ("Integer".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("Integer"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("qty"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setQtyMax((Integer) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("Integer".equals("Integer")) {
											if ("Integer".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("qty"));
											} else if ("Integer"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("qty"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("Integer".equals("String")) {
											if ("Integer".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("Integer"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("qty"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setQtyMin((Integer) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_5 = {
									title_tXMLRPCOpenDAS_5,
									sendUrl_tXMLRPCOpenDAS_5,
									fromUrl_tXMLRPCOpenDAS_5,
									sendedDate_tXMLRPCOpenDAS_5,
									odoo_products.attachement,
									station_tXMLRPCOpenDAS_5,
									title_out_tXMLRPCOpenDAS_5,
									sendUrl_out_tXMLRPCOpenDAS_5,
									fromUrl_out_tXMLRPCOpenDAS_5,
									sendedDate_out_tXMLRPCOpenDAS_5, result,
									station_out_tXMLRPCOpenDAS_5 };

							for (int i_tXMLRPCOpenDAS_5 = 0; i_tXMLRPCOpenDAS_5 < results_tXMLRPCOpenDAS_5.length; i_tXMLRPCOpenDAS_5++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[0] != null) {
									row3.title = (String) results_tXMLRPCOpenDAS_5[0];

								} else {
									row3.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[1] != null) {
									row3.sendUrl = (String) results_tXMLRPCOpenDAS_5[1];

								} else {
									row3.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[2] != null) {
									row3.fromUrl = (String) results_tXMLRPCOpenDAS_5[2];

								} else {
									row3.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[3] != null) {
									row3.attachement = (Object) results_tXMLRPCOpenDAS_5[3];

								} else {
									row3.attachement = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[4] != null) {
									row3.station = (String) results_tXMLRPCOpenDAS_5[4];

								} else {
									row3.station = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[5] != null) {
									row3.title_out = (String) results_tXMLRPCOpenDAS_5[5];

								} else {
									row3.title_out = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[6] != null) {
									row3.send_out = (String) results_tXMLRPCOpenDAS_5[6];

								} else {
									row3.send_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[7] != null) {
									row3.from_out = (String) results_tXMLRPCOpenDAS_5[7];

								} else {
									row3.from_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[8] != null) {
									row3.attachement_out = (Object) results_tXMLRPCOpenDAS_5[8];

								} else {
									row3.attachement_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[9] != null) {
									row3.sendedDate = (Date) results_tXMLRPCOpenDAS_5[9];

								} else {
									row3.sendedDate = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_5.length
										&& results_tXMLRPCOpenDAS_5[10] != null) {
									row3.sendedDate_out = (Date) results_tXMLRPCOpenDAS_5[10];

								} else {
									row3.sendedDate_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_5++;

							/**
							 * [tXMLRPCOpenDAS_5 main ] stop
							 */
							// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tMomObjectOutput_3 main ] start
								 */

								currentComponent = "tMomObjectOutput_3";

								System.out.println("attachement :"
										+ row3.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row3.title);
								previousRequest.setSendUrl(row3.sendUrl);
								previousRequest.setFromUrl(row3.fromUrl);
								previousRequest.setSendedDate(row3.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row3.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row3.title_out);
								response.setSendedDate(row3.sendedDate_out);
								response.setAttachement((java.io.Serializable) row3.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_3 = session_tMomObjectOutput_3
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_3.setObject(response);
								message_tMomObjectOutput_3.setStringProperty(
										"Sujet", row3.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_3 = session_tMomObjectOutput_3
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_3 = session_tMomObjectOutput_3
										.createProducer(des_tMomObjectOutput_3);
								producer_tMomObjectOutput_3
										.send(message_tMomObjectOutput_3);

								tos_count_tMomObjectOutput_3++;

								/**
								 * [tMomObjectOutput_3 main ] stop
								 */

							} // End of branch "row3"

						} // End of branch "odoo_products"

						// Start of branch "persoin"
						if (persoin != null) {

							/**
							 * [tXMLRPCOpenDAS_10 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_10";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_10 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_10 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_10 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_10);
							}

							consoleOut_tXMLRPCOpenDAS_10
									.println("tXMLRPCOpenDAS_10"
											+ " received parameters : "
											+ persoin.toString());
							consoleOut_tXMLRPCOpenDAS_10.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_10 = persoin.title;
							String sendUrl_tXMLRPCOpenDAS_10 = persoin.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_10 = persoin.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_10 = persoin.sendedDate;
							String station_tXMLRPCOpenDAS_10 = persoin.station;
							java.util.Map checkingMap = (java.util.Map) persoin.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
								if ("_workstation".equals(tab[i])) {
									vals.put("workcenter_ext",
											checkingMap.get(tab[i]));
								}
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_10 = null;
							String sendUrl_out_tXMLRPCOpenDAS_10 = null;
							String fromUrl_out_tXMLRPCOpenDAS_10 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_10 = null;
							String station_out_tXMLRPCOpenDAS_10 = null;
							Object attachement_out_tXMLRPCOpenDAS_10 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_10
										.println("tXMLRPCOpenDAS_10"
												+ " Connexion OpenERP_V5 ");
								consoleOut_tXMLRPCOpenDAS_10.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_10 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameOdoo,
										context.usernameOdoo, context.pwdOdoo,
										context.hostOdoo, context.portOdoo);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_10
										.println("tXMLRPCOpenDAS_10"
												+ " XMLRpc : "
												+ "hr.employee"
												+ " "
												+ "talend_get_employee_in_workcenter_barre");
								consoleOut_tXMLRPCOpenDAS_10.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_10 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_10
										.exec("hr.employee",
												"talend_get_employee_in_workcenter_barre",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_10 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_10 : "
													+ responsetXMLRPCOpenDAS_10);
									result.setCode(responsetXMLRPCOpenDAS_10
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_10
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_10
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_10
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_10 = {
									title_tXMLRPCOpenDAS_10,
									sendUrl_tXMLRPCOpenDAS_10,
									fromUrl_tXMLRPCOpenDAS_10,
									sendedDate_tXMLRPCOpenDAS_10,
									persoin.attachement,
									station_tXMLRPCOpenDAS_10,
									title_out_tXMLRPCOpenDAS_10,
									sendUrl_out_tXMLRPCOpenDAS_10,
									fromUrl_out_tXMLRPCOpenDAS_10,
									sendedDate_out_tXMLRPCOpenDAS_10, result,
									station_out_tXMLRPCOpenDAS_10 };

							for (int i_tXMLRPCOpenDAS_10 = 0; i_tXMLRPCOpenDAS_10 < results_tXMLRPCOpenDAS_10.length; i_tXMLRPCOpenDAS_10++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[0] != null) {
									row7.title = (String) results_tXMLRPCOpenDAS_10[0];

								} else {
									row7.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[1] != null) {
									row7.sendUrl = (String) results_tXMLRPCOpenDAS_10[1];

								} else {
									row7.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[2] != null) {
									row7.fromUrl = (String) results_tXMLRPCOpenDAS_10[2];

								} else {
									row7.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[3] != null) {
									row7.sendedDate = (Date) results_tXMLRPCOpenDAS_10[3];

								} else {
									row7.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[4] != null) {
									row7.attachement = (Object) results_tXMLRPCOpenDAS_10[4];

								} else {
									row7.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[5] != null) {
									row7.station = (String) results_tXMLRPCOpenDAS_10[5];

								} else {
									row7.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[6] != null) {
									row7.title_out = (String) results_tXMLRPCOpenDAS_10[6];

								} else {
									row7.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[7] != null) {
									row7.send_out = (String) results_tXMLRPCOpenDAS_10[7];

								} else {
									row7.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[8] != null) {
									row7.from_out = (String) results_tXMLRPCOpenDAS_10[8];

								} else {
									row7.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[9] != null) {
									row7.sendedDate_out = (Date) results_tXMLRPCOpenDAS_10[9];

								} else {
									row7.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[10] != null) {
									row7.attachement_out = (Object) results_tXMLRPCOpenDAS_10[10];

								} else {
									row7.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_10.length
										&& results_tXMLRPCOpenDAS_10[11] != null) {
									row7.station_out = (String) results_tXMLRPCOpenDAS_10[11];

								} else {
									row7.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_10++;

							/**
							 * [tXMLRPCOpenDAS_10 main ] stop
							 */
							// Start of branch "row7"
							if (row7 != null) {

								/**
								 * [tMomObjectOutput_7 main ] start
								 */

								currentComponent = "tMomObjectOutput_7";

								System.out.println("attachement :"
										+ row7.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row7.title);
								previousRequest.setSendUrl(row7.sendUrl);
								previousRequest.setFromUrl(row7.fromUrl);
								previousRequest.setSendedDate(row7.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row7.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row7.title_out);
								response.setSendedDate(row7.sendedDate_out);
								response.setAttachement((java.io.Serializable) row7.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_7 = session_tMomObjectOutput_7
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_7.setObject(response);
								message_tMomObjectOutput_7.setStringProperty(
										"Sujet", row7.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_7 = session_tMomObjectOutput_7
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_7 = session_tMomObjectOutput_7
										.createProducer(des_tMomObjectOutput_7);
								producer_tMomObjectOutput_7
										.send(message_tMomObjectOutput_7);

								tos_count_tMomObjectOutput_7++;

								/**
								 * [tMomObjectOutput_7 main ] stop
								 */

							} // End of branch "row7"

						} // End of branch "persoin"

						// Start of branch "persoout"
						if (persoout != null) {

							/**
							 * [tXMLRPCOpenDAS_11 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_11";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_11 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_11 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_11 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_11);
							}

							consoleOut_tXMLRPCOpenDAS_11
									.println("tXMLRPCOpenDAS_11"
											+ " received parameters : "
											+ persoout.toString());
							consoleOut_tXMLRPCOpenDAS_11.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_11 = persoout.title;
							String sendUrl_tXMLRPCOpenDAS_11 = persoout.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_11 = persoout.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_11 = persoout.sendedDate;
							String station_tXMLRPCOpenDAS_11 = persoout.station;
							java.util.Map checkingMap = (java.util.Map) persoout.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
								if ("_workstation".equals(tab[i])) {
									vals.put("workcenter_ext",
											checkingMap.get(tab[i]));
								}
								if ("_workstation".equals(tab[i])) {
									vals.put("workcenter_ext",
											checkingMap.get(tab[i]));
								}
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_11 = null;
							String sendUrl_out_tXMLRPCOpenDAS_11 = null;
							String fromUrl_out_tXMLRPCOpenDAS_11 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_11 = null;
							String station_out_tXMLRPCOpenDAS_11 = null;
							Object attachement_out_tXMLRPCOpenDAS_11 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_11
										.println("tXMLRPCOpenDAS_11"
												+ " Connexion OpenERP_V5 ");
								consoleOut_tXMLRPCOpenDAS_11.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_11 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameOdoo,
										context.usernameOdoo, context.pwdOdoo,
										context.hostOdoo, context.portOdoo);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_11
										.println("tXMLRPCOpenDAS_11"
												+ " XMLRpc : "
												+ "hr.employee"
												+ " "
												+ "talend_get_employee_out_workcenter_barre");
								consoleOut_tXMLRPCOpenDAS_11.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_11 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_11
										.exec("hr.employee",
												"talend_get_employee_out_workcenter_barre",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_11 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_11 : "
													+ responsetXMLRPCOpenDAS_11);
									result.setCode(responsetXMLRPCOpenDAS_11
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_11
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_11
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_11
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setName((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_11 = {
									title_tXMLRPCOpenDAS_11,
									sendUrl_tXMLRPCOpenDAS_11,
									fromUrl_tXMLRPCOpenDAS_11,
									sendedDate_tXMLRPCOpenDAS_11,
									persoout.attachement,
									station_tXMLRPCOpenDAS_11,
									title_out_tXMLRPCOpenDAS_11,
									sendUrl_out_tXMLRPCOpenDAS_11,
									fromUrl_out_tXMLRPCOpenDAS_11,
									sendedDate_out_tXMLRPCOpenDAS_11, result,
									station_out_tXMLRPCOpenDAS_11 };

							for (int i_tXMLRPCOpenDAS_11 = 0; i_tXMLRPCOpenDAS_11 < results_tXMLRPCOpenDAS_11.length; i_tXMLRPCOpenDAS_11++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[0] != null) {
									row8.title = (String) results_tXMLRPCOpenDAS_11[0];

								} else {
									row8.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[1] != null) {
									row8.sendUrl = (String) results_tXMLRPCOpenDAS_11[1];

								} else {
									row8.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[2] != null) {
									row8.fromUrl = (String) results_tXMLRPCOpenDAS_11[2];

								} else {
									row8.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[3] != null) {
									row8.sendedDate = (Date) results_tXMLRPCOpenDAS_11[3];

								} else {
									row8.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[4] != null) {
									row8.attachement = (Object) results_tXMLRPCOpenDAS_11[4];

								} else {
									row8.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[5] != null) {
									row8.station = (String) results_tXMLRPCOpenDAS_11[5];

								} else {
									row8.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[6] != null) {
									row8.title_out = (String) results_tXMLRPCOpenDAS_11[6];

								} else {
									row8.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[7] != null) {
									row8.send_out = (String) results_tXMLRPCOpenDAS_11[7];

								} else {
									row8.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[8] != null) {
									row8.from_out = (String) results_tXMLRPCOpenDAS_11[8];

								} else {
									row8.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[9] != null) {
									row8.sendedDate_out = (Date) results_tXMLRPCOpenDAS_11[9];

								} else {
									row8.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[10] != null) {
									row8.attachement_out = (Object) results_tXMLRPCOpenDAS_11[10];

								} else {
									row8.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_11.length
										&& results_tXMLRPCOpenDAS_11[11] != null) {
									row8.station_out = (String) results_tXMLRPCOpenDAS_11[11];

								} else {
									row8.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_11++;

							/**
							 * [tXMLRPCOpenDAS_11 main ] stop
							 */
							// Start of branch "row8"
							if (row8 != null) {

								/**
								 * [tMomObjectOutput_8 main ] start
								 */

								currentComponent = "tMomObjectOutput_8";

								System.out.println("attachement :"
										+ row8.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row8.title);
								previousRequest.setSendUrl(row8.sendUrl);
								previousRequest.setFromUrl(row8.fromUrl);
								previousRequest.setSendedDate(row8.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row8.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row8.title_out);
								response.setSendedDate(row8.sendedDate_out);
								response.setAttachement((java.io.Serializable) row8.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_8 = session_tMomObjectOutput_8
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_8.setObject(response);
								message_tMomObjectOutput_8.setStringProperty(
										"Sujet", row8.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_8 = session_tMomObjectOutput_8
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_8 = session_tMomObjectOutput_8
										.createProducer(des_tMomObjectOutput_8);
								producer_tMomObjectOutput_8
										.send(message_tMomObjectOutput_8);

								tos_count_tMomObjectOutput_8++;

								/**
								 * [tMomObjectOutput_8 main ] stop
								 */

							} // End of branch "row8"

						} // End of branch "persoout"

						// Start of branch "groups"
						if (groups != null) {

							/**
							 * [tXMLRPCOpenDAS_3 main ] start
							 */

							currentComponent = "tXMLRPCOpenDAS_3";

							// DEBUG DISPLAY
							java.io.PrintStream consoleOut_tXMLRPCOpenDAS_3 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tXMLRPCOpenDAS_3 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tXMLRPCOpenDAS_3 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tXMLRPCOpenDAS_3);
							}

							consoleOut_tXMLRPCOpenDAS_3
									.println("tXMLRPCOpenDAS_3"
											+ " received parameters : "
											+ groups.toString());
							consoleOut_tXMLRPCOpenDAS_3.flush();

							// Retrieving input parameters (These parameters
							// come from tMomObjectInput)
							String title_tXMLRPCOpenDAS_3 = groups.title;
							String sendUrl_tXMLRPCOpenDAS_3 = groups.sendUrl;
							String fromUrl_tXMLRPCOpenDAS_3 = groups.fromUrl;
							Date sendedDate_tXMLRPCOpenDAS_3 = groups.sendedDate;
							String station_tXMLRPCOpenDAS_3 = groups.station;
							java.util.Map checkingMap = (java.util.Map) groups.attachement;

							Object[] tab = checkingMap.keySet().toArray();
							redstone.xmlrpc.XmlRpcStruct vals = new redstone.xmlrpc.XmlRpcStruct();
							for (int i = 0; i < tab.length; i++) {
								if ("perso".equals(tab[i])) {
									vals.put("employee",
											checkingMap.get(tab[i]));
								}
								if ("persoin".equals(tab[i])) {
									vals.put("employee",
											checkingMap.get(tab[i]));
								}
								if ("persoout".equals(tab[i])) {
									vals.put("employee",
											checkingMap.get(tab[i]));
								}
							}
							// Initialization output parameters
							String title_out_tXMLRPCOpenDAS_3 = null;
							String sendUrl_out_tXMLRPCOpenDAS_3 = null;
							String fromUrl_out_tXMLRPCOpenDAS_3 = null;
							Date sendedDate_out_tXMLRPCOpenDAS_3 = null;
							String station_out_tXMLRPCOpenDAS_3 = null;
							Object attachement_out_tXMLRPCOpenDAS_3 = null;
							org.opendas.modele.DASError result = new org.opendas.modele.DASError();

							try {
								consoleOut_tXMLRPCOpenDAS_3
										.println("tXMLRPCOpenDAS_3"
												+ " Connexion OpenERP_V5 ");
								consoleOut_tXMLRPCOpenDAS_3.flush();
								OpenDAS_xmlrpc.OpenERP_V5_connect connexiontXMLRPCOpenDAS_3 = new OpenDAS_xmlrpc.OpenERP_V5_connect(
										context.dbnameOdoo,
										context.usernameOdoo, context.pwdOdoo,
										context.hostOdoo, context.portOdoo);

								java.util.List<Object[]> context_search_tmp = new java.util.ArrayList<Object[]>();

								Object[] context_search = new Object[context_search_tmp
										.size()];
								for (int i = 0; i < context_search_tmp.size(); ++i) {
									context_search[i] = context_search_tmp
											.get(i);
								}

								consoleOut_tXMLRPCOpenDAS_3
										.println("tXMLRPCOpenDAS_3"
												+ " XMLRpc : "
												+ "hr.employee"
												+ " "
												+ "talend_get_groups_by_employee");
								consoleOut_tXMLRPCOpenDAS_3.flush();
								redstone.xmlrpc.XmlRpcStruct responsetXMLRPCOpenDAS_3 = (redstone.xmlrpc.XmlRpcStruct) connexiontXMLRPCOpenDAS_3
										.exec("hr.employee",
												"talend_get_groups_by_employee",
												vals, context_search);
								if (responsetXMLRPCOpenDAS_3 != null) {
									System.out
											.println("responsetXMLRPCOpenDAS_3 : "
													+ responsetXMLRPCOpenDAS_3);
									result.setCode(responsetXMLRPCOpenDAS_3
											.getInteger("code"));
									result.setString(responsetXMLRPCOpenDAS_3
											.getString("string"));
									java.util.List<org.opendas.modele.DASGeneric> listgen = new java.util.ArrayList<org.opendas.modele.DASGeneric>();

									redstone.xmlrpc.XmlRpcArray res_array = null;
									res_array = (redstone.xmlrpc.XmlRpcArray) responsetXMLRPCOpenDAS_3
											.get("object");

									Object retour = null;
									for (int i = 0; i < res_array.size(); ++i) {
										org.opendas.modele.DASGeneric tmp_generic = new org.opendas.modele.DASGeneric();
										redstone.xmlrpc.XmlRpcStruct tmp_dict = null;
										tmp_dict = (redstone.xmlrpc.XmlRpcStruct) res_array
												.get(i);
										tmp_generic
												.setInfos(connexiontXMLRPCOpenDAS_3
														.convert(tmp_dict));
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("id"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("id"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										if ("String".equals("Integer")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
											} else if ("String"
													.equals("String")) {
												retour = (Object) new Integer(
														tmp_dict.getInteger("name"));
												retour = (Object) ((Integer) retour)
														.toString();
											}
										} else if ("String".equals("String")) {
											if ("String".equals("Integer")) {
												retour = (Object) new Integer(
														-1);
											} else if ("String"
													.equals("String")) {
												retour = (Object) new String(
														tmp_dict.getString("name"));
											}
										}
										if (retour != null
												&& (retour instanceof Integer || retour instanceof String)) {
											tmp_generic
													.setCode((String) retour);
											tmp_generic.setPage(0);
											tmp_generic.setPosition(0);
										}
										listgen.add(tmp_generic);
									}
									result.setObject(listgen);
								} else {
									System.out
											.println("ERROR : On ext response");

									result.setCode(1);

									result.setString("ERROR : On ext response");

								}

							} catch (redstone.xmlrpc.XmlRpcException e) {
								System.out.println("ERROR XMLRPC : "
										+ e.toString());
								result.setCode(2);
								result.setString("ERROR XMLRPC : "
										+ e.toString());
							} catch (Exception e) {
								System.out.println("ERROR : " + e.toString());
								result.setCode(3);
								result.setString("ERROR : " + e.toString());
							}
							System.out.println("result :" + result);

							// Transmission of parameters to tMomObjectOutput
							// component ( none output here)
							Object[] results_tXMLRPCOpenDAS_3 = {
									title_tXMLRPCOpenDAS_3,
									sendUrl_tXMLRPCOpenDAS_3,
									fromUrl_tXMLRPCOpenDAS_3,
									sendedDate_tXMLRPCOpenDAS_3,
									groups.attachement,
									station_tXMLRPCOpenDAS_3,
									title_out_tXMLRPCOpenDAS_3,
									sendUrl_out_tXMLRPCOpenDAS_3,
									fromUrl_out_tXMLRPCOpenDAS_3,
									sendedDate_out_tXMLRPCOpenDAS_3, result,
									station_out_tXMLRPCOpenDAS_3 };

							for (int i_tXMLRPCOpenDAS_3 = 0; i_tXMLRPCOpenDAS_3 < results_tXMLRPCOpenDAS_3.length; i_tXMLRPCOpenDAS_3++) {

								// for output

								// We set the results in the output connections
								if (0 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[0] != null) {
									row15.title = (String) results_tXMLRPCOpenDAS_3[0];

								} else {
									row15.title = null;
								}

								// We set the results in the output connections
								if (1 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[1] != null) {
									row15.sendUrl = (String) results_tXMLRPCOpenDAS_3[1];

								} else {
									row15.sendUrl = null;
								}

								// We set the results in the output connections
								if (2 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[2] != null) {
									row15.fromUrl = (String) results_tXMLRPCOpenDAS_3[2];

								} else {
									row15.fromUrl = null;
								}

								// We set the results in the output connections
								if (3 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[3] != null) {
									row15.sendedDate = (Date) results_tXMLRPCOpenDAS_3[3];

								} else {
									row15.sendedDate = null;
								}

								// We set the results in the output connections
								if (4 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[4] != null) {
									row15.attachement = (Object) results_tXMLRPCOpenDAS_3[4];

								} else {
									row15.attachement = null;
								}

								// We set the results in the output connections
								if (5 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[5] != null) {
									row15.station = (String) results_tXMLRPCOpenDAS_3[5];

								} else {
									row15.station = null;
								}

								// We set the results in the output connections
								if (6 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[6] != null) {
									row15.title_out = (String) results_tXMLRPCOpenDAS_3[6];

								} else {
									row15.title_out = null;
								}

								// We set the results in the output connections
								if (7 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[7] != null) {
									row15.send_out = (String) results_tXMLRPCOpenDAS_3[7];

								} else {
									row15.send_out = null;
								}

								// We set the results in the output connections
								if (8 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[8] != null) {
									row15.from_out = (String) results_tXMLRPCOpenDAS_3[8];

								} else {
									row15.from_out = null;
								}

								// We set the results in the output connections
								if (9 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[9] != null) {
									row15.sendedDate_out = (Date) results_tXMLRPCOpenDAS_3[9];

								} else {
									row15.sendedDate_out = null;
								}

								// We set the results in the output connections
								if (10 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[10] != null) {
									row15.attachement_out = (Object) results_tXMLRPCOpenDAS_3[10];

								} else {
									row15.attachement_out = null;
								}

								// We set the results in the output connections
								if (11 < results_tXMLRPCOpenDAS_3.length
										&& results_tXMLRPCOpenDAS_3[11] != null) {
									row15.station_out = (String) results_tXMLRPCOpenDAS_3[11];

								} else {
									row15.station_out = null;
								}

							}

							tos_count_tXMLRPCOpenDAS_3++;

							/**
							 * [tXMLRPCOpenDAS_3 main ] stop
							 */
							// Start of branch "row15"
							if (row15 != null) {

								/**
								 * [tMomObjectOutput_13 main ] start
								 */

								currentComponent = "tMomObjectOutput_13";

								System.out.println("attachement :"
										+ row15.attachement);

								// on reconstitue le message d'origine
								org.opendas.modele.ServerRequest previousRequest = new org.opendas.modele.ServerRequest();
								previousRequest.setTitle(row15.title);
								previousRequest.setSendUrl(row15.sendUrl);
								previousRequest.setFromUrl(row15.fromUrl);
								previousRequest.setSendedDate(row15.sendedDate);
								previousRequest
										.setAttachement((java.io.Serializable) row15.attachement);

								// on crée le message de réponse
								org.opendas.modele.ServerRequest response = new org.opendas.modele.ServerRequest(
										previousRequest);
								response.setTitle(row15.title_out);
								response.setSendedDate(row15.sendedDate_out);
								response.setAttachement((java.io.Serializable) row15.attachement_out);

								javax.jms.ObjectMessage message_tMomObjectOutput_13 = session_tMomObjectOutput_13
										.createObjectMessage();// On crée
																// l'ObjectMessage
								message_tMomObjectOutput_13.setObject(response);
								message_tMomObjectOutput_13.setStringProperty(
										"Sujet", row15.station);

								System.out
										.println("----------------------------");
								System.out.println(response);
								System.out
										.println("----------------------------");

								des_tMomObjectOutput_13 = session_tMomObjectOutput_13
										.createQueue(response.getSendUrl());
								producer_tMomObjectOutput_13 = session_tMomObjectOutput_13
										.createProducer(des_tMomObjectOutput_13);
								producer_tMomObjectOutput_13
										.send(message_tMomObjectOutput_13);

								tos_count_tMomObjectOutput_13++;

								/**
								 * [tMomObjectOutput_13 main ] stop
								 */

							} // End of branch "row15"

						} // End of branch "groups"

					} // End of branch "getWsGenericsExt"

					/**
					 * [tMomObjectInput_1 end ] start
					 */

					currentComponent = "tMomObjectInput_1";

				}
				System.out.println("Closing connection");
				consumer_tMomObjectInput_1.close();
				session_tMomObjectInput_1.close();
				connection_tMomObjectInput_1.close();

				ok_Hash.put("tMomObjectInput_1", true);
				end_Hash.put("tMomObjectInput_1", System.currentTimeMillis());

				/**
				 * [tMomObjectInput_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_17 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_17";

				ok_Hash.put("tXMLRPCOpenDAS_17", true);
				end_Hash.put("tXMLRPCOpenDAS_17", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_17 end ] stop
				 */

				/**
				 * [tMomObjectOutput_15 end ] start
				 */

				currentComponent = "tMomObjectOutput_15";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_15.close();
				session_tMomObjectOutput_15.close();
				connection_tMomObjectOutput_15.close();

				ok_Hash.put("tMomObjectOutput_15", true);
				end_Hash.put("tMomObjectOutput_15", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_15 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_2 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_2";

				ok_Hash.put("tXMLRPCOpenDAS_2", true);
				end_Hash.put("tXMLRPCOpenDAS_2", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_2 end ] stop
				 */

				/**
				 * [tMomObjectOutput_2 end ] start
				 */

				currentComponent = "tMomObjectOutput_2";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_2.close();
				session_tMomObjectOutput_2.close();
				connection_tMomObjectOutput_2.close();

				ok_Hash.put("tMomObjectOutput_2", true);
				end_Hash.put("tMomObjectOutput_2", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_2 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_6 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_6";

				ok_Hash.put("tXMLRPCOpenDAS_6", true);
				end_Hash.put("tXMLRPCOpenDAS_6", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_6 end ] stop
				 */

				/**
				 * [tMomObjectOutput_4 end ] start
				 */

				currentComponent = "tMomObjectOutput_4";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_4.close();
				session_tMomObjectOutput_4.close();
				connection_tMomObjectOutput_4.close();

				ok_Hash.put("tMomObjectOutput_4", true);
				end_Hash.put("tMomObjectOutput_4", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_4 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_8 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_8";

				ok_Hash.put("tXMLRPCOpenDAS_8", true);
				end_Hash.put("tXMLRPCOpenDAS_8", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_8 end ] stop
				 */

				/**
				 * [tMomObjectOutput_5 end ] start
				 */

				currentComponent = "tMomObjectOutput_5";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_5.close();
				session_tMomObjectOutput_5.close();
				connection_tMomObjectOutput_5.close();

				ok_Hash.put("tMomObjectOutput_5", true);
				end_Hash.put("tMomObjectOutput_5", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_5 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_9 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_9";

				ok_Hash.put("tXMLRPCOpenDAS_9", true);
				end_Hash.put("tXMLRPCOpenDAS_9", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_9 end ] stop
				 */

				/**
				 * [tMomObjectOutput_6 end ] start
				 */

				currentComponent = "tMomObjectOutput_6";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_6.close();
				session_tMomObjectOutput_6.close();
				connection_tMomObjectOutput_6.close();

				ok_Hash.put("tMomObjectOutput_6", true);
				end_Hash.put("tMomObjectOutput_6", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_6 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_12 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_12";

				ok_Hash.put("tXMLRPCOpenDAS_12", true);
				end_Hash.put("tXMLRPCOpenDAS_12", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_12 end ] stop
				 */

				/**
				 * [tMomObjectOutput_9 end ] start
				 */

				currentComponent = "tMomObjectOutput_9";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_9.close();
				session_tMomObjectOutput_9.close();
				connection_tMomObjectOutput_9.close();

				ok_Hash.put("tMomObjectOutput_9", true);
				end_Hash.put("tMomObjectOutput_9", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_9 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_14 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_14";

				ok_Hash.put("tXMLRPCOpenDAS_14", true);
				end_Hash.put("tXMLRPCOpenDAS_14", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_14 end ] stop
				 */

				/**
				 * [tMomObjectOutput_10 end ] start
				 */

				currentComponent = "tMomObjectOutput_10";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_10.close();
				session_tMomObjectOutput_10.close();
				connection_tMomObjectOutput_10.close();

				ok_Hash.put("tMomObjectOutput_10", true);
				end_Hash.put("tMomObjectOutput_10", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_10 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_15 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_15";

				ok_Hash.put("tXMLRPCOpenDAS_15", true);
				end_Hash.put("tXMLRPCOpenDAS_15", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_15 end ] stop
				 */

				/**
				 * [tMomObjectOutput_11 end ] start
				 */

				currentComponent = "tMomObjectOutput_11";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_11.close();
				session_tMomObjectOutput_11.close();
				connection_tMomObjectOutput_11.close();

				ok_Hash.put("tMomObjectOutput_11", true);
				end_Hash.put("tMomObjectOutput_11", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_11 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_4 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_4";

				ok_Hash.put("tXMLRPCOpenDAS_4", true);
				end_Hash.put("tXMLRPCOpenDAS_4", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_4 end ] stop
				 */

				/**
				 * [tMomObjectOutput_12 end ] start
				 */

				currentComponent = "tMomObjectOutput_12";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_12.close();
				session_tMomObjectOutput_12.close();
				connection_tMomObjectOutput_12.close();

				ok_Hash.put("tMomObjectOutput_12", true);
				end_Hash.put("tMomObjectOutput_12", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_12 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_16 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_16";

				ok_Hash.put("tXMLRPCOpenDAS_16", true);
				end_Hash.put("tXMLRPCOpenDAS_16", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_16 end ] stop
				 */

				/**
				 * [tMomObjectOutput_14 end ] start
				 */

				currentComponent = "tMomObjectOutput_14";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_14.close();
				session_tMomObjectOutput_14.close();
				connection_tMomObjectOutput_14.close();

				ok_Hash.put("tMomObjectOutput_14", true);
				end_Hash.put("tMomObjectOutput_14", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_14 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_5 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_5";

				ok_Hash.put("tXMLRPCOpenDAS_5", true);
				end_Hash.put("tXMLRPCOpenDAS_5", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_5 end ] stop
				 */

				/**
				 * [tMomObjectOutput_3 end ] start
				 */

				currentComponent = "tMomObjectOutput_3";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_3.close();
				session_tMomObjectOutput_3.close();
				connection_tMomObjectOutput_3.close();

				ok_Hash.put("tMomObjectOutput_3", true);
				end_Hash.put("tMomObjectOutput_3", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_3 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_10 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_10";

				ok_Hash.put("tXMLRPCOpenDAS_10", true);
				end_Hash.put("tXMLRPCOpenDAS_10", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_10 end ] stop
				 */

				/**
				 * [tMomObjectOutput_7 end ] start
				 */

				currentComponent = "tMomObjectOutput_7";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_7.close();
				session_tMomObjectOutput_7.close();
				connection_tMomObjectOutput_7.close();

				ok_Hash.put("tMomObjectOutput_7", true);
				end_Hash.put("tMomObjectOutput_7", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_7 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_11 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_11";

				ok_Hash.put("tXMLRPCOpenDAS_11", true);
				end_Hash.put("tXMLRPCOpenDAS_11", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_11 end ] stop
				 */

				/**
				 * [tMomObjectOutput_8 end ] start
				 */

				currentComponent = "tMomObjectOutput_8";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_8.close();
				session_tMomObjectOutput_8.close();
				connection_tMomObjectOutput_8.close();

				ok_Hash.put("tMomObjectOutput_8", true);
				end_Hash.put("tMomObjectOutput_8", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_8 end ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_3 end ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_3";

				ok_Hash.put("tXMLRPCOpenDAS_3", true);
				end_Hash.put("tXMLRPCOpenDAS_3", System.currentTimeMillis());

				/**
				 * [tXMLRPCOpenDAS_3 end ] stop
				 */

				/**
				 * [tMomObjectOutput_13 end ] start
				 */

				currentComponent = "tMomObjectOutput_13";

				System.out.println("Closing connection");
				producer_tMomObjectOutput_13.close();
				session_tMomObjectOutput_13.close();
				connection_tMomObjectOutput_13.close();

				ok_Hash.put("tMomObjectOutput_13", true);
				end_Hash.put("tMomObjectOutput_13", System.currentTimeMillis());

				/**
				 * [tMomObjectOutput_13 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMomObjectInput_1 finally ] start
				 */

				currentComponent = "tMomObjectInput_1";

				/**
				 * [tMomObjectInput_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_17 finally ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_17";

				/**
				 * [tXMLRPCOpenDAS_17 finally ] stop
				 */

				/**
				 * [tMomObjectOutput_15 finally ] start
				 */

				currentComponent = "tMomObjectOutput_15";

				/**
				 * [tMomObjectOutput_15 finally ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_2 finally ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_2";

				/**
				 * [tXMLRPCOpenDAS_2 finally ] stop
				 */

				/**
				 * [tMomObjectOutput_2 finally ] start
				 */

				currentComponent = "tMomObjectOutput_2";

				/**
				 * [tMomObjectOutput_2 finally ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_6 finally ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_6";

				/**
				 * [tXMLRPCOpenDAS_6 finally ] stop
				 */

				/**
				 * [tMomObjectOutput_4 finally ] start
				 */

				currentComponent = "tMomObjectOutput_4";

				/**
				 * [tMomObjectOutput_4 finally ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_8 finally ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_8";

				/**
				 * [tXMLRPCOpenDAS_8 finally ] stop
				 */

				/**
				 * [tMomObjectOutput_5 finally ] start
				 */

				currentComponent = "tMomObjectOutput_5";

				/**
				 * [tMomObjectOutput_5 finally ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_9 finally ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_9";

				/**
				 * [tXMLRPCOpenDAS_9 finally ] stop
				 */

				/**
				 * [tMomObjectOutput_6 finally ] start
				 */

				currentComponent = "tMomObjectOutput_6";

				/**
				 * [tMomObjectOutput_6 finally ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_12 finally ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_12";

				/**
				 * [tXMLRPCOpenDAS_12 finally ] stop
				 */

				/**
				 * [tMomObjectOutput_9 finally ] start
				 */

				currentComponent = "tMomObjectOutput_9";

				/**
				 * [tMomObjectOutput_9 finally ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_14 finally ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_14";

				/**
				 * [tXMLRPCOpenDAS_14 finally ] stop
				 */

				/**
				 * [tMomObjectOutput_10 finally ] start
				 */

				currentComponent = "tMomObjectOutput_10";

				/**
				 * [tMomObjectOutput_10 finally ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_15 finally ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_15";

				/**
				 * [tXMLRPCOpenDAS_15 finally ] stop
				 */

				/**
				 * [tMomObjectOutput_11 finally ] start
				 */

				currentComponent = "tMomObjectOutput_11";

				/**
				 * [tMomObjectOutput_11 finally ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_4 finally ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_4";

				/**
				 * [tXMLRPCOpenDAS_4 finally ] stop
				 */

				/**
				 * [tMomObjectOutput_12 finally ] start
				 */

				currentComponent = "tMomObjectOutput_12";

				/**
				 * [tMomObjectOutput_12 finally ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_16 finally ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_16";

				/**
				 * [tXMLRPCOpenDAS_16 finally ] stop
				 */

				/**
				 * [tMomObjectOutput_14 finally ] start
				 */

				currentComponent = "tMomObjectOutput_14";

				/**
				 * [tMomObjectOutput_14 finally ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_5 finally ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_5";

				/**
				 * [tXMLRPCOpenDAS_5 finally ] stop
				 */

				/**
				 * [tMomObjectOutput_3 finally ] start
				 */

				currentComponent = "tMomObjectOutput_3";

				/**
				 * [tMomObjectOutput_3 finally ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_10 finally ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_10";

				/**
				 * [tXMLRPCOpenDAS_10 finally ] stop
				 */

				/**
				 * [tMomObjectOutput_7 finally ] start
				 */

				currentComponent = "tMomObjectOutput_7";

				/**
				 * [tMomObjectOutput_7 finally ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_11 finally ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_11";

				/**
				 * [tXMLRPCOpenDAS_11 finally ] stop
				 */

				/**
				 * [tMomObjectOutput_8 finally ] start
				 */

				currentComponent = "tMomObjectOutput_8";

				/**
				 * [tMomObjectOutput_8 finally ] stop
				 */

				/**
				 * [tXMLRPCOpenDAS_3 finally ] start
				 */

				currentComponent = "tXMLRPCOpenDAS_3";

				/**
				 * [tXMLRPCOpenDAS_3 finally ] stop
				 */

				/**
				 * [tMomObjectOutput_13 finally ] start
				 */

				currentComponent = "tMomObjectOutput_13";

				/**
				 * [tMomObjectOutput_13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMomObjectInput_1_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				java.net.URLClassLoader sysloader_tLibraryLoad_1 = (java.net.URLClassLoader) ClassLoader
						.getSystemClassLoader();
				java.lang.reflect.Method method_tLibraryLoad_1 = java.net.URLClassLoader.class
						.getDeclaredMethod("addURL",
								new Class[] { java.net.URL.class });
				method_tLibraryLoad_1.setAccessible(true);

				String[] libPaths_tLibraryLoad_1 = new String[] {
						"opendas-server.jar", "activemq-all-5.5.0.jar",
						"slf4j-simple-1.5.4.jar", };
				for (String lib_tLibraryLoad_1 : libPaths_tLibraryLoad_1) {
					String separator_tLibraryLoad_1 = System
							.getProperty("path.separator");
					String[] jarFiles_tLibraryLoad_1 = lib_tLibraryLoad_1
							.split(separator_tLibraryLoad_1);
					for (String jarFile_tLibraryLoad_1 : jarFiles_tLibraryLoad_1) {
						method_tLibraryLoad_1.invoke(sysloader_tLibraryLoad_1,
								new Object[] { new java.io.File(
										jarFile_tLibraryLoad_1).toURL() });
					}
				}

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */
				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */
				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLibraryLoad_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tMomObjectOutput_SubjectList_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLibraryLoad_1 finally ] start
				 */

				currentComponent = "tLibraryLoad_1";

				/**
				 * [tLibraryLoad_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final GET_DEV GET_DEVClass = new GET_DEV();

		int exitCode = GET_DEVClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = GET_DEV.class.getClassLoader()
					.getResourceAsStream(
							"opendas/get_dev_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.host = (String) context.getProperty("host");
			context.port = (String) context.getProperty("port");
			context.pwd = (String) context.getProperty("pwd");
			context.username = (String) context.getProperty("username");
			context.addressActiveMQ = (String) context
					.getProperty("addressActiveMQ");
			context.dbnameOdoo = (String) context.getProperty("dbnameOdoo");
			context.hostOdoo = (String) context.getProperty("hostOdoo");
			context.portActiveMQ = (String) context.getProperty("portActiveMQ");
			context.portOdoo = (String) context.getProperty("portOdoo");
			context.pwdOdoo = (String) context.getProperty("pwdOdoo");
			context.receiverClientActiveMQ = (String) context
					.getProperty("receiverClientActiveMQ");
			context.receiverServerActiveMQ = (String) context
					.getProperty("receiverServerActiveMQ");
			context.senderActiveMQ = (String) context
					.getProperty("senderActiveMQ");
			context.station = (String) context.getProperty("station");
			context.uid = (String) context.getProperty("uid");
			context.usernameOdoo = (String) context.getProperty("usernameOdoo");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("host")) {
				context.host = (String) parentContextMap.get("host");
			}
			if (parentContextMap.containsKey("port")) {
				context.port = (String) parentContextMap.get("port");
			}
			if (parentContextMap.containsKey("pwd")) {
				context.pwd = (String) parentContextMap.get("pwd");
			}
			if (parentContextMap.containsKey("username")) {
				context.username = (String) parentContextMap.get("username");
			}
			if (parentContextMap.containsKey("addressActiveMQ")) {
				context.addressActiveMQ = (String) parentContextMap
						.get("addressActiveMQ");
			}
			if (parentContextMap.containsKey("dbnameOdoo")) {
				context.dbnameOdoo = (String) parentContextMap
						.get("dbnameOdoo");
			}
			if (parentContextMap.containsKey("hostOdoo")) {
				context.hostOdoo = (String) parentContextMap.get("hostOdoo");
			}
			if (parentContextMap.containsKey("portActiveMQ")) {
				context.portActiveMQ = (String) parentContextMap
						.get("portActiveMQ");
			}
			if (parentContextMap.containsKey("portOdoo")) {
				context.portOdoo = (String) parentContextMap.get("portOdoo");
			}
			if (parentContextMap.containsKey("pwdOdoo")) {
				context.pwdOdoo = (String) parentContextMap.get("pwdOdoo");
			}
			if (parentContextMap.containsKey("receiverClientActiveMQ")) {
				context.receiverClientActiveMQ = (String) parentContextMap
						.get("receiverClientActiveMQ");
			}
			if (parentContextMap.containsKey("receiverServerActiveMQ")) {
				context.receiverServerActiveMQ = (String) parentContextMap
						.get("receiverServerActiveMQ");
			}
			if (parentContextMap.containsKey("senderActiveMQ")) {
				context.senderActiveMQ = (String) parentContextMap
						.get("senderActiveMQ");
			}
			if (parentContextMap.containsKey("station")) {
				context.station = (String) parentContextMap.get("station");
			}
			if (parentContextMap.containsKey("uid")) {
				context.uid = (String) parentContextMap.get("uid");
			}
			if (parentContextMap.containsKey("usernameOdoo")) {
				context.usernameOdoo = (String) parentContextMap
						.get("usernameOdoo");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}
		try {
			errorCode = null;
			tLibraryLoad_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tLibraryLoad_1) {
			globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", -1);

			e_tLibraryLoad_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : GET_DEV");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 482115 characters generated by Talend Open Studio for Data Integration on the
 * 30 octobre 2014 15:59:27 CET
 ************************************************************************************************/
